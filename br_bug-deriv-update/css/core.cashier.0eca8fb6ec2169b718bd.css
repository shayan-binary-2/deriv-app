/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-themed-scrollbars__track--horizontal {
  height: 6px;
  right: 2px;
  bottom: 2px;
  left: 2px;
  border-radius: 3px; }

.dc-themed-scrollbars__track--vertical {
  width: 6px;
  right: 2px;
  bottom: 2px;
  top: 2px;
  border-radius: 3px; }

.dc-themed-scrollbars__thumb--horizontal {
  border-radius: inherit;
  background-color: var(--state-active); }

.dc-themed-scrollbars__thumb--vertical {
  border-radius: inherit;
  background-color: var(--state-active); }

.dc-icon {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1); }

.dc-icon--disabled {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled); }

.dc-icon--active {
  --fill-color1: #fff;
  --fill-color2: #fff; }

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #fff; }

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #fff; }

.dc-icon--secondary {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #fff; }

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #fff; }

.dc-icon, .dc-popover__target__icon .info:hover {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1); }

.dc-icon--disabled, .dc-popover__target__icon--disabled .info, .dc-popover__target__icon--disabled .info:hover {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled); }

.dc-icon--active {
  --fill-color1: #fff;
  --fill-color2: #fff; }

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #fff; }

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #fff; }

.dc-icon--secondary, .dc-popover__target__icon .info {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #fff; }

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #fff; }

.dc-popover__wrapper {
  position: relative; }

.dc-popover__container {
  position: absolute;
  left: 0;
  top: 0;
  width: 280px; }

.dc-popover__container-relative {
  position: relative; }

.dc-popover__target__icon .counter {
  color: var(--brand-red-coral);
  font-size: 10px;
  font-weight: bold;
  line-height: 1.4em;
  position: absolute;
  top: 50%;
  transform: translateY(-65%); }

.dc-popover__bubble {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.25;
  cursor: help;
  position: relative;
  padding: 0.7em;
  max-width: 280px;
  border-radius: 4px;
  display: flex;
  flex-direction: row;
  background: var(--general-active);
  color: var(--text-prominent);
  z-index: 1; }

.dc-popover__bubble__icon {
  flex-grow: 1;
  margin-right: 0.7em;
  padding-top: 3px; }

.dc-popover__bubble__text {
  flex-grow: 2;
  text-align: left; }

.dc-popover__bubble__text .bold {
  font-weight: bold; }

.dc-popover__bubble__text--error {
  color: var(--text-colored-background); }

.dc-popover__bubble--error {
  background-color: var(--status-danger); }

.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-general); }

.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-general); }

.dc-dropdown__select-arrow .color2-fill {
  fill: none; }

.dc-dropdown__select-arrow .color2-stroke {
  stroke: none; }

.active.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-prominent); }

.active.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-prominent); }

.active.dc-dropdown__select-arrow .color2-fill {
  fill: none; }

.active.dc-dropdown__select-arrow .color2-stroke {
  stroke: none; }

.disabled.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-disabled); }

.disabled.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-disabled); }

.disabled.dc-dropdown__select-arrow .color2-fill {
  fill: none; }

.disabled.dc-dropdown__select-arrow .color2-stroke {
  stroke: none; }

.white.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-prominent); }

.white.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-prominent); }

.border_hover_color.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-prominent); }

.border_hover_color.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-prominent); }

.secondary.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-less-prominent); }

.secondary.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-less-prominent); }

.dc-dropdown__label {
  position: absolute;
  font-size: var(--text-size-xs);
  transform: translate(0.5rem, -1rem) scale(0.75);
  z-index: 2;
  color: var(--text-prominent);
  padding: 0 4px;
  background-color: var(--fill-normal);
  pointer-events: none;
  transition: 0.25s ease all; }

.dc-dropdown__label--clicked {
  color: var(--brand-secondary); }

.dc-dropdown__display {
  cursor: pointer;
  border-radius: 4px;
  height: 3.2em;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--fill-normal);
  border: 1px solid var(--border-normal); }

.dc-dropdown__display:hover {
  outline: 0;
  border-color: var(--border-hover); }

.dc-dropdown__display:active, .dc-dropdown__display:focus {
  outline: 0;
  border-color: var(--border-active); }

.dc-dropdown__display-text {
  padding-left: 1em;
  padding-right: 2.5em;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: var(--text-prominent);
  display: flex; }

.dc-dropdown__display-text--placeholder:after {
  content: attr(placeholder);
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none; }

.dc-dropdown__display--is-left-text {
  justify-content: flex-start; }

.dc-dropdown__display--is-left-text .dc-dropdown__display-text {
  padding-left: 1.2rem; }

.dc-dropdown__display--has-symbol {
  justify-content: unset; }

.dc-dropdown__display--no-symbol .dc-dropdown__display-text {
  padding: unset; }

.dc-dropdown__display--no-border {
  border-color: var(--fill-normal); }

.dc-dropdown__display-placeholder {
  position: absolute;
  top: 1.2rem;
  left: 1rem;
  pointer-events: none;
  transition: 0.25s ease all;
  transform: translateZ(0);
  transform-origin: top left; }

.dc-dropdown__display-placeholder-text {
  font-size: 1.4em;
  padding: 0 4px;
  color: var(--color-grey);
  background: var(--fill-normal); }

.dc-dropdown__display-placeholder--is-left-text {
  justify-content: flex-start;
  left: 8px; }

.dc-dropdown__display-placeholder--is-left-text.dc-dropdown__display-placeholder--is-title {
  transform: translate(0rem, -1.7rem) scale(0.75);
  padding: 0 4px; }

.dc-dropdown__display-placeholder--is-left-text.dc-dropdown__display-placeholder--is-title .dc-dropdown__display-placeholder-text {
  color: var(--text-general) !important; }

.dc-dropdown__inner {
  pointer-events: none;
  opacity: 0;
  height: 0;
  width: 0; }

.dc-dropdown__container {
  position: relative; }

.dc-dropdown__hint {
  color: var(--text-less-prominent);
  font-size: var(--text-size-xxs);
  margin-left: 1.2rem; }

.dc-dropdown--no-margin .dc-dropdown__display {
  margin: 0; }

.dc-dropdown__select-arrow {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-rendering: optimizeLegibility;
  position: absolute;
  pointer-events: none;
  top: calc(50% - 7px);
  right: 12px;
  transition: transform 0.2s ease;
  transform: rotate(0deg);
  transform-origin: 50% 45%;
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.75; }

.dc-dropdown__select-arrow:before {
  content: '\002303';
  display: block;
  height: 0.53em; }

.dc-dropdown__select-arrow--up {
  transform: rotate(-180deg); }

.dc-dropdown:active, .dc-dropdown:focus, .dc-dropdown--show {
  outline: none;
  border-radius: 4px; }

.dc-dropdown:active .dc-dropdown__select-arrow, .dc-dropdown:focus .dc-dropdown__select-arrow, .dc-dropdown--show .dc-dropdown__select-arrow {
  color: var(--text-general); }

.dc-dropdown__list {
  left: 0;
  bottom: -0.4rem;
  height: 0;
  width: 100%;
  position: absolute;
  transition: transform 0.25s ease, opacity 0.25s linear;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  opacity: 0;
  transform: scale(1, 0);
  z-index: 999; }

.dc-dropdown__list--enter, .dc-dropdown__list--exit {
  transform: scale(1, 0);
  opacity: 0; }

.dc-dropdown__list--enter-done {
  transform: scale(1, 1);
  opacity: 1; }

.dc-dropdown__list--top {
  bottom: unset;
  top: 0.8em; }

.dc-dropdown__list--left {
  top: -0.1em; }

.dc-dropdown__list--left--enter, .dc-dropdown__list--left--exit {
  transform: scale(1, 1) translate3d(2em, 0, 0px);
  opacity: 0; }

.dc-dropdown__list--left--enter-done {
  opacity: 1; }

.dc-dropdown--left .dc-dropdown__display {
  text-align: center; }

.dc-dropdown--left .dc-dropdown__display-text {
  padding-left: unset; }

.dc-dropdown--left .dc-dropdown__display-symbol {
  right: 0;
  float: right;
  position: relative;
  margin-left: auto;
  margin-right: 0.6em; }

.dc-dropdown--left .dc-dropdown__select-arrow {
  left: 0.6em;
  right: unset; }

.dc-dropdown--show .dc-dropdown__display {
  border: 1px solid var(--border-active); }

.dc-dropdown--show > .dc-dropdown__select-arrow {
  transform: rotate(-180deg); }

.dc-dropdown--show > .dc-dropdown__select-arrow--left {
  transform: rotate(-180deg); }

.dc-dropdown--disabled {
  pointer-events: none; }

.dc-dropdown--disabled .dc-dropdown__display {
  border: 1px solid var(--general-disabled); }

.dc-dropdown--disabled .dc-dropdown__display-text {
  color: var(--text-disabled); }

.dc-dropdown-container {
  position: relative;
  margin-top: 8px;
  min-width: 180px;
  width: 100%; }

.dc-dropdown-container .dc-native-select {
  position: absolute;
  top: 0;
  opacity: 0; }

@supports not (-webkit-touch-callout: none) {
  .dc-dropdown-container .dc-native-select {
    width: 100%;
    height: 100%; }
  .dc-dropdown-container .dc-native-select__select {
    width: 100%;
    height: 100%; } }

.dc-dropdown--has-placeholder .dc-dropdown__display {
  height: 4em; }

.dc-dropdown--has-placeholder .dc-dropdown__display .dc-dropdown__display-placeholder-text {
  color: var(--text-less-prominent); }

.dc-dropdown--has-placeholder .dc-dropdown__display--clicked .dc-dropdown__display-placeholder-text {
  color: var(--brand-secondary) !important; }

.dc-dropdown--has-placeholder .dc-dropdown__select-arrow {
  top: 12px;
  right: 16px; }

.dc-list {
  position: absolute;
  width: 100%;
  max-height: 200px;
  overflow-y: auto;
  z-index: 2;
  border-radius: 4px;
  box-shadow: 0 8px 16px 0 var(--shadow-menu);
  background: var(--general-main-2); }

.dc-list--left {
  width: unset; }

.dc-list--left .dc-list__item-text, .dc-list--left .dc-list__item-symbol {
  padding-left: 2.286em;
  padding-right: 2.286em;
  overflow: hidden;
  white-space: nowrap;
  text-align: center; }

.dc-list--large {
  padding-bottom: 1.6rem;
  max-height: 404px; }

.dc-list--large .dc-list__label {
  padding: 1.6rem 0.8rem 0.8rem;
  color: var(--text-prominent);
  height: 4rem; }

.dc-list--large .dc-list__item-text {
  width: calc(100% - 1.6rem);
  padding: 1rem 1.6rem;
  margin: 0 0.8rem; }

.dc-list--large .dc-list__item:hover {
  border-radius: 4px;
  width: calc(100% - 1.6rem);
  margin: 0 0.8rem; }

.dc-list--large .dc-list__item:hover .dc-list__item-text {
  width: 100%;
  margin: 0; }

.dc-list--large .dc-list__separator {
  width: 100%;
  border-bottom: 4px solid var(--general-section-2);
  margin: 1.6rem 0 0; }

.dc-list__label {
  padding: 0.6rem;
  font-size: 1.4rem;
  font-weight: bold;
  color: var(--brand-red-coral);
  height: 3.6rem;
  display: flex;
  align-items: center;
  justify-content: center; }

.dc-list__item {
  width: 100%;
  cursor: pointer; }

.dc-list__item-text, .dc-list__item-symbol {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  line-height: 1.43;
  color: var(--text-general);
  display: flex;
  width: 100%;
  justify-content: center;
  pointer-events: none;
  vertical-align: middle;
  padding: 0.6rem 1.6rem; }

.dc-list__item-text--left {
  justify-content: flex-start;
  padding-left: 1em; }

.dc-list__item:not(.dc-list__item--disabled):not(.dc-list__item--selected):hover {
  background-color: var(--state-hover);
  color: var(--text-general); }

.dc-list__item--selected .dc-list__item-text, .dc-list__item--selected .dc-list__item-symbol, .dc-list__item--selected .dc-list__item-tooltip {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  line-height: 1.43;
  color: var(--text-prominent);
  background: var(--state-active);
  border-radius: 4px; }

.dc-list__item--highlighted:not(.dc-list__item--disabled) {
  background-color: var(--state-hover);
  color: var(--text-general); }

.dc-list__item--disabled {
  color: var(--text-disabled);
  opacity: 0.3;
  cursor: default; }

.dc-list__item-symbol {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  width: 100%;
  padding: 0.6rem 0;
  margin: 0;
  text-align: center;
  justify-content: center;
  display: flex;
  color: var(--text-general); }

.dc-list__separator {
  display: flex;
  width: calc(100% - 3.2rem);
  border-bottom: 1px solid var(--border-normal);
  margin: 1.6rem; }

@media not all and (min-resolution: 0.001dpcm) {
  @supports (-webkit-appearance: none) {
    .dc-list > div:nth-child(1) > div:nth-child(1) {
      overflow-y: scroll !important;
      overflow-x: hidden !important; }
    .dc-list > div:nth-child(1) > div:nth-child(1)::-webkit-scrollbar {
      -webkit-appearance: none; }
    .dc-list > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) {
      padding-bottom: 11.5em !important; } } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-icon {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1); }

.dc-icon--disabled {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled); }

.dc-icon--active {
  --fill-color1: #fff;
  --fill-color2: #fff; }

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #fff; }

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #fff; }

.dc-icon--secondary {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #fff; }

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #fff; }

.dc-accordion__wrapper > div:last-child {
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  border-bottom-width: 1px; }

.dc-accordion__item {
  border: 1px solid var(--general-section-1);
  border-bottom-width: 0;
  color: var(--text-general);
  font-size: 1.4rem; }

.dc-accordion__item--first {
  border-top-right-radius: 4px;
  border-top-left-radius: 4px; }

.dc-accordion__item--open .dc-accordion__item-header {
  border-bottom: 1px solid var(--general-section-1); }

.dc-accordion__item--open .dc-accordion__item-content {
  display: block; }

.dc-accordion__item--close .dc-accordion__item-content {
  display: none; }

.dc-accordion__item-header {
  cursor: pointer;
  line-height: 1.43;
  padding: 8px 16px; }

.dc-accordion__item-header-icon {
  vertical-align: middle; }

.dc-accordion__item-header-icon-wrapper {
  float: right;
  padding-left: 16px; }

.dc-accordion__item-header-icon path, .dc-accordion__item-header-icon rect {
  fill: var(--text-general); }

.dc-accordion__item-content {
  padding: 16px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.barspinner {
  margin: auto;
  width: 6em;
  height: 2em;
  white-space: nowrap; }

.barspinner__rect {
  margin: 0.4em;
  border-radius: 20px;
  height: 60%;
  width: 0.6em;
  display: inline-block;
  -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
          animation: sk-stretchdelay 1.2s infinite ease-in-out; }

.barspinner__rect--1 {
  -webkit-animation-delay: -1.2s;
          animation-delay: -1.2s; }

.barspinner__rect--2 {
  -webkit-animation-delay: -1.1s;
          animation-delay: -1.1s; }

.barspinner__rect--3 {
  -webkit-animation-delay: -1s;
          animation-delay: -1s; }

.barspinner__rect--4 {
  -webkit-animation-delay: -.9s;
          animation-delay: -.9s; }

.barspinner__rect--5 {
  -webkit-animation-delay: -.8s;
          animation-delay: -.8s; }

.barspinner--dark .barspinner__rect {
  background-color: var(--brand-secondary); }

@-webkit-keyframes sk-stretchdelay {
  0%, 40%, 100% {
    transform: scaleY(1); }
  20% {
    transform: scaleY(2); } }

@keyframes sk-stretchdelay {
  0%, 40%, 100% {
    transform: scaleY(1); }
  20% {
    transform: scaleY(2); } }

.initial-loader {
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  display: flex;
  background: transparent; }

.initial-loader--fullscreen {
  width: 100vw;
  height: 100vh; }

.initial-loader__barspinner {
  margin: 5em auto; }

.initial-loader__barspinner--rect {
  background-color: var(--brand-secondary); }

.initial-loader__text {
  line-height: 44px;
  color: var(--text-prominent);
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5; }

.dc-icon {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1); }

.dc-icon--disabled {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled); }

.dc-icon--active {
  --fill-color1: #fff;
  --fill-color2: #fff; }

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #fff; }

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #fff; }

.dc-icon--secondary {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #fff; }

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #fff; }

.dc-button-menu {
  display: flex;
  justify-content: center;
  width: 100%;
  position: relative; }

.dc-button-menu__button:first-child {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px; }

.dc-button-menu__button:last-child {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px; }

.dc-button-menu__button {
  margin: 0;
  border: none;
  border-radius: 0px;
  width: 50%;
  background-color: var(--state-normal); }

.dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
  background-color: var(--state-hover) !important; }

.dc-button-menu__button span {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: unset;
  text-align: left;
  line-height: 1.5;
  color: var(--text-general); }

.dc-button-menu__button--active {
  cursor: auto;
  cursor: initial;
  background-color: var(--state-active) !important; }

.dc-button-menu__button--active span {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: unset;
  text-align: left;
  line-height: 1.5;
  color: var(--text-prominent); }

.dc-button-menu__wrapper {
  position: relative;
  border-radius: 4px;
  width: 100%;
  background-color: var(--state-normal);
  display: flex; }

.dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
  background-color: rgba(0, 0, 0, 0) !important;
  z-index: 1; }

.dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px; }

.dc-button-menu--highlight {
  display: block;
  position: absolute;
  content: '';
  height: 100%;
  top: 0;
  left: 0;
  z-index: 0;
  transition: transform 0.25s ease;
  pointer-events: none;
  background-color: var(--state-active) !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-progress-indicator {
  position: relative; }

.dc-progress-indicator__container {
  height: 0.4rem;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  position: relative;
  overflow: hidden; }

.dc-progress-indicator__bar {
  z-index: 2;
  background-color: var(--status-success);
  height: 100%;
  position: absolute;
  left: 0; }

.dc-progress-indicator__empty {
  z-index: 1;
  background-color: var(--general-section-1);
  width: 100%;
  height: 100%;
  position: absolute; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-themed-scrollbars__track--horizontal {
  height: 6px;
  right: 2px;
  bottom: 2px;
  left: 2px;
  border-radius: 3px; }

.dc-themed-scrollbars__track--vertical {
  width: 6px;
  right: 2px;
  bottom: 2px;
  top: 2px;
  border-radius: 3px; }

.dc-themed-scrollbars__thumb--horizontal {
  border-radius: inherit;
  background-color: var(--state-active); }

.dc-themed-scrollbars__thumb--vertical {
  border-radius: inherit;
  background-color: var(--state-active); }

.dc-table {
  color: var(--text-general);
  background: inherit; }

.dc-table__row {
  display: grid;
  height: 100%; }

.dc-table__row--hover:hover {
  background-color: var(--general-section-1);
  cursor: pointer; }

.dc-table__header {
  border-bottom: 2px solid var(--general-section-1);
  height: 52px; }

.dc-table__cell, .dc-table__head {
  font-size: 1.4rem;
  line-height: 1.43;
  display: flex;
  align-items: center;
  white-space: unset;
  text-align: left;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  word-wrap: break-word;
  word-break: break-word;
  word-wrap: break-word; }

.dc-table__cell {
  border-bottom: 1px solid var(--general-section-1); }

.dc-table__cell--right {
  display: flex;
  justify-content: flex-end; }

.dc-table__cell--fixed {
  position: -webkit-sticky;
  position: sticky;
  left: 0;
  z-index: 2; }

.dc-table__head {
  font-weight: bold; }

.dc-table__head--right {
  display: flex;
  justify-content: flex-end; }

.dc-table--scroll .dc-table__header {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 3; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-page-overlay-portal {
  position: absolute;
  height: 100%;
  width: 100%;
  top: 48px;
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  background-color: var(--general-main-2); }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay-portal {
    top: 40px; } }

.dc-page-overlay--enter, .dc-page-overlay--exit {
  transform: translateY(50px);
  opacity: 0;
  pointer-events: none; }

.dc-page-overlay--enter-done {
  transform: translateY(0);
  opacity: 1;
  pointer-events: auto; }

.dc-page-overlay__header {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 2;
  background-color: var(--general-main-1);
  padding: 0.8rem 2.4rem;
  border-bottom: 1px solid var(--general-section-1); }

.dc-page-overlay__header-title {
  flex: 1;
  text-align: center;
  font-size: var(--text-size-m);
  color: var(--text-prominent);
  font-weight: bold;
  line-height: 1.5; }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay__header-title {
    font-size: 1.6rem; } }

.dc-page-overlay__header-close {
  cursor: pointer;
  height: 16px;
  position: absolute;
  right: 0; }

.dc-page-overlay__header-close .dc-icon {
  --fill-color1: var(--text-prominent); }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay__header-close {
    right: 1.2rem; } }

.dc-page-overlay__header-wrapper {
  width: 100%;
  display: flex;
  align-items: center; }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay__header-wrapper {
    height: 100%;
    padding: 0; } }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay__header {
    height: 4rem;
    z-index: 3;
    padding: 0;
    margin: 0; } }

.dc-page-overlay__content {
  padding: 2.4rem 0 0;
  display: flex;
  background-color: var(--general-main-1); }

.dc-page-overlay__content-side-note {
  min-width: 256px;
  margin-left: 2.4rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay__content {
    flex: 1;
    padding: 0; } }

.dc-page-overlay__header-wrapper, .dc-page-overlay__content {
  max-width: 1232px;
  margin: auto;
  position: relative; }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay__header-wrapper, .dc-page-overlay__content {
    width: 100%; } }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay {
    display: flex;
    flex-direction: column;
    height: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.cashier__transferred-icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .cashier__transferred-icon .color1-fill {
    fill: var(--text-general); }
  .cashier__transferred-icon .color1-stroke {
    stroke: var(--text-general); }
  .cashier__transferred-icon .color2-fill {
    fill: none; }
  .cashier__transferred-icon .color2-stroke {
    stroke: none; }
  .active.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .active.cashier__transferred-icon .color1-fill {
      fill: var(--text-prominent); }
    .active.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-prominent); }
    .active.cashier__transferred-icon .color2-fill {
      fill: none; }
    .active.cashier__transferred-icon .color2-stroke {
      stroke: none; }
  .disabled.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .disabled.cashier__transferred-icon .color1-fill {
      fill: var(--text-disabled); }
    .disabled.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-disabled); }
    .disabled.cashier__transferred-icon .color2-fill {
      fill: none; }
    .disabled.cashier__transferred-icon .color2-stroke {
      stroke: none; }
  .white.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .white.cashier__transferred-icon .color1-fill {
      fill: var(--text-prominent); }
    .white.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-prominent); }
  .border_hover_color.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .border_hover_color.cashier__transferred-icon .color1-fill {
      fill: var(--text-prominent); }
    .border_hover_color.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-prominent); }
  .secondary.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .secondary.cashier__transferred-icon .color1-fill {
      fill: var(--text-less-prominent); }
    .secondary.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-less-prominent); }

/**
 * Define Breakpoints here.
 */
/** @define cashier; weak */
.cashier {
  /** @define cashier-error */ }
  .cashier__counter {
    position: absolute;
    top: 0.4rem;
    right: -1.5rem; }
  .cashier__content {
    width: 100%;
    background: var(--status-default); }
    .cashier__content-header {
      text-align: center;
      margin-bottom: 3.2rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .cashier__content-header {
          padding-top: 1.6rem;
          margin-bottom: 0; } }
  .cashier__wrapper {
    text-align: center; }
    .cashier__wrapper, .cashier__wrapper--align-left {
      color: var(--text-general);
      width: 100%;
      height: 100%;
      line-height: 1.43; }
      .cashier__wrapper .inline-icon .color1-fill, .cashier__wrapper--align-left .inline-icon .color1-fill {
        fill: var(--text-general); }
      @media (min-width: 320px) and (max-width: 767px) {
        .cashier__wrapper, .cashier__wrapper--align-left {
          height: inherit; } }
    .cashier__wrapper--align-left {
      text-align: left; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__wrapper--is-mobile {
        width: 100vw;
        margin-top: 4rem; }
        .cashier__wrapper--is-mobile .dc-collapsible {
          position: relative;
          background-color: var(--general-section-1);
          margin-bottom: 0.8rem;
          transform: none;
          width: 100%;
          z-index: 1; }
        .cashier__wrapper--is-mobile .cashier__wrapper {
          width: calc(100% - 3.2rem);
          margin: 0 1.6rem; }
          .cashier__wrapper--is-mobile .cashier__wrapper-error {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            flex-direction: column;
            padding-top: 2.4rem; }
        .cashier__wrapper--is-mobile .barspinner {
          margin-top: 6rem; } }
  .cashier__loader {
    font-size: 1rem; }
    .cashier__loader-wrapper {
      display: flex;
      height: 100%; }
      @media (min-width: 320px) and (max-width: 767px) {
        .cashier__loader-wrapper {
          height: auto;
          height: initial; } }
  .cashier__header {
    font-size: 1.6rem;
    line-height: 1.5;
    font-weight: bold;
    color: var(--text-prominent); }
    .cashier__header:not(.cashier__content-header) {
      margin-bottom: 1.6rem;
      margin-top: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__header {
        font-size: 1.4rem; } }
  .cashier__form-submit {
    display: flex;
    justify-content: flex-end;
    width: 100%; }
  .cashier__form-error {
    flex: 1;
    margin: 2rem 5.6rem 4.4rem 0;
    font-size: 1.2rem;
    font-weight: 500;
    line-height: 1.33; }
    .cashier__form-error-icon {
      position: absolute;
      left: -10px;
      bottom: -15px;
      pointer-events: none;
      opacity: 0.07;
      z-index: 0; }
    .cashier__form-error-small-icon {
      margin: 2rem 1.6rem 4.4rem 2.4rem; }
    .cashier__form-error-wrapper {
      display: flex;
      margin-right: auto; }
      .cashier__form-error-wrapper .cashier__form-error,
      .cashier__form-error-wrapper .cashier__form-error-small-icon {
        margin-top: 5.8rem;
        margin-bottom: 0; }
      .cashier__form-error-wrapper .cashier__form-error-small-icon {
        margin-left: 0.8rem; }
      .cashier__form-error-wrapper .cashier__form-error-icon {
        bottom: 21rem; }
  .cashier__form-submit-button {
    margin: 3.2rem 0 2.4rem 2.4rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .cashier__form-submit {
      margin: 0;
      flex-flow: column;
      height: unset;
      margin-bottom: 1.6rem; }
      .cashier__form-submit--align-end {
        align-items: flex-end; }
        .cashier__form-submit--align-end .cashier__form-submit-button {
          width: unset; }
    .cashier__form-submit-button {
      margin: 0;
      width: 100%; }
    .cashier__form-error-container {
      display: flex;
      align-items: center;
      margin-bottom: 0.8rem; }
    .cashier__form-error {
      margin: 0; }
      .cashier__form-error-small-icon {
        margin: 0;
        margin-right: 0.8rem; } }
  .cashier__input {
    display: inline-block !important;
    margin-bottom: 0 !important; }
    .cashier__input--short {
      width: 29rem; }
    .cashier__input--long {
      width: 100%; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__input {
        margin-bottom: 3.2rem !important; } }
  .cashier__drop-down {
    display: inline-block;
    min-width: 20.3rem;
    min-height: 4rem;
    margin: 0 0 16px;
    line-height: 1.43; }
    .cashier__drop-down-wrapper {
      display: flex; }
      .cashier__drop-down-wrapper .dc-select-native__placeholder {
        background-color: var(--general-main-1); }
      @media (min-width: 320px) and (max-width: 767px) {
        .cashier__drop-down-wrapper {
          flex-direction: column; } }
    .cashier__drop-down-display {
      justify-content: left;
      min-height: 4rem;
      min-width: 20.3rem;
      height: auto; }
      .cashier__drop-down-display-span {
        font-size: 1.4rem;
        text-align: left;
        padding: 9px 36px 9px 12px;
        text-transform: none;
        line-height: 1.43;
        display: flex;
        align-items: center; }
      .cashier__drop-down-display .cashier__drop-down-display-brackets:before {
        content: '('; }
      .cashier__drop-down-display .cashier__drop-down-display-brackets:after {
        content: ')'; }
      @media (min-width: 320px) and (max-width: 767px) {
        .cashier__drop-down-display {
          min-height: auto;
          min-width: auto; } }
    .cashier__drop-down-items, .cashier__drop-down-label {
      justify-content: left; }
    .cashier__drop-down-label {
      margin: 0 1.6rem; }
  .cashier__transferred-amount {
    color: var(--text-profit-success);
    font-size: 3.2rem;
    font-weight: bold;
    line-height: 1.25;
    margin-top: 2.4rem;
    margin-bottom: 2.8rem; }
  .cashier__transferred-details {
    margin-left: 8px;
    margin-right: 8px;
    vertical-align: super;
    font-size: 1.4rem;
    text-align: left;
    line-height: 1.43;
    max-width: 20rem;
    display: flex;
    flex-direction: column; }
    .cashier__transferred-details-wrapper {
      display: flex;
      justify-content: center;
      align-items: center; }
  .cashier__transferred-icon {
    transform: scale(-1, 1);
    vertical-align: middle;
    margin: 0 1.6rem; }
  .cashier__paragraph {
    font-size: 1.4rem;
    align-self: center;
    line-height: 1.43; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__paragraph {
        padding-left: 1.6rem;
        padding-right: 0.8rem; }
        .cashier__paragraph:first-child {
          margin-top: 2.4rem; } }
  .cashier__text {
    font-size: 1.4rem;
    line-height: 1.43;
    max-width: 70%;
    margin-left: auto;
    margin-right: auto; }
    .cashier__text--bold {
      font-weight: bold; }
    .cashier__text--right {
      text-align: right; }
    .cashier__text--faint {
      color: var(--text-less-prominent); }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__text {
        max-width: 100%;
        margin: 0;
        padding: 0;
        text-align: left; } }
  .cashier__tab-header-note {
    color: var(--text-general);
    font-size: 1.2rem;
    line-height: 1.5;
    max-width: 256px; }
  .cashier__modal-tab {
    min-width: 24rem; }
  .cashier__success {
    text-align: center;
    background-color: var(--general-main-1);
    padding: 2.4rem;
    width: 50.4rem;
    margin: 0 auto 3.2rem; }
  .cashier__done-button {
    width: 15.6rem;
    margin-left: 0.8rem; }
  .cashier__no-balance-icon {
    margin-bottom: 1.6rem; }
  .cashier__no-balance-button {
    margin: 3.2rem auto; }
  @media (min-width: 320px) and (max-width: 767px) {
    .cashier__no-balance {
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: center; }
      .cashier__no-balance-button {
        width: calc(100% - 3.2rem); }
      .cashier__no-balance-icon {
        margin-top: 3.2rem; } }
  .cashier__account-switch-icon {
    background-image: url(/br_bug-deriv-update/public/images/app/cashier/account_switcher.png);
    width: 400px;
    height: 360px;
    background-repeat: no-repeat;
    background-size: 100%;
    margin: 2.4rem auto; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__account-switch-icon {
        width: 100%;
        margin: 2.4rem 0 0;
        height: 320px; } }
  .cashier__virtual-header {
    margin-top: 0;
    margin-bottom: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__virtual-header {
        padding-top: 2.4rem; } }
  .cashier-error__icon {
    width: 6.4rem;
    height: 6.4rem;
    margin-bottom: 1.6rem; }
  .cashier-error__header {
    color: var(--text-loss-danger);
    font-weight: bold;
    font-size: 1.6rem;
    line-height: 1.5;
    margin-bottom: 0.8rem; }
  .cashier-error__button {
    margin: 3.2rem auto 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier-error__button {
        width: calc(100% - 3.2rem); } }
  .cashier-error__footer {
    font-size: 1.2rem; }

/** @define cashier-page-wrapper */
@media (min-width: 320px) and (max-width: 767px) {
  .cashier-page-wrapper {
    /* postcss-bem-linter: ignore */ }
    .cashier-page-wrapper .dc-page-overlay__header {
      position: fixed;
      top: 4rem;
      width: 100%;
      height: 4rem; } }

/** @define withdraw */
.withdraw__header {
  font-weight: bold;
  margin-bottom: 8px;
  font-size: 1.6rem;
  line-height: 1.5; }

.withdraw__header, .withdraw__text {
  color: var(--text-general); }

.withdraw__text {
  font-size: 1.4rem; }

.withdraw__verify-button {
  margin: 3.2rem auto; }
  @media (min-width: 320px) and (max-width: 767px) {
    .withdraw__verify-button {
      width: 100%; } }

.withdraw__icon {
  margin-top: 8rem;
  margin-bottom: 1.6rem; }

.withdraw__resend-button {
  margin: 4rem auto 0; }
  @media (min-width: 320px) and (max-width: 767px) {
    .withdraw__resend-button {
      width: 100%; } }

.withdraw__email-sent {
  max-width: 40rem;
  width: 100%;
  margin: auto; }
  .withdraw__email-sent-title {
    color: var(--text-general);
    font-size: 1.6rem;
    font-weight: bold;
    margin-bottom: 0.8rem;
    line-height: 1.5; }
    .withdraw__email-sent-title-sub {
      font-size: 1.4rem; }
  .withdraw__email-sent-text {
    color: var(--text-general); }
  @media (min-width: 320px) and (max-width: 767px) {
    .withdraw__email-sent {
      width: 100%;
      padding: 1.6rem; } }

.withdraw__email-resend-text, .withdraw__email-sent-text {
  font-size: 1.4rem;
  line-height: 1.43; }

.withdraw__email-resend {
  margin-top: 4rem; }
  .withdraw__email-resend-text {
    color: var(--brand-red-coral);
    font-weight: bold;
    text-decoration: none;
    cursor: pointer; }
  @media (min-width: 320px) and (max-width: 767px) {
    .withdraw__email-resend {
      margin-top: 1.6rem; } }

/** @define payment-agent; weak */
.payment-agent__instructions {
  margin-top: 2.4rem;
  display: flex; }
  .payment-agent__instructions-section {
    border: 1px solid var(--border-normal);
    flex: 1;
    padding: 1.6rem;
    border-radius: 4px; }
    .payment-agent__instructions-section .payment-agent__header {
      margin-bottom: 8px;
      text-align: center; }
      @media (min-width: 320px) and (max-width: 767px) {
        .payment-agent__instructions-section .payment-agent__header {
          margin-top: 0; } }
    @media (min-width: 1024px) {
      .payment-agent__instructions-section:not(:first-child) {
        margin-left: 24px;
        margin-left: 1.6rem; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent__instructions-section {
        display: flex;
        /* postcss-bem-linter: ignore */
        /* postcss-bem-linter: ignore */ }
        .payment-agent__instructions-section:first-child {
          flex-direction: column;
          align-items: flex-start; }
        .payment-agent__instructions-section:last-child {
          flex-direction: row;
          justify-content: center;
          align-items: center; }
          .payment-agent__instructions-section:last-child h2 {
            margin: 0; }
          .payment-agent__instructions-section:last-child .dc-btn {
            margin: 0 0 0 auto;
            padding: 0.3rem 0.8rem;
            height: 3rem;
            /* iPhone SE screen height fixes due to UI space restrictions */ }
            .payment-agent__instructions-section:last-child .dc-btn__text {
              font-size: 1.2rem; } }
      @media only screen and (min-width: 320px) and (max-width: 767px) and (max-height: 480px) {
        .payment-agent__instructions-section:last-child .dc-btn {
          height: 4.8rem; }
          .payment-agent__instructions-section:last-child .dc-btn__text {
            width: 14rem;
            white-space: normal; } }
    @media (min-width: 320px) and (max-width: 767px) {
        .payment-agent__instructions-section .cashier__paragraph {
          padding-left: 0; } }
  .payment-agent__instructions-button {
    display: block;
    margin: auto; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent__instructions {
      display: grid;
      margin: 1.6rem;
      grid-template-columns: 1fr;
      grid-gap: 0.8rem; } }

.payment-agent__list-header {
  margin-top: 32px;
  font-size: 1.4rem;
  line-height: 1.43; }

.payment-agent__list-selector {
  margin-bottom: 8px;
  display: flex;
  justify-content: flex-end;
  margin-right: 1px; }

.payment-agent__list-line {
  border-bottom: 1px solid var(--general-section-1);
  position: relative;
  width: 80%;
  margin-left: 20%;
  top: -25px; }

@media (min-width: 320px) and (max-width: 767px) {
  .payment-agent__list-header {
    padding-left: 1.6rem;
    position: relative;
    z-index: 1; }
  .payment-agent__list-selector {
    margin: 0.8rem 1.6rem 3.2rem;
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .payment-agent__list-selector .dc-input {
      max-width: 18rem;
      margin-left: auto; }
    .payment-agent__list-selector .dc-select-native__placeholder {
      background-color: var(--general-main-1); } }

.payment-agent__drop-down {
  margin-left: 8px;
  width: auto;
  margin-bottom: 0 !important; }

.payment-agent__filter {
  min-width: 22.8rem;
  margin-top: 0; }
  .payment-agent__filter-display {
    min-height: 3.2rem;
    min-width: 22.8rem; }

.payment-agent__accordion-content-line {
  margin-bottom: 8px; }
  .payment-agent__accordion-content-line:first-child .payment-agent__contact {
    color: var(--text-prominent); }
  .payment-agent__accordion-content-line:last-child {
    margin-bottom: 0; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent__accordion-content-line {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis; }
      .payment-agent__accordion-content-line:not(:first-child) {
        color: var(--brand-red-coral); } }

.payment-agent__accordion-content-icon {
  vertical-align: middle;
  margin-right: 12px;
  /* postcss-bem-linter: ignore */
  --fill-color1: var(--text-general); }

.payment-agent__disclaimer {
  background-color: var(--general-section-1);
  margin-top: 2.4rem;
  padding: 1.6rem;
  font-size: 1.2rem;
  line-height: 1.5; }

.payment-agent__radio {
  display: none; }
  .payment-agent__radio-group {
    display: block;
    margin-bottom: 3.9rem; }
  .payment-agent__radio-wrapper {
    display: flex;
    margin-bottom: 2rem;
    width: -webkit-fit-content;
    width: -moz-fit-content;
    width: fit-content; }
  .payment-agent__radio-circle {
    border: 2px solid var(--text-general);
    border-radius: 50%;
    box-shadow: 0 0 1px 0 #ffffff;
    width: 16px;
    height: 16px;
    transition: all 0.3s ease-in-out;
    margin-right: 8px;
    align-self: center;
    display: inline-flex; }
    .payment-agent__radio-circle--selected {
      border-width: 4px;
      border-color: var(--brand-red-coral); }

.payment-agent__transferred-contact {
  margin-top: 1.6rem;
  margin-bottom: 0.8rem; }
  .payment-agent__transferred-contact-wrapper {
    margin: 3.2rem; }

.payment-agent__contact {
  text-decoration: none;
  color: var(--brand-red-coral);
  font-weight: bold; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent__contact {
      padding-left: 0; } }

.payment-agent__explanation {
  margin-top: -0.8rem; }

.payment-agent__input {
  width: 12.6rem !important;
  margin-left: 8px;
  display: inline-block !important;
  margin-bottom: 0 !important; }
  .payment-agent__input-field {
    text-align: left;
    font-size: 1.4rem;
    padding: 10px 12px !important;
    height: 4rem; }
  .payment-agent__input-error {
    white-space: nowrap; }

.payment-agent__paragraph {
  align-self: flex-start; }

@media (min-width: 320px) and (max-width: 767px) {
  .payment-agent__accordion {
    margin: 0 1.6rem; }
    .payment-agent__accordion .dc-accordion__item {
      font-size: 1.2rem;
      position: relative;
      -webkit-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none;
      -webkit-touch-callout: none;
      -webkit-tap-highlight-color: transparent; }
      .payment-agent__accordion .dc-accordion__item-header {
        max-width: calc(100% - 3.2rem);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        padding-right: 0; }
        .payment-agent__accordion .dc-accordion__item-header-icon-wrapper {
          top: 0;
          right: 0;
          width: 36px;
          height: 3.4rem;
          padding-left: 0;
          float: unset;
          display: flex;
          position: absolute;
          align-items: center;
          justify-content: center;
          border-bottom: 1px solid var(--general-section-1); }
  .payment-agent__receipt {
    margin: 0 1.6rem;
    width: calc(100% - 3.2rem);
    padding-top: 2.4rem; }
    .payment-agent__receipt .cashier__header {
      font-size: 1.6rem; }
    .payment-agent__receipt .cashier__done-button {
      width: 100%; }
    .payment-agent__receipt .cashier__form-submit-button {
      margin: 0; }
    .payment-agent__receipt .cashier__form-submit {
      margin: 2.4rem 0 1.6rem;
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-gap: 0.8rem; }
    .payment-agent__receipt .cashier__transferred-amount {
      margin-bottom: 0; }
    .payment-agent__receipt .cashier__transferred-details-wrapper {
      display: none; }
    .payment-agent__receipt .cashier__success {
      width: 100%;
      margin: 0 auto 3.2rem;
      background-color: var(--general-main-1); }
    .payment-agent__receipt .payment-agent__explanation {
      padding-left: 0; }
    .payment-agent__receipt .payment-agent__transferred-contact-wrapper {
      margin: 0.8rem; }
    .payment-agent__receipt .payment-agent__transferred-contact .payment-agent__contact {
      padding-left: 0; }
    .payment-agent__receipt .payment-agent__paragraph {
      padding-left: 0; }
  .payment-agent__withdrawal {
    display: flex;
    justify-content: flex-start;
    flex-direction: column;
    align-items: center; }
    .payment-agent__withdrawal form {
      width: calc(100% - 3.2rem); }
    .payment-agent__withdrawal-wrapper {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center; }
    .payment-agent__withdrawal .payment-agent__radio-wrapper {
      width: 100%;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-start;
      position: relative; }
      .payment-agent__withdrawal .payment-agent__radio-wrapper:first-child {
        margin-top: 2.4rem; }
      .payment-agent__withdrawal .payment-agent__radio-wrapper .dc-input {
        width: 100% !important;
        margin-left: 0;
        margin-top: 3.2rem; }
    .payment-agent__withdrawal .payment-agent__radio-circle {
      width: 21px;
      height: 21px;
      position: absolute;
      left: 1.6rem; }
    .payment-agent__withdrawal .payment-agent__radio-label {
      position: absolute;
      left: 3.2rem; }
    .payment-agent__withdrawal .cashier__header {
      margin: 2.4rem 0 1.6rem; }
    .payment-agent__withdrawal .cashier__input {
      width: 100%; }
    .payment-agent__withdrawal .cashier__form-submit-button {
      max-width: 18rem;
      margin-left: auto; }
    .payment-agent__withdrawal .dc-select-native__placeholder {
      background-color: var(--general-main-1); } }

/** @define account-transfer; weak */
.account-transfer__notes {
  color: var(--text-general);
  padding: 1.6rem 0;
  font-size: var(--text-size-xs);
  line-height: 1.5; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer__notes {
      font-size: var(--text-size-xxs); } }

.account-transfer__bullet {
  background-color: var(--text-general);
  border-radius: 100%;
  margin-right: 0.8rem;
  width: 0.4rem;
  height: 0.4rem;
  flex: none;
  margin-top: 0.8rem; }
  .account-transfer__bullet-wrapper {
    display: flex;
    margin-bottom: 0.8rem; }

.account-transfer__drop-down {
  min-width: calc(calc(100% - calc(16px + 3.2rem)) / 2);
  width: auto;
  margin-bottom: 1.7rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer__drop-down {
      width: 100%;
      margin-bottom: 2.4rem; } }

.account-transfer__input {
  margin-bottom: -0.8rem !important; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer__input {
      margin-bottom: 2.6rem !important; } }

.account-transfer__currency, .account-transfer__balance {
  line-height: 1.43; }

.account-transfer__currency {
  margin: 0 0.4rem; }
  .account-transfer__currency-icon {
    align-self: center; }

.account-transfer__balance {
  margin-left: auto; }

.account-transfer__transfer-icon {
  vertical-align: baseline;
  vertical-align: initial;
  margin: 1rem 1.6rem 0; }

.account-transfer__transfer-details-from, .account-transfer__transfer-details-to {
  display: flex;
  align-items: center; }

.account-transfer__transfer-from {
  margin-bottom: 3.5rem;
  margin-top: 2.5rem; }

.account-transfer__transfer-to {
  margin-bottom: 1.7rem; }

.account-transfer__button {
  margin: 4rem auto 0 0.8rem; }
  .account-transfer__button-statement {
    margin-right: 0.8rem; }

.account-transfer__native-select {
  margin-bottom: 2.4rem; }

.account-transfer__receipt .cashier__text--bold {
  color: var(--text-prominent); }

.account-transfer__receipt .cashier__transferred-amount {
  color: var(--text-profit-success); }

@media (min-width: 320px) and (max-width: 767px) {
  .account-transfer__transfer-details-from {
    flex-flow: column-reverse; }
  .account-transfer__transfer-details-to {
    flex-flow: column; }
    .account-transfer__transfer-details-to .cashier__transferred-details {
      text-align: center; }
  .account-transfer__receipt .cashier__header {
    padding-top: 1.6rem;
    margin-top: 0; }
  .account-transfer__receipt .cashier__transferred-details {
    margin-top: 0.8rem; }
  .account-transfer__receipt .cashier__transferred-amount {
    margin-bottom: 1.6rem;
    margin-top: 0; }
  .account-transfer__receipt .cashier__text--right {
    text-align: center; }
  .account-transfer__form-submit {
    display: flex;
    flex-flow: row;
    justify-content: center; }
    .account-transfer__form-submit .account-transfer__button {
      margin: 1.6rem 0.4rem 0; } }
    @media only screen and (min-width: 320px) and (max-width: 767px) and (max-width: 340px) {
      .account-transfer__form-submit .account-transfer__button .dc-btn__text {
        font-size: 1.2rem; } }

/* stylelint-disable plugin/selector-bem-pattern */
/** @define payment-agent-transfer */
div.payment-agent-transfer__header {
  margin-bottom: 2.8rem; }

div.payment-agent-transfer__input {
  margin-bottom: 3.1rem; }
  div.payment-agent-transfer__input-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-gap: 1.6rem; }

div.payment-agent-transfer__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-from {
  flex-direction: row-reverse; }
  div.payment-agent-transfer__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-from > .cashier__transferred-details {
    text-align: right; }

div.payment-agent-transfer__wrapper .cashier__transferred-details-wrapper .dc-icon {
  width: 3.2rem;
  height: 3.2rem; }

div.payment-agent-transfer__wrapper .cashier__form-submit {
  flex-flow: row;
  justify-content: center; }
  div.payment-agent-transfer__wrapper .cashier__form-submit-button {
    margin: 0;
    width: 100%;
    max-width: 18rem; }
    div.payment-agent-transfer__wrapper .cashier__form-submit-button:first-child {
      margin-right: 0.4rem; }
    div.payment-agent-transfer__wrapper .cashier__form-submit-button:last-child {
      margin-left: 0.4rem; }

div.payment-agent-transfer__wrapper .cashier__transferred-icon {
  width: 1.6rem !important;
  height: 1.6rem !important; }

div.payment-agent-transfer__wrapper .cashier__success {
  margin-bottom: 0.8rem; }

@media (min-width: 320px) and (max-width: 767px) {
  div.payment-agent-transfer__wrapper {
    padding-top: 1.6rem; }
    div.payment-agent-transfer__wrapper .cashier__header {
      margin-top: 0.4rem; }
    div.payment-agent-transfer__wrapper .cashier__form-submit-button {
      max-width: 100%; }
    div.payment-agent-transfer__wrapper .cashier__success {
      width: 100%;
      background-color: var(--general-main-1);
      padding: 0.4rem 0.4rem 0.8rem;
      margin-bottom: 1.6rem; }
    div.payment-agent-transfer__wrapper .cashier__transferred-details {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      max-width: 100%;
      padding: 0;
      margin: 0.8rem 0 0; }
      div.payment-agent-transfer__wrapper .cashier__transferred-details-wrapper .cashier__text--bold {
        color: var(--text-prominent); }
      div.payment-agent-transfer__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-from {
        flex-direction: column;
        padding-right: 1.6rem; }
      div.payment-agent-transfer__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-to {
        flex-direction: column;
        padding-left: 1.6rem; }
        div.payment-agent-transfer__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-to > .cashier__transferred-details {
          align-items: flex-start; }
    div.payment-agent-transfer__wrapper .cashier__transferred-icon {
      margin: 0; }
  div.payment-agent-transfer__container {
    width: calc(100% - 3.2rem);
    margin: 0 1.6rem;
    padding-top: 2.4rem; }
    div.payment-agent-transfer__container .dc-input__field[type='textarea'] {
      height: 11.9rem; }
  div.payment-agent-transfer__input-container {
    grid-template-columns: 1fr; }
  div.payment-agent-transfer__input:not(:first-child) {
    margin-left: unset;
    margin-bottom: 5.3rem; } }

/* stylelint-enable plugin/selector-bem-pattern */

