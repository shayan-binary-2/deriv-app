(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~account~cashier"],{

/***/ "../../components/lib/button-link.css":
/*!******************************************************************!*\
  !*** /var/www/deriv-app/packages/components/lib/button-link.css ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvYnV0dG9uLWxpbmsuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy92YXIvd3d3L2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9idXR0b24tbGluay5jc3M/NjNkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../components/lib/button-link.css\n");

/***/ }),

/***/ "../../components/lib/button-link.js":
/*!*****************************************************************!*\
  !*** /var/www/deriv-app/packages/components/lib/button-link.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! react-router-dom */ \"../node_modules/react-router-dom/esm/react-router-dom.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__21__){return function(_){var e={};function n(t){if(e[t])return e[t].exports;var r=e[t]={i:t,l:!1,exports:{}};return _[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=_,n.c=e,n.d=function(_,e,t){n.o(_,e)||Object.defineProperty(_,e,{enumerable:!0,get:t})},n.r=function(_){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(_,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(_,\"__esModule\",{value:!0})},n.t=function(_,e){if(1&e&&(_=n(_)),8&e)return _;if(4&e&&\"object\"==typeof _&&_&&_.__esModule)return _;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:_}),2&e&&\"string\"!=typeof _)for(var r in _)n.d(t,r,function(e){return _[e]}.bind(null,r));return t},n.n=function(_){var e=_&&_.__esModule?function(){return _.default}:function(){return _};return n.d(e,\"a\",e),e},n.o=function(_,e){return Object.prototype.hasOwnProperty.call(_,e)},n.p=\"\",n(n.s=54)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},21:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__21__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3Qtcm91dGVyLWRvbVwiPzUzYjkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yMV9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///21\\n\")},38:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(21);\\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_router_dom__WEBPACK_IMPORTED_MODULE_3__);\\n\\n\\n\\n\\n\\nvar ButtonLink = function ButtonLink(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      to = _ref.to,\\n      onClick = _ref.onClick;\\n  return react__WEBPACK_IMPORTED_MODULE_2__[\"createElement\"](react_router_dom__WEBPACK_IMPORTED_MODULE_3__[\"Link\"], {\\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()(\\'dc-btn dc-btn--primary dc-btn__medium\\', className, \\'effect\\'),\\n    to: to,\\n    onClick: onClick\\n  }, children);\\n};\\n\\nButtonLink.propTypes = {\\n  children: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,\\n  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  to: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string\\n};\\n/* harmony default export */ __webpack_exports__[\"a\"] = (ButtonLink);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvYnV0dG9uLWxpbmsvYnV0dG9uLWxpbmsuanN4PzA0MWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuY29uc3QgQnV0dG9uTGluayA9ICh7IGNoaWxkcmVuLCBjbGFzc05hbWUsIHRvLCBvbkNsaWNrIH0pID0+IChcbiAgICA8TGlua1xuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLWJ0biBkYy1idG4tLXByaW1hcnkgZGMtYnRuX19tZWRpdW0nLCBjbGFzc05hbWUsICdlZmZlY3QnKX1cbiAgICAgICAgdG89e3RvfVxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgIDwvTGluaz5cbik7XG5cbkJ1dHRvbkxpbmsucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB0bzogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkxpbms7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBSEE7QUFEQTtBQUNBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBT0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///38\\n')},54:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _button_link_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38);\\n/* harmony import */ var _button_link_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(55);\\n/* harmony import */ var _button_link_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_button_link_scss__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\n/* harmony default export */ __webpack_exports__[\"default\"] = (_button_link_jsx__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvYnV0dG9uLWxpbmsvaW5kZXguanM/OGU3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnV0dG9uTGluayBmcm9tICcuL2J1dHRvbi1saW5rLmpzeCc7XG5pbXBvcnQgJy4vYnV0dG9uLWxpbmsuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkxpbms7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///54\\n')},55:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvYnV0dG9uLWxpbmsvYnV0dG9uLWxpbmsuc2Nzcz9hNzgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1OTA0ODQwNTYyMDdcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///55\\n\")}}).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/button-link.js\n");

/***/ }),

/***/ "../../components/lib/dropdown.css":
/*!***************************************************************!*\
  !*** /var/www/deriv-app/packages/components/lib/dropdown.css ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy92YXIvd3d3L2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9kcm9wZG93bi5jc3M/OTdmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.css\n");

/***/ }),

/***/ "../../components/lib/dropdown.js":
/*!**************************************************************!*\
  !*** /var/www/deriv-app/packages/components/lib/dropdown.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(g,I){ true?module.exports=I(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! @deriv/shared/utils/string */ \"../../shared/utils/string.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! react-tiny-popover */ \"../../components/node_modules/react-tiny-popover/dist/Popover.js\"),__webpack_require__(/*! tt-react-custom-scrollbars */ \"../../components/node_modules/tt-react-custom-scrollbars/lib/index.js\"),__webpack_require__(/*! @deriv/shared/utils/currency */ \"../../shared/utils/currency.js\"),__webpack_require__(/*! @deriv/shared/utils/os */ \"../../shared/utils/os.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__5__,__WEBPACK_EXTERNAL_MODULE__8__,__WEBPACK_EXTERNAL_MODULE__13__,__WEBPACK_EXTERNAL_MODULE__20__,__WEBPACK_EXTERNAL_MODULE__24__,__WEBPACK_EXTERNAL_MODULE__46__){return function(g){var I={};function C(A){if(I[A])return I[A].exports;var e=I[A]={i:A,l:!1,exports:{}};return g[A].call(e.exports,e,e.exports,C),e.l=!0,e.exports}return C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&\"object\"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,\"default\",{enumerable:!0,value:g}),2&I&&\"string\"!=typeof g)for(var e in g)C.d(A,e,function(I){return g[I]}.bind(null,e));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,\"a\",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p=\"\",C(C.s=107)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},107:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(8);\\n\\n// EXTERNAL MODULE: external \"@deriv/shared/utils/os\"\\nvar os_ = __webpack_require__(46);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/index.js + 1 modules\\nvar themed_scrollbars = __webpack_require__(22);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.js\\n\\nvar getDisplayText = function getDisplayText(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return (arr_list.find(function (item) {\\n      return item.value === value;\\n    }) || {}).text;\\n  };\\n\\n  var text = \\'\\';\\n\\n  if (Array.isArray(list)) {\\n    text = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      text = findInArray(list[key]);\\n      return text;\\n    });\\n  }\\n\\n  return text;\\n};\\nvar findNextFocusableNode = function findNextFocusableNode(active_node) {\\n  if (!active_node) return null;\\n  if (active_node.attributes.tabIndex) return active_node;\\n  return findNextFocusableNode(active_node.nextSibling);\\n};\\nvar findPreviousFocusableNode = function findPreviousFocusableNode(active_node) {\\n  if (!active_node) return null;\\n  if (active_node.attributes.tabIndex) return active_node;\\n  return findPreviousFocusableNode(active_node.previousSibling);\\n};\\nvar dropdown_listPropType = function listPropType() {\\n  return external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.shape({\\n    disabled: external_prop_types_default.a.bool,\\n    has_tooltip: external_prop_types_default.a.bool,\\n    text: external_prop_types_default.a.string,\\n    tooltip: external_prop_types_default.a.string,\\n    value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n  })), external_prop_types_default.a.object]);\\n};\\n// EXTERNAL MODULE: external \"@deriv/shared/utils/currency\"\\nvar currency_ = __webpack_require__(24);\\nvar currency_default = /*#__PURE__*/__webpack_require__.n(currency_);\\n\\n// EXTERNAL MODULE: ./src/components/popover/index.js + 1 modules\\nvar popover = __webpack_require__(19);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/items.jsx\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n\\n\\n\\n\\n\\n\\nvar items_Items = function Items(_ref) {\\n  var items = _ref.items,\\n      props = _objectWithoutProperties(_ref, [\"items\"]);\\n\\n  return items.map(function (item, idx) {\\n    return external_react_[\"createElement\"](items_Item, _extends({\\n      key: idx,\\n      item: item\\n    }, props));\\n  });\\n};\\n\\nvar items_Item = function Item(_ref2) {\\n  var onKeyPressed = _ref2.onKeyPressed,\\n      value = _ref2.value,\\n      item = _ref2.item,\\n      handleSelect = _ref2.handleSelect,\\n      nodes = _ref2.nodes,\\n      has_symbol = _ref2.has_symbol,\\n      is_align_text_left = _ref2.is_align_text_left,\\n      className = _ref2.className;\\n  var item_ref = external_react_[\"useRef\"](null);\\n  var symbol_type_class_name = item.text && typeof item.text === \\'string\\' ? \"symbols--\".concat(item.text.toLowerCase()) : null;\\n  external_react_[\"useEffect\"](function () {\\n    var removeListeners = function removeListeners() {\\n      nodes[\"delete\"](item.value, item_ref.current);\\n      item_ref.current.removeEventListener(\\'keydown\\', onKeyPressed);\\n    };\\n\\n    if (item.disabled) removeListeners();else {\\n      var handleKeyPress = function handleKeyPress(e) {\\n        return onKeyPressed(e, item);\\n      };\\n\\n      item_ref.current.addEventListener(\\'keydown\\', handleKeyPress);\\n      nodes.set(item.value.toString(), item_ref.current);\\n    }\\n    return function () {\\n      return removeListeners();\\n    };\\n  }, [item]);\\n  return external_react_[\"createElement\"](\"div\", {\\n    className: external_classnames_default()(\\'dc-list__item\\', {\\n      \\'dc-list__item--selected\\': value === item.value\\n    }, {\\n      \\'dc-list__item--disabled\\': item.disabled\\n    }),\\n    name: name,\\n    value: item.value,\\n    onClick: item.disabled ? null : handleSelect.bind(null, item),\\n    ref: item_ref,\\n    tabIndex: item.disabled ? null : 0,\\n    id: item.value\\n  }, !!has_symbol && item.has_tooltip && external_react_[\"createElement\"](popover[\"default\"], {\\n    alignment: \"left\",\\n    message: currency_default.a.getCurrencyDisplayCode(item.text)\\n  }, external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-symbol\\', symbol_type_class_name)\\n  })), !!has_symbol && !item.has_tooltip && external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-text\\', symbol_type_class_name)\\n  }), !has_symbol && external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'dc-list__item-text\\', {\\n      \\'dc-list__item-text--left\\': is_align_text_left\\n    }, className)\\n  }, item.text));\\n};\\n\\nitems_Items.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  handleSelect: external_prop_types_default.a.func,\\n  has_symbol: external_prop_types_default.a.bool,\\n  onKeyPressed: external_prop_types_default.a.func,\\n  name: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown_items = (items_Items);\\n// CONCATENATED MODULE: ./src/components/dropdown/native-select.jsx\\n\\n\\nvar NativeSelect = external_react_[\"forwardRef\"](function (_ref, ref) {\\n  var name = _ref.name,\\n      list = _ref.list,\\n      value = _ref.value,\\n      onChange = _ref.onChange;\\n  return external_react_[\"createElement\"](\"div\", {\\n    className: \"dc-native-select dc-native-select__wrapper\"\\n  }, external_react_[\"createElement\"](\"select\", {\\n    ref: ref,\\n    className: \"dc-native-select__select\",\\n    name: name,\\n    value: value,\\n    onChange: onChange\\n  }, Array.isArray(list) ? list.map(function (item, idx) {\\n    return external_react_[\"createElement\"](\"option\", {\\n      key: idx,\\n      value: item.value,\\n      disabled: item.disabled\\n    }, item.nativepicker_text);\\n  }) : Object.keys(list).map(function (key) {\\n    return external_react_[\"createElement\"](external_react_[\"Fragment\"], {\\n      key: key\\n    }, external_react_[\"createElement\"](\"optgroup\", {\\n      label: key\\n    }, list[key].map(function (item, idx) {\\n      return external_react_[\"createElement\"](\"option\", {\\n        key: idx,\\n        value: item.value,\\n        disabled: item.disabled\\n      }, item.nativepicker_text);\\n    })));\\n  })));\\n});\\nNativeSelect.displayName = \\'NativeSelect\\';\\nNativeSelect.propTypes = {\\n  list: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.array]),\\n  name: external_prop_types_default.a.string,\\n  nativepicker_text: external_prop_types_default.a.string,\\n  onChange: external_prop_types_default.a.func,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var native_select = (NativeSelect);\\n// CONCATENATED MODULE: ./src/components/dropdown/display-text.jsx\\n\\n\\n\\n\\n\\nvar display_text_DisplayText = function DisplayText(_ref) {\\n  var className = _ref.className,\\n      has_symbol = _ref.has_symbol,\\n      list = _ref.list,\\n      is_align_text_left = _ref.is_align_text_left,\\n      placeholder = _ref.placeholder,\\n      name = _ref.name,\\n      value = _ref.value;\\n  var symbol_value_class = value && has_symbol ? \"symbols--\".concat(value.toLowerCase()) : null;\\n  return external_react_[\"createElement\"](external_react_[\"Fragment\"], null, has_symbol ? external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'symbols dc-dropdown__display-symbol\\', symbol_value_class, className),\\n    name: name,\\n    value: value\\n  }) : external_react_[\"createElement\"](\"span\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-text\\', className),\\n    name: name,\\n    value: value\\n  }, getDisplayText(list, value)), placeholder && external_react_[\"createElement\"](\"div\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-placeholder\\', {\\n      \\'dc-dropdown__display-placeholder--is-title\\': value,\\n      \\'dc-dropdown__display-placeholder--is-left-text\\': is_align_text_left\\n    })\\n  }, external_react_[\"createElement\"](\"span\", {\\n    className: \"dc-dropdown__display-placeholder-text\"\\n  }, placeholder)));\\n};\\n\\ndisplay_text_DisplayText.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_title: external_prop_types_default.a.bool,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n};\\n/* harmony default export */ var display_text = (display_text_DisplayText);\\n// EXTERNAL MODULE: ./src/components/icon/index.js\\nvar icon = __webpack_require__(6);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction dropdown_extends() { dropdown_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return dropdown_extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar dropdown_Dropdown =\\n/*#__PURE__*/\\nfunction (_React$Component) {\\n  _inherits(Dropdown, _React$Component);\\n\\n  function Dropdown() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, Dropdown);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.dropdown_ref = external_react_[\"createRef\"]();\\n    _this.list_ref = external_react_[\"createRef\"]();\\n    _this.native_select_ref = external_react_[\"createRef\"]();\\n    _this.nodes = new Map();\\n    _this.state = {\\n      is_list_visible: !!_this.props.is_nativepicker_visible,\\n      list_height: 0,\\n      list_width: 0\\n    };\\n\\n    _this.handleSelect = function (item) {\\n      if (item.value !== _this.props.value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: item.value\\n          }\\n        });\\n      }\\n\\n      _this.handleVisibility();\\n\\n      _this.dropdown_ref.current.focus();\\n    };\\n\\n    _this.setWrapperRef = function (node) {\\n      return _this.wrapper_ref = node;\\n    };\\n\\n    _this.handleClickOutside = function (event) {\\n      var _event$path, _event$composedPath;\\n\\n      var path = (_event$path = event.path) !== null && _event$path !== void 0 ? _event$path : (_event$composedPath = event.composedPath) === null || _event$composedPath === void 0 ? void 0 : _event$composedPath.call(event);\\n\\n      if (_this.wrapper_ref && !_this.wrapper_ref.contains(event.target) && !_this.wrapper_ref.contains(path[0]) && // When component is isolated (e.g, iframe, shadow DOM) event.target refers to whole container not the component. path[0] is the node that the event originated from, it does not need to walk the array\\n      _this.state.is_list_visible) {\\n        if (typeof _this.props.handleBlur === \\'function\\') {\\n          _this.props.handleBlur({\\n            target: {\\n              name: _this.props.name\\n            }\\n          });\\n        }\\n\\n        _this.setState({\\n          is_list_visible: false\\n        });\\n      }\\n    };\\n\\n    _this.handleVisibility = function () {\\n      if (_this.props.is_nativepicker && !_this.state.is_list_visible) {\\n        if (Object(os_[\"mobileOSDetect\"])() === \\'iOS\\') {\\n          /* .focus() doesn\\'t trigger open <select /> in Android :(\\n           * so we use a CSS hack - refer to L237 in dropdown.scss\\n           * [TODO]: find alternative solution to trigger open <select /> with JS\\n           */\\n          _this.native_select_ref.current.focus();\\n        }\\n\\n        _this.setState({\\n          is_list_visible: true\\n        });\\n      } else {\\n        _this.setState(function (state) {\\n          return {\\n            is_list_visible: !state.is_list_visible\\n          };\\n        }, function () {\\n          if (!_this.state.is_list_visible) _this.dropdown_ref.current.focus();\\n        });\\n      }\\n    };\\n\\n    _this.onKeyPressed = function (event, item) {\\n      if (_this.is_single_option) return; // Tab -> before preventDefault() to be able to go to the next tabIndex\\n\\n      if (event.keyCode === 9 && !_this.state.is_list_visible) return;\\n      event.preventDefault();\\n\\n      switch (event.keyCode) {\\n        case 27:\\n          // esc\\n          if (_this.state.is_list_visible) _this.handleVisibility();\\n          break;\\n\\n        case 9: // Tab\\n\\n        case 13: // Enter\\n\\n        case 32:\\n          // Space\\n          if (!item) return;\\n\\n          _this.handleSelect(item);\\n\\n          break;\\n\\n        case 38: // Up Arrow\\n\\n        case 40:\\n          // Down Arrow\\n          if (_this.state.is_list_visible) {\\n            _this.focusNextListItem(event.keyCode);\\n          } else if (!_this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 37: // Left arrow\\n\\n        case 39:\\n          // Right Arrow\\n          if (_this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        default:\\n      } // For char presses, we do a search for the item:\\n\\n\\n      if (event.key.length === 1 && _this.props.list.length) {\\n        var _char = event.key.toLowerCase();\\n\\n        var item_starting_with_char = _this.props.list.find(function (li) {\\n          return li.value && li.value[0].toLowerCase() === _char;\\n        });\\n\\n        if (!item_starting_with_char) return;\\n\\n        var item_ref = _this.nodes.get(item_starting_with_char.value);\\n\\n        if (item_ref) item_ref.focus();\\n      }\\n    };\\n\\n    _this.focusNextListItem = function (direction) {\\n      var active_element = document.activeElement;\\n\\n      if (active_element.id === \\'dropdown-display\\') {\\n        Array.from(_this.nodes.values())[0].focus();\\n      } else {\\n        var active_node = _this.nodes.get(active_element.id);\\n\\n        if (active_node) {\\n          if (direction === 40) {\\n            var next_node = findNextFocusableNode(active_node.nextSibling);\\n            if (next_node) next_node.focus();\\n          }\\n\\n          if (direction === 38) {\\n            var prev_node = findPreviousFocusableNode(active_node.previousSibling);\\n            if (prev_node) prev_node.focus();\\n          }\\n        }\\n      }\\n    };\\n\\n    _this.setListDimension = function () {\\n      return _this.setState({\\n        list_width: _this.list_ref.current.offsetWidth,\\n        list_height: _this.list_ref.current.offsetHeight\\n      });\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(Dropdown, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      document.addEventListener(\\'mousedown\\', this.handleClickOutside, {\\n        passive: true\\n      });\\n    }\\n  }, {\\n    key: \"componentDidUpdate\",\\n    value: function componentDidUpdate() {\\n      if (this.props.is_nativepicker && !this.props.is_nativepicker_visible && this.state.is_list_visible) {\\n        this.setState({\\n          is_list_visible: false\\n        });\\n      }\\n    }\\n  }, {\\n    key: \"componentWillUnmount\",\\n    value: function componentWillUnmount() {\\n      document.removeEventListener(\\'mousedown\\', this.handleClickOutside);\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      var getDropDownAlignment = function getDropDownAlignment() {\\n        if (_this2.props.is_alignment_left) return _this2.computed_offset_left;else if (_this2.props.is_alignment_top) return _this2.computed_offset_top;\\n        return null;\\n      };\\n\\n      return external_react_[\"createElement\"](external_react_[\"Fragment\"], null, external_react_[\"createElement\"](\"input\", {\\n        className: \"dc-dropdown__inner\",\\n        autoComplete: \"off\",\\n        name: this.props.name,\\n        readOnly: \"readonly\",\\n        type: \"hidden\",\\n        value: this.props.value || 0\\n      }), external_react_[\"createElement\"](\"div\", {\\n        ref: this.setWrapperRef,\\n        className: this.container_class_name\\n      }, external_react_[\"createElement\"](\"div\", {\\n        className: \"dc-dropdown__container\"\\n      }, this.props.label && external_react_[\"createElement\"](\"span\", {\\n        className: external_classnames_default()(\\'dc-dropdown__label\\', {\\n          \\'dc-dropdown__label--clicked\\': this.state.is_list_visible\\n        })\\n      }, this.props.label), external_react_[\"createElement\"](\"div\", {\\n        className: this.dropdown_display_class_name,\\n        tabIndex: this.is_single_option ? \\'-1\\' : \\'0\\',\\n        onClick: this.handleVisibility,\\n        onKeyDown: this.onKeyPressed,\\n        id: \"dropdown-display\",\\n        ref: this.dropdown_ref\\n      }, external_react_[\"createElement\"](display_text, {\\n        has_symbol: this.props.has_symbol,\\n        name: this.props.name,\\n        is_title: this.state.is_list_visible,\\n        placeholder: this.props.placeholder,\\n        value: this.props.value || 0,\\n        list: this.props.list,\\n        is_align_text_left: this.props.is_align_text_left\\n      })), !this.is_single_option && external_react_[\"createElement\"](icon[\"default\"], {\\n        icon: this.props.is_alignment_left ? \\'IcChevronLeft\\' : \\'IcChevronDown\\',\\n        className: external_classnames_default()(\\'dc-dropdown__select-arrow\\', {\\n          \\'dc-dropdown__select-arrow--left\\': this.props.is_alignment_left,\\n          \\'dc-dropdown__select-arrow--up\\': this.state.is_list_visible\\n        })\\n      }), this.props.error && external_react_[\"createElement\"](\"p\", {\\n        className: \"dc-field-error\"\\n      }, this.props.error), this.props.is_nativepicker ? external_react_[\"createElement\"](native_select, {\\n        ref: this.native_select_ref,\\n        name: this.props.name,\\n        value: this.props.value,\\n        list: this.props.list,\\n        onChange: this.props.onChange\\n      }) : external_react_[\"createElement\"](external_react_transition_group_[\"CSSTransition\"], {\\n        \"in\": this.state.is_list_visible,\\n        timeout: 100,\\n        classNames: this.transition_class_names,\\n        onEntered: this.setListDimension,\\n        unmountOnExit: true\\n      }, external_react_[\"createElement\"](\"div\", {\\n        className: this.dropdown_list_class_names\\n      }, external_react_[\"createElement\"](\"div\", {\\n        className: this.list_class_names,\\n        ref: this.list_ref,\\n        style: getDropDownAlignment(),\\n        \"aria-expanded\": this.state.is_list_visible,\\n        role: \"list\"\\n      }, external_react_[\"createElement\"](themed_scrollbars[\"default\"], {\\n        autoHeight: true,\\n        autoHide: true // TODO: remove this once tt-react-scrollbars have been replaced\\n        // prevent focus handling from breaking\\n        ,\\n        autoHeightMax: 10000,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_[\"createElement\"](\"div\", dropdown_extends({}, props, {\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_[\"createElement\"](\"div\", dropdown_extends({}, props, {\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        }\\n      }, Array.isArray(this.props.list) ? external_react_[\"createElement\"](dropdown_items, {\\n        onKeyPressed: this.onKeyPressed,\\n        className: this.props.classNameItems,\\n        handleSelect: this.handleSelect,\\n        has_symbol: this.props.has_symbol,\\n        items: this.props.list,\\n        name: this.props.name,\\n        is_align_text_left: this.props.is_align_text_left,\\n        value: this.props.value,\\n        nodes: this.nodes\\n      }) : Object.keys(this.props.list).map(function (key, idx) {\\n        return external_react_[\"createElement\"](external_react_[\"Fragment\"], {\\n          key: key\\n        }, external_react_[\"createElement\"](\"div\", {\\n          className: external_classnames_default()(\\'dc-list__label\\', _this2.props.classNameLabel)\\n        }, key), external_react_[\"createElement\"](dropdown_items, {\\n          onKeyPressed: _this2.onKeyPressed,\\n          className: _this2.props.classNameItems,\\n          handleSelect: _this2.handleSelect,\\n          has_symbol: _this2.props.has_symbol,\\n          items: _this2.props.list[key],\\n          name: _this2.props.name,\\n          is_align_text_left: _this2.props.is_align_text_left,\\n          value: _this2.props.value,\\n          nodes: _this2.nodes\\n        }), idx !== Object.keys(_this2.props.list).length - 1 && external_react_[\"createElement\"](\"span\", {\\n          className: \"dc-list__separator\"\\n        }));\\n      })))))), !this.props.error && this.props.hint && external_react_[\"createElement\"](\"p\", {\\n        className: \"dc-dropdown__hint\"\\n      }, this.props.hint)));\\n    }\\n  }, {\\n    key: \"computed_offset_left\",\\n\\n    /**\\n     * Calculate the offset for the dropdown list based on its width\\n     *\\n     * @return {{transform: string}}\\n     */\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(calc(-\".concat(this.state.list_width, \"px - 12px), 0, 0px)\")\\n      };\\n    }\\n    /**\\n     * Calculate the offset for the dropdown list based on its height\\n     *\\n     * @return {{transform: string}}\\n     */\\n\\n  }, {\\n    key: \"computed_offset_top\",\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(0, calc(-\".concat(this.state.list_height, \"px - 16px), 0px)\")\\n      };\\n    }\\n  }, {\\n    key: \"is_single_option\",\\n    get: function get() {\\n      return Array.isArray(this.props.list) ? this.props.list.length < 2 : // object has less than two props or inner object has less than two props\\n      Object.keys(this.props.list).length && Object.keys(this.props.list).length < 2 && this.props.list[Object.keys(this.props.list)[0]].length < 2;\\n    }\\n  }, {\\n    key: \"container_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown-container\\', this.props.className, {\\n        \\'dc-dropdown--has-placeholder\\': this.props.placeholder,\\n        \\'dc-dropdown--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown--show\\': this.state.is_list_visible,\\n        \\'dc-dropdown--disabled\\': this.is_single_option || this.props.disabled\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_display_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__display\\', this.props.classNameDisplay, {\\n        \\'dc-dropdown__display--clicked\\': this.state.is_list_visible,\\n        \\'dc-dropdown__display--has-symbol\\': this.props.has_symbol,\\n        \\'dc-dropdown__display--no-border\\': this.props.no_border,\\n        \\'dc-dropdown__display--is-left-text\\': this.props.is_align_text_left\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__list\\', {\\n        \\'dc-dropdown__list--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown__list--top\\': this.props.is_alignment_top\\n      });\\n    }\\n  }, {\\n    key: \"list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-list\\', {\\n        \\'dc-list--left\\': this.props.is_alignment_left,\\n        \\'dc-list--large\\': this.props.is_large\\n      });\\n    }\\n  }, {\\n    key: \"transition_class_names\",\\n    get: function get() {\\n      return {\\n        enter: \"dc-dropdown__list--enter\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter\\' : \\'\\'),\\n        enterDone: \"dc-dropdown__list--enter-done\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter-done\\' : \\'\\'),\\n        exit: \"dc-dropdown__list--exit\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--exit\\' : \\'\\')\\n      };\\n    }\\n  }]);\\n\\n  return Dropdown;\\n}(external_react_[\"Component\"]);\\n\\ndropdown_Dropdown.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNameDisplay: external_prop_types_default.a.string,\\n  classNameItems: external_prop_types_default.a.string,\\n  classNameLabel: external_prop_types_default.a.string,\\n  disabled: external_prop_types_default.a.bool,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_alignment_left: external_prop_types_default.a.bool,\\n  is_large: external_prop_types_default.a.bool,\\n  is_nativepicker: external_prop_types_default.a.bool,\\n  is_nativepicker_visible: external_prop_types_default.a.bool,\\n  label: external_prop_types_default.a.string,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  no_border: external_prop_types_default.a.bool,\\n  onChange: external_prop_types_default.a.func,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown = (dropdown_Dropdown);\\n// EXTERNAL MODULE: ./src/components/dropdown/dropdown.scss\\nvar dropdown_dropdown = __webpack_require__(65);\\n\\n// EXTERNAL MODULE: ./src/components/dropdown/list.scss\\nvar dropdown_list = __webpack_require__(66);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/index.js\\n\\n\\n\\n/* harmony default export */ var components_dropdown = __webpack_exports__[\"default\"] = (dropdown);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///107\\n')},13:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__13__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3QtdGlueS1wb3BvdmVyXCI/NzQxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzEzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///13\\n\")},19:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"react-tiny-popover\"\\nvar external_react_tiny_popover_ = __webpack_require__(13);\\nvar external_react_tiny_popover_default = /*#__PURE__*/__webpack_require__.n(external_react_tiny_popover_);\\n\\n// EXTERNAL MODULE: ./src/components/icon/index.js\\nvar components_icon = __webpack_require__(6);\\n\\n// CONCATENATED MODULE: ./src/components/popover/popover.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\nvar popover_Popover =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(Popover, _React$PureComponent);\\n\\n  function Popover(props) {\\n    var _this;\\n\\n    _classCallCheck(this, Popover);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popover).call(this, props));\\n\\n    _this.toggleOpen = function () {\\n      _this.setState({\\n        is_open: Boolean(_this.props.message)\\n      });\\n    };\\n\\n    _this.toggleClose = function () {\\n      if (_this.props.is_bubble_hover_enabled) {\\n        _this.toggleIsOpenOnHoverPopoverBubble();\\n      } else {\\n        _this.setState({\\n          is_open: false\\n        });\\n      }\\n    };\\n\\n    _this.onMouseEnter = function () {\\n      _this.setState({\\n        is_bubble_open: true\\n      });\\n    };\\n\\n    _this.onMouseLeave = function () {\\n      _this.setState({\\n        is_bubble_open: false,\\n        is_open: false\\n      });\\n    };\\n\\n    _this.toggleIsOpenOnHoverPopoverBubble = function () {\\n      setTimeout(function () {\\n        // add delay to check if mouse is hovered on popover bubble\\n        _this.setState({\\n          is_open: _this.props.is_bubble_hover_enabled ? _this.state.is_bubble_open : false\\n        });\\n      }, 50);\\n    };\\n\\n    _this.state = {\\n      is_open: false,\\n      is_bubble_open: false,\\n      popover_ref: undefined\\n    };\\n\\n    _this.setWrapperRef = function (ref) {\\n      return _this.wrapper_ref = ref;\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(Popover, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.setState({\\n        is_open: this.props.has_error\\n      });\\n\\n      if (this.wrapper_ref) {\\n        this.setState({\\n          popover_ref: this.wrapper_ref\\n        });\\n      }\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      var _this$props = this.props,\\n          alignment = _this$props.alignment,\\n          children = _this$props.children,\\n          className = _this$props.className,\\n          classNameBubble = _this$props.classNameBubble,\\n          classNameTarget = _this$props.classNameTarget,\\n          classNameTargetIcon = _this$props.classNameTargetIcon,\\n          counter = _this$props.counter,\\n          disable_message_icon = _this$props.disable_message_icon,\\n          disable_target_icon = _this$props.disable_target_icon,\\n          has_error = _this$props.has_error,\\n          icon = _this$props.icon,\\n          id = _this$props.id,\\n          is_open = _this$props.is_open,\\n          margin = _this$props.margin,\\n          message = _this$props.message,\\n          zIndex = _this$props.zIndex,\\n          relative_render = _this$props.relative_render;\\n      var has_external_open_state = is_open !== undefined;\\n      var icon_class_name = external_classnames_default()(classNameTargetIcon, icon);\\n      return external_react_[\"createElement\"](\"div\", {\\n        className: external_classnames_default()({\\n          \\'dc-popover__wrapper\\': relative_render\\n        })\\n      }, relative_render && external_react_[\"createElement\"](\"div\", {\\n        className: \"dc-popover__container\",\\n        style: {\\n          zIndex: zIndex || 1\\n        }\\n      }, external_react_[\"createElement\"](\"div\", {\\n        ref: this.setWrapperRef,\\n        className: \"dc-popover__container-relative\"\\n      })), (this.state.popover_ref || !relative_render) && external_react_[\"createElement\"](external_react_tiny_popover_default.a, _extends({\\n        isOpen: is_open !== null && is_open !== void 0 ? is_open : this.state.is_open,\\n        position: alignment,\\n        transitionDuration: 0.25,\\n        padding: margin + 8,\\n        contentDestination: relative_render ? this.state.popover_ref : document.body\\n      }, relative_render ? {\\n        contentLocation: function contentLocation(_ref) {\\n          var targetRect = _ref.targetRect,\\n              popoverRect = _ref.popoverRect,\\n              nudgedLeft = _ref.nudgedLeft;\\n          var screen_width = document.body.clientWidth;\\n          var total_width = targetRect.right + (popoverRect.width - targetRect.width / 2);\\n          var top_offset = 0;\\n          var left_offset = 0;\\n\\n          switch (alignment) {\\n            case \\'left\\':\\n              {\\n                left_offset = Math.abs((popoverRect.height > popoverRect.width ? nudgedLeft : popoverRect.width) + margin) * -1;\\n                top_offset = targetRect.height > popoverRect.height ? (targetRect.height - popoverRect.height) / 2 : (popoverRect.height - targetRect.height) / 2 * -1;\\n                break;\\n              }\\n\\n            case \\'right\\':\\n              {\\n                left_offset = popoverRect.width + margin;\\n                top_offset = targetRect.height > popoverRect.height ? (targetRect.height - popoverRect.height) / 2 : (popoverRect.height - targetRect.height) / 2 * -1;\\n                break;\\n              }\\n\\n            case \\'top\\':\\n              {\\n                left_offset = total_width > screen_width ? Math.abs(total_width - screen_width) * -1 : 0;\\n                top_offset = Math.abs(popoverRect.height + margin) * -1;\\n                break;\\n              }\\n\\n            case \\'bottom\\':\\n              {\\n                left_offset = total_width > screen_width ? Math.abs(total_width - screen_width) * -1 : 0;\\n                top_offset = targetRect.height + margin;\\n                break;\\n              }\\n\\n            default:\\n              break;\\n          }\\n\\n          return {\\n            top: top_offset,\\n            left: left_offset\\n          };\\n        }\\n      } : {\\n        containerStyle: {\\n          zIndex: zIndex || 1\\n        }\\n      }, {\\n        content: function content(_ref2) {\\n          var position = _ref2.position,\\n              targetRect = _ref2.targetRect,\\n              popoverRect = _ref2.popoverRect;\\n          return external_react_[\"createElement\"](external_react_tiny_popover_[\"ArrowContainer\"], {\\n            position: position,\\n            targetRect: targetRect,\\n            popoverRect: popoverRect,\\n            arrowColor: has_error ? \\'var(--status-danger)\\' : \\'var(--general-active)\\',\\n            arrowSize: 5\\n          }, external_react_[\"createElement\"](\"div\", {\\n            id: id,\\n            className: external_classnames_default()(classNameBubble, \\'dc-popover__bubble\\', {\\n              \\'dc-popover__bubble--error\\': has_error\\n            }),\\n            onMouseEnter: _this2.onMouseEnter,\\n            onMouseLeave: _this2.onMouseLeave\\n          }, !disable_message_icon && icon === \\'info\\' && external_react_[\"createElement\"](\"i\", {\\n            className: \"dc-popover__bubble__icon\"\\n          }, external_react_[\"createElement\"](components_icon[\"default\"], {\\n            icon: \"IcInfoBlue\"\\n          })), external_react_[\"createElement\"](\"span\", {\\n            className: external_classnames_default()(\\'dc-popover__bubble__text\\', {\\n              \\'dc-popover__bubble__text--error\\': has_error\\n            })\\n          }, message)));\\n        }\\n      }), external_react_[\"createElement\"](\"div\", {\\n        className: external_classnames_default()(\\'dc-popover\\', className),\\n        id: id,\\n        onMouseEnter: has_external_open_state ? undefined : this.toggleOpen,\\n        onMouseLeave: has_external_open_state ? undefined : this.toggleClose\\n      }, external_react_[\"createElement\"](\"div\", {\\n        className: external_classnames_default()(classNameTarget, \\'dc-popover__target\\')\\n      }, !disable_target_icon && external_react_[\"createElement\"](\"i\", {\\n        className: message ? \\'dc-popover__target__icon\\' : \\'dc-popover__target__icon--disabled\\'\\n      }, icon === \\'info\\' && external_react_[\"createElement\"](components_icon[\"default\"], {\\n        icon: \"IcInfoOutline\",\\n        className: icon_class_name\\n      }), icon === \\'question\\' && external_react_[\"createElement\"](components_icon[\"default\"], {\\n        icon: \"IcUnknown\",\\n        className: icon_class_name\\n      }), icon === \\'dot\\' && external_react_[\"createElement\"](components_icon[\"default\"], {\\n        icon: \"IcCircle\",\\n        className: icon_class_name,\\n        size: 4\\n      }), icon === \\'counter\\' && external_react_[\"createElement\"](\"span\", {\\n        className: icon_class_name\\n      }, counter)), children))));\\n    }\\n  }]);\\n\\n  return Popover;\\n}(external_react_[\"PureComponent\"]);\\n\\npopover_Popover.defaultProps = {\\n  portal_container: \\'deriv_app\\',\\n  margin: 0,\\n  relative_render: false\\n};\\npopover_Popover.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  classNameBubble: external_prop_types_default.a.string,\\n  classNameTarget: external_prop_types_default.a.string,\\n  classNameTargetIcon: external_prop_types_default.a.string,\\n  counter: external_prop_types_default.a.number,\\n  disable_message_icon: external_prop_types_default.a.bool,\\n  disable_target_icon: external_prop_types_default.a.bool,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.oneOf([\\'info\\', \\'question\\', \\'dot\\', \\'counter\\']),\\n  id: external_prop_types_default.a.string,\\n  is_bubble_hover_enabled: external_prop_types_default.a.bool,\\n  is_open: external_prop_types_default.a.bool,\\n  relative_render: external_prop_types_default.a.bool,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.oneOfType([external_prop_types_default.a.node, external_prop_types_default.a.object, external_prop_types_default.a.string]),\\n  portal_container: external_prop_types_default.a.string,\\n  zIndex: external_prop_types_default.a.number\\n};\\n/* harmony default export */ var popover = (popover_Popover);\\n// EXTERNAL MODULE: ./src/components/popover/popover.scss\\nvar popover_popover = __webpack_require__(26);\\n\\n// CONCATENATED MODULE: ./src/components/popover/index.js\\n\\n\\n/* harmony default export */ var components_popover = __webpack_exports__[\"default\"] = (popover);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///19\\n')},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},20:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__20__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIj8xMTY3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMjBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///20\\n\")},22:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/themed-scrollbars.scss\\nvar themed_scrollbars = __webpack_require__(27);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"tt-react-custom-scrollbars\"\\nvar external_tt_react_custom_scrollbars_ = __webpack_require__(20);\\n\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/themed-scrollbars.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\nvar themed_scrollbars_ThemedScrollbars =\\n/*#__PURE__*/\\nfunction (_React$Component) {\\n  _inherits(ThemedScrollbars, _React$Component);\\n\\n  function ThemedScrollbars() {\\n    _classCallCheck(this, ThemedScrollbars);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(ThemedScrollbars).apply(this, arguments));\\n  }\\n\\n  _createClass(ThemedScrollbars, [{\\n    key: \"render\",\\n    value: function render() {\\n      var _this = this;\\n\\n      if (this.props.is_native) return this.props.children;\\n      return external_react_[\"createElement\"](external_tt_react_custom_scrollbars_[\"Scrollbars\"], _extends({\\n        ref: this.props.list_ref,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_[\"createElement\"](\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__track--horizontal\",\\n            style: {\\n              display: _this.props.hideHorizontal ? \\'none\\' : \\'block\\'\\n            }\\n          }));\\n        },\\n        renderTrackVertical: function renderTrackVertical(props) {\\n          return external_react_[\"createElement\"](\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__track--vertical\"\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_[\"createElement\"](\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__thumb--horizontal\"\\n          }));\\n        },\\n        renderThumbVertical: function renderThumbVertical(props) {\\n          return external_react_[\"createElement\"](\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__thumb--vertical\"\\n          }));\\n        }\\n      }, this.props), this.props.children);\\n    }\\n  }]);\\n\\n  return ThemedScrollbars;\\n}(external_react_[\"Component\"]);\\n\\n/* harmony default export */ var themed_scrollbars_themed_scrollbars = (themed_scrollbars_ThemedScrollbars);\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return themed_scrollbars_themed_scrollbars; });\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuanN4PzQxMjEiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3RoZW1lZC1zY3JvbGxiYXJzL2luZGV4LmpzPzc1MzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjcm9sbGJhcnMgfSBmcm9tICd0dC1yZWFjdC1jdXN0b20tc2Nyb2xsYmFycyc7XG5cbmNsYXNzIFRoZW1lZFNjcm9sbGJhcnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNfbmF0aXZlKSByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxTY3JvbGxiYXJzXG4gICAgICAgICAgICAgICAgcmVmPXt0aGlzLnByb3BzLmxpc3RfcmVmfVxuICAgICAgICAgICAgICAgIHJlbmRlclRyYWNrSG9yaXpvbnRhbD17cHJvcHMgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2RjLXRoZW1lZC1zY3JvbGxiYXJzX190cmFjay0taG9yaXpvbnRhbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6IHRoaXMucHJvcHMuaGlkZUhvcml6b250YWwgPyAnbm9uZScgOiAnYmxvY2snIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICByZW5kZXJUcmFja1ZlcnRpY2FsPXtwcm9wcyA9PiA8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPSdkYy10aGVtZWQtc2Nyb2xsYmFyc19fdHJhY2stLXZlcnRpY2FsJyAvPn1cbiAgICAgICAgICAgICAgICByZW5kZXJUaHVtYkhvcml6b250YWw9e3Byb3BzID0+IDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9J2RjLXRoZW1lZC1zY3JvbGxiYXJzX190aHVtYi0taG9yaXpvbnRhbCcgLz59XG4gICAgICAgICAgICAgICAgcmVuZGVyVGh1bWJWZXJ0aWNhbD17cHJvcHMgPT4gPGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT0nZGMtdGhlbWVkLXNjcm9sbGJhcnNfX3RodW1iLS12ZXJ0aWNhbCcgLz59XG4gICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L1Njcm9sbGJhcnM+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZWRTY3JvbGxiYXJzO1xuIiwiaW1wb3J0ICcuL3RoZW1lZC1zY3JvbGxiYXJzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL3RoZW1lZC1zY3JvbGxiYXJzLmpzeCc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFIQTtBQURBO0FBT0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWEE7QUFpQkE7Ozs7QUFyQkE7QUFDQTtBQXVCQTs7QUMzQkE7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///22\\n')},24:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__24__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwiQGRlcml2L3NoYXJlZC91dGlscy9jdXJyZW5jeVwiP2ViZmIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yNF9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///24\\n\")},26:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLnNjc3M/ZWVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTkwNDg0MDU5MDIwXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///26\\n\")},27:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuc2Nzcz8zNjJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1OTA0ODQwNTgzMDNcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///27\\n\")},4:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);\\n/* harmony import */ var _deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3__);\\n\\n\\n\\n // TODO: [move-to-shared]\\n\\nvar getUrlBase = function getUrlBase() {\\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\\n  var l = window.location;\\n  if (!/^\\\\/(br_)/.test(l.pathname)) return path;\\n  return \\\"/\\\".concat(l.pathname.split('/')[1]).concat(/^\\\\//.test(path) ? path : \\\"/\\\".concat(path));\\n};\\n\\nvar Icon = function Icon(_ref) {\\n  var className = _ref.className,\\n      color = _ref.color,\\n      custom_color = _ref.custom_color,\\n      height = _ref.height,\\n      icon = _ref.icon,\\n      id = _ref.id,\\n      onClick = _ref.onClick,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave,\\n      _ref$size = _ref.size,\\n      size = _ref$size === void 0 ? 16 : _ref$size,\\n      width = _ref.width;\\n  if (!icon) return null;\\n  var filename = 'common';\\n  var filenames = /^Ic(Currency|Tradetype|Mt5|Flag|Underlying)/g.exec(icon);\\n\\n  if (filenames) {\\n    filename = Object(_deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3__[\\\"getKebabCase\\\"])(filenames[1]);\\n  }\\n\\n  var sprite_id = icon.startsWith('IcUnderlying') ? \\\"ic-underlying-\\\".concat(icon.split('IcUnderlying')[1].toUpperCase()) : Object(_deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3__[\\\"getKebabCase\\\"])(icon);\\n  return react__WEBPACK_IMPORTED_MODULE_2__[\\\"createElement\\\"](\\\"svg\\\", {\\n    xmlns: \\\"http://www.w3.org/2000/svg\\\",\\n    xmlnsXlink: \\\"http://www.w3.org/1999/xlink\\\",\\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('dc-icon', className, {\\n      'dc-icon--active': color === 'active',\\n      'dc-icon--disabled': color === 'disabled',\\n      'dc-icon--green': color === 'green' || icon === 'IcProfit',\\n      'dc-icon--red': color === 'red' || icon === 'IcLoss',\\n      'dc-icon--secondary': color === 'secondary',\\n      'dc-icon--brand': color === 'brand'\\n    }),\\n    height: height || size,\\n    id: id,\\n    width: width || size,\\n    onClick: onClick,\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    style: custom_color ? {\\n      '--fill-color1': custom_color\\n    } : undefined\\n  }, react__WEBPACK_IMPORTED_MODULE_2__[\\\"createElement\\\"](\\\"use\\\", {\\n    xlinkHref: \\\"\\\".concat(getUrlBase(\\\"/public/images/sprite/\\\".concat(filename, \\\".svg\\\")), \\\"#\\\").concat(sprite_id)\\n  }));\\n};\\n\\nIcon.propTypes = {\\n  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  color: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  custom_color: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  height: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  icon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  size: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  width: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string])\\n};\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = (react__WEBPACK_IMPORTED_MODULE_2__[\\\"memo\\\"](Icon));//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4PzJhYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEtlYmFiQ2FzZSB9IGZyb20gJ0BkZXJpdi9zaGFyZWQvdXRpbHMvc3RyaW5nJztcblxuLy8gVE9ETzogW21vdmUtdG8tc2hhcmVkXVxuY29uc3QgZ2V0VXJsQmFzZSA9IChwYXRoID0gJycpID0+IHtcbiAgICBjb25zdCBsID0gd2luZG93LmxvY2F0aW9uO1xuXG4gICAgaWYgKCEvXlxcLyhicl8pLy50ZXN0KGwucGF0aG5hbWUpKSByZXR1cm4gcGF0aDtcblxuICAgIHJldHVybiBgLyR7bC5wYXRobmFtZS5zcGxpdCgnLycpWzFdfSR7L15cXC8vLnRlc3QocGF0aCkgPyBwYXRoIDogYC8ke3BhdGh9YH1gO1xufTtcblxuY29uc3QgSWNvbiA9ICh7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yLFxuICAgIGN1c3RvbV9jb2xvcixcbiAgICBoZWlnaHQsXG4gICAgaWNvbixcbiAgICBpZCxcbiAgICBvbkNsaWNrLFxuICAgIG9uTW91c2VFbnRlcixcbiAgICBvbk1vdXNlTGVhdmUsXG4gICAgc2l6ZSA9IDE2LFxuICAgIHdpZHRoLFxufSkgPT4ge1xuICAgIGlmICghaWNvbikgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgZmlsZW5hbWUgPSAnY29tbW9uJztcbiAgICBjb25zdCBmaWxlbmFtZXMgPSAvXkljKEN1cnJlbmN5fFRyYWRldHlwZXxNdDV8RmxhZ3xVbmRlcmx5aW5nKS9nLmV4ZWMoaWNvbik7XG4gICAgaWYgKGZpbGVuYW1lcykge1xuICAgICAgICBmaWxlbmFtZSA9IGdldEtlYmFiQ2FzZShmaWxlbmFtZXNbMV0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNwcml0ZV9pZCA9IGljb24uc3RhcnRzV2l0aCgnSWNVbmRlcmx5aW5nJylcbiAgICAgICAgPyBgaWMtdW5kZXJseWluZy0ke2ljb24uc3BsaXQoJ0ljVW5kZXJseWluZycpWzFdLnRvVXBwZXJDYXNlKCl9YFxuICAgICAgICA6IGdldEtlYmFiQ2FzZShpY29uKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxzdmdcbiAgICAgICAgICAgIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbiAgICAgICAgICAgIHhtbG5zWGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLWljb24nLCBjbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tYWN0aXZlJzogY29sb3IgPT09ICdhY3RpdmUnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1kaXNhYmxlZCc6IGNvbG9yID09PSAnZGlzYWJsZWQnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1ncmVlbic6IGNvbG9yID09PSAnZ3JlZW4nIHx8IGljb24gPT09ICdJY1Byb2ZpdCcsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLXJlZCc6IGNvbG9yID09PSAncmVkJyB8fCBpY29uID09PSAnSWNMb3NzJyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tc2Vjb25kYXJ5JzogY29sb3IgPT09ICdzZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1icmFuZCc6IGNvbG9yID09PSAnYnJhbmQnLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICBoZWlnaHQ9e2hlaWdodCB8fCBzaXplfVxuICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgd2lkdGg9e3dpZHRoIHx8IHNpemV9XG4gICAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgICAgb25Nb3VzZUVudGVyPXtvbk1vdXNlRW50ZXJ9XG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU9e29uTW91c2VMZWF2ZX1cbiAgICAgICAgICAgIHN0eWxlPXtcbiAgICAgICAgICAgICAgICBjdXN0b21fY29sb3JcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICctLWZpbGwtY29sb3IxJzogY3VzdG9tX2NvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgPlxuICAgICAgICAgICAgPHVzZSB4bGlua0hyZWY9e2Ake2dldFVybEJhc2UoYC9wdWJsaWMvaW1hZ2VzL3Nwcml0ZS8ke2ZpbGVuYW1lfS5zdmdgKX0jJHtzcHJpdGVfaWR9YH0gLz5cbiAgICAgICAgPC9zdmc+XG4gICAgKTtcbn07XG5cbkljb24ucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGNvbG9yOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGN1c3RvbV9jb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBoZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oSWNvbik7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFuQkE7QUF5QkE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFhQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///4\\n\")},46:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__46__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwiQGRlcml2L3NoYXJlZC91dGlscy9vc1wiPzczYWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX180Nl9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///46\\n\")},5:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__5__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJAZGVyaXYvc2hhcmVkL3V0aWxzL3N0cmluZ1wiP2U2MDgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///5\\n\")},6:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _icon_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);\\n/* harmony import */ var _icon_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\\n/* harmony import */ var _icon_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_icon_scss__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\n/* harmony default export */ __webpack_exports__[\"default\"] = (_icon_jsx__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2luZGV4LmpzP2FlNjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEljb24gZnJvbSAnLi9pY29uLmpzeCc7XG5pbXBvcnQgJy4vaWNvbi5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///6\\n')},65:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24uc2Nzcz8wZjUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1OTA0ODQwNTczNDRcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///65\\n\")},66:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbGlzdC5zY3NzP2ZhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU5MDQ4NDA1NzM1NlxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///66\\n\")},7:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uc2Nzcz83YjFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1OTA0ODQwNTc2NzNcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///7\\n\")},8:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__8__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzhfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///8\\n\")}}).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.js\n");

/***/ }),

/***/ "../../components/lib/fade-wrapper.css":
/*!*******************************************************************!*\
  !*** /var/www/deriv-app/packages/components/lib/fade-wrapper.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZmFkZS13cmFwcGVyLmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vdmFyL3d3dy9kZXJpdi1hcHAvcGFja2FnZXMvY29tcG9uZW50cy9saWIvZmFkZS13cmFwcGVyLmNzcz8wN2IxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../components/lib/fade-wrapper.css\n");

/***/ }),

/***/ "../../components/lib/fade-wrapper.js":
/*!******************************************************************!*\
  !*** /var/www/deriv-app/packages/components/lib/fade-wrapper.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,n){ true?module.exports=n(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! react-pose */ \"../../components/node_modules/react-pose/dist/react-pose.es.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__32__){return function(e){var n={};function t(a){if(n[a])return n[a].exports;var I=n[a]={i:a,l:!1,exports:{}};return e[a].call(I.exports,I,I.exports,t),I.l=!0,I.exports}return t.m=e,t.c=n,t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:a})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var I in e)t.d(a,I,function(n){return e[n]}.bind(null,I));return a},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p=\"\",t(t.s=127)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},127:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/fade-wrapper/fade-wrapper.scss\\nvar fade_wrapper = __webpack_require__(67);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"react-pose\"\\nvar external_react_pose_ = __webpack_require__(32);\\nvar external_react_pose_default = /*#__PURE__*/__webpack_require__.n(external_react_pose_);\\n\\n// CONCATENATED MODULE: ./src/components/fade-wrapper/fade-wrapper.jsx\\n\\n\\n\\nvar FadeInFromTopDiv = external_react_pose_default.a.div({\\n  enter: {\\n    y: 0,\\n    opacity: 1,\\n    delay: 300,\\n    transition: {\\n      \"default\": {\\n        duration: 250\\n      }\\n    }\\n  },\\n  exit: {\\n    y: -50,\\n    opacity: 0,\\n    transition: {\\n      duration: 250\\n    }\\n  }\\n});\\nvar FadeInFromBottomDiv = external_react_pose_default.a.div({\\n  enter: {\\n    y: 0,\\n    opacity: 1,\\n    delay: 300,\\n    transition: {\\n      \"default\": {\\n        duration: 250\\n      }\\n    }\\n  },\\n  exit: {\\n    y: 50,\\n    opacity: 0,\\n    transition: {\\n      duration: 250\\n    }\\n  }\\n});\\nvar FadeInOnlyDiv = external_react_pose_default.a.div({\\n  enter: {\\n    opacity: 1,\\n    transition: {\\n      duration: 300\\n    }\\n  },\\n  exit: {\\n    opacity: 0,\\n    transition: {\\n      duration: 300\\n    }\\n  }\\n}); // `flipMove={false}` is necessary to fix react-pose bug: https://github.com/Popmotion/popmotion/issues/805\\n\\nvar fade_wrapper_FadeWrapper = function FadeWrapper(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      is_visible = _ref.is_visible,\\n      keyname = _ref.keyname,\\n      type = _ref.type;\\n\\n  if (type === \\'top\\') {\\n    return external_react_[\"createElement\"](external_react_pose_[\"PoseGroup\"], {\\n      flipMove: false\\n    }, is_visible && external_react_[\"createElement\"](FadeInFromTopDiv, {\\n      className: className,\\n      key: keyname\\n    }, children));\\n  }\\n\\n  if (type === \\'bottom\\') {\\n    return external_react_[\"createElement\"](external_react_pose_[\"PoseGroup\"], {\\n      flipMove: false\\n    }, is_visible && external_react_[\"createElement\"](FadeInFromBottomDiv, {\\n      className: className,\\n      key: keyname\\n    }, children));\\n  }\\n\\n  return external_react_[\"createElement\"](external_react_pose_[\"PoseGroup\"], {\\n    flipMove: false\\n  }, is_visible && external_react_[\"createElement\"](FadeInOnlyDiv, {\\n    className: className,\\n    key: keyname\\n  }, children));\\n};\\n\\nfade_wrapper_FadeWrapper.propTypes = {\\n  children: external_prop_types_default.a.node,\\n  is_visible: external_prop_types_default.a.bool,\\n  keyname: external_prop_types_default.a.string,\\n  type: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var fade_wrapper_fade_wrapper = (fade_wrapper_FadeWrapper);\\n// CONCATENATED MODULE: ./src/components/fade-wrapper/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return fade_wrapper_fade_wrapper; });\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL2ZhZGUtd3JhcHBlci9mYWRlLXdyYXBwZXIuanN4P2Q1NzkiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL2ZhZGUtd3JhcHBlci9pbmRleC5qcz9mNDg3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHBvc2VkLCB7IFBvc2VHcm91cCB9IGZyb20gJ3JlYWN0LXBvc2UnO1xuXG5jb25zdCBGYWRlSW5Gcm9tVG9wRGl2ID0gcG9zZWQuZGl2KHtcbiAgICBlbnRlcjoge1xuICAgICAgICB5OiAwLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBkZWxheTogMzAwLFxuICAgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiB7IGR1cmF0aW9uOiAyNTAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgICAgeTogLTUwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAyNTAgfSxcbiAgICB9LFxufSk7XG5cbmNvbnN0IEZhZGVJbkZyb21Cb3R0b21EaXYgPSBwb3NlZC5kaXYoe1xuICAgIGVudGVyOiB7XG4gICAgICAgIHk6IDAsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIGRlbGF5OiAzMDAsXG4gICAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHsgZHVyYXRpb246IDI1MCB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZXhpdDoge1xuICAgICAgICB5OiA1MCxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMjUwIH0sXG4gICAgfSxcbn0pO1xuXG5jb25zdCBGYWRlSW5Pbmx5RGl2ID0gcG9zZWQuZGl2KHtcbiAgICBlbnRlcjoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAzMDAgfSxcbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMzAwIH0sXG4gICAgfSxcbn0pO1xuXG4vLyBgZmxpcE1vdmU9e2ZhbHNlfWAgaXMgbmVjZXNzYXJ5IHRvIGZpeCByZWFjdC1wb3NlIGJ1ZzogaHR0cHM6Ly9naXRodWIuY29tL1BvcG1vdGlvbi9wb3Btb3Rpb24vaXNzdWVzLzgwNVxuY29uc3QgRmFkZVdyYXBwZXIgPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBpc192aXNpYmxlLCBrZXluYW1lLCB0eXBlIH0pID0+IHtcbiAgICBpZiAodHlwZSA9PT0gJ3RvcCcpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxQb3NlR3JvdXAgZmxpcE1vdmU9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICB7aXNfdmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxGYWRlSW5Gcm9tVG9wRGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBrZXk9e2tleW5hbWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgICA8L0ZhZGVJbkZyb21Ub3BEaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvUG9zZUdyb3VwPlxuICAgICAgICApO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxQb3NlR3JvdXAgZmxpcE1vdmU9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICB7aXNfdmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxGYWRlSW5Gcm9tQm90dG9tRGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBrZXk9e2tleW5hbWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgICA8L0ZhZGVJbkZyb21Cb3R0b21EaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvUG9zZUdyb3VwPlxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgICA8UG9zZUdyb3VwIGZsaXBNb3ZlPXtmYWxzZX0+XG4gICAgICAgICAgICB7aXNfdmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgICAgPEZhZGVJbk9ubHlEaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IGtleT17a2V5bmFtZX0+XG4gICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L0ZhZGVJbk9ubHlEaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L1Bvc2VHcm91cD5cbiAgICApO1xufTtcblxuRmFkZVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBpc192aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBrZXluYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGYWRlV3JhcHBlcjtcbiIsImltcG9ydCAnLi9mYWRlLXdyYXBwZXIuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZyb20gJy4vZmFkZS13cmFwcGVyLmpzeCc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFKQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUhBO0FBVEE7QUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFKQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUhBO0FBVEE7QUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRkE7QUFMQTtBQUNBO0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQU1BO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQU1BO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBT0E7O0FDekZBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///127\\n')},32:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__32__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3QtcG9zZVwiPzk2YjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18zMl9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///32\\n\")},67:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZmFkZS13cmFwcGVyL2ZhZGUtd3JhcHBlci5zY3NzPzY0YWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU5MDQ4NDA1NzM3MFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///67\\n\")}}).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/fade-wrapper.js\n");

/***/ }),

/***/ "../../components/lib/page-overlay.css":
/*!*******************************************************************!*\
  !*** /var/www/deriv-app/packages/components/lib/page-overlay.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvcGFnZS1vdmVybGF5LmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vdmFyL3d3dy9kZXJpdi1hcHAvcGFja2FnZXMvY29tcG9uZW50cy9saWIvcGFnZS1vdmVybGF5LmNzcz9jYTcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../components/lib/page-overlay.css\n");

/***/ }),

/***/ "../../components/lib/page-overlay.js":
/*!******************************************************************!*\
  !*** /var/www/deriv-app/packages/components/lib/page-overlay.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,n){ true?module.exports=n(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! @deriv/shared/utils/string */ \"../../shared/utils/string.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! react-dom */ \"../node_modules/react-dom/index.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__5__,__WEBPACK_EXTERNAL_MODULE__8__,__WEBPACK_EXTERNAL_MODULE__17__){return function(e){var n={};function t(_){if(n[_])return n[_].exports;var r=n[_]={i:_,l:!1,exports:{}};return e[_].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=e,t.c=n,t.d=function(e,n,_){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:_})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var _=Object.create(null);if(t.r(_),Object.defineProperty(_,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var r in e)t.d(_,r,function(n){return e[n]}.bind(null,r));return _},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p=\"\",t(t.s=140)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},140:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: external \"react-dom\"\\nvar external_react_dom_ = __webpack_require__(17);\\nvar external_react_dom_default = /*#__PURE__*/__webpack_require__.n(external_react_dom_);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(8);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: ./src/components/icon/icon.jsx\\nvar icon = __webpack_require__(4);\\n\\n// CONCATENATED MODULE: ./src/components/page-overlay/page-overlay.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar page_overlay_PageOverlay =\\n/*#__PURE__*/\\nfunction (_React$Component) {\\n  _inherits(PageOverlay, _React$Component);\\n\\n  function PageOverlay() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, PageOverlay);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PageOverlay)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.ref = external_react_[\"createRef\"]();\\n\\n    _this.componentDidMount = function () {\\n      if (_this.props.portal_id) {\\n        document.addEventListener(\\'mousedown\\', _this.handleClickOutside);\\n      }\\n    };\\n\\n    _this.componentWillUnmount = function () {\\n      if (_this.props.portal_id) {\\n        document.removeEventListener(\\'mousedown\\', _this.handleClickOutside);\\n      }\\n    };\\n\\n    _this.handleClickOutside = function (event) {\\n      var path = event.path || event.composedPath && event.composedPath();\\n\\n      if (_this.props.portal_id && _this.props.is_open && _this.ref.current && !path.some(function (el) {\\n        return el === _this.ref.current;\\n      })) {\\n        _this.props.onClickClose();\\n      }\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(PageOverlay, [{\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props = this.props,\\n          children = _this$props.children,\\n          header = _this$props.header,\\n          id = _this$props.id,\\n          onClickClose = _this$props.onClickClose,\\n          portal_id = _this$props.portal_id,\\n          is_open = _this$props.is_open;\\n      var el_page_overlay = external_react_[\"createElement\"](\"div\", {\\n        ref: this.ref,\\n        id: id,\\n        className: external_classnames_default()(\\'dc-page-overlay\\', {\\n          \\'dc-page-overlay-portal\\': !!portal_id\\n        })\\n      }, header && external_react_[\"createElement\"](\"div\", {\\n        className: \"dc-page-overlay__header\"\\n      }, external_react_[\"createElement\"](\"div\", {\\n        className: \"dc-page-overlay__header-wrapper\"\\n      }, external_react_[\"createElement\"](\"div\", {\\n        className: \"dc-page-overlay__header-title\"\\n      }, header), external_react_[\"createElement\"](\"div\", {\\n        className: \"dc-page-overlay__header-close\",\\n        onClick: onClickClose || window.history.back\\n      }, external_react_[\"createElement\"](icon[\"a\" /* default */], {\\n        icon: \"IcCross\"\\n      })))), external_react_[\"createElement\"](\"div\", {\\n        className: \"dc-page-overlay__content\"\\n      }, children));\\n\\n      if (portal_id) {\\n        return external_react_dom_default.a.createPortal(external_react_[\"createElement\"](external_react_transition_group_[\"CSSTransition\"], {\\n          appear: true,\\n          \"in\": is_open,\\n          timeout: 250,\\n          classNames: {\\n            appear: \\'dc-page-overlay--enter\\',\\n            enter: \\'dc-page-overlay--enter\\',\\n            enterDone: \\'dc-page-overlay--enter-done\\',\\n            exit: \\'dc-page-overlay--exit\\'\\n          },\\n          unmountOnExit: true\\n        }, el_page_overlay), document.getElementById(portal_id));\\n      }\\n\\n      return external_react_[\"createElement\"](external_react_[\"Fragment\"], null, el_page_overlay);\\n    }\\n  }]);\\n\\n  return PageOverlay;\\n}(external_react_[\"Component\"]);\\n\\npage_overlay_PageOverlay.defaultProps = {\\n  has_side_note: false\\n};\\npage_overlay_PageOverlay.propTypes = {\\n  children: external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.node), external_prop_types_default.a.node]),\\n  header: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.node]),\\n  id: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number]),\\n  onClickClose: external_prop_types_default.a.func,\\n  portal_id: external_prop_types_default.a.string,\\n  is_open: external_prop_types_default.a.bool\\n};\\n/* harmony default export */ var page_overlay = (page_overlay_PageOverlay);\\n// EXTERNAL MODULE: ./src/components/page-overlay/page-overlay.scss\\nvar page_overlay_page_overlay = __webpack_require__(82);\\n\\n// CONCATENATED MODULE: ./src/components/page-overlay/index.js\\n\\n\\n/* harmony default export */ var components_page_overlay = __webpack_exports__[\"default\"] = (page_overlay);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3BhZ2Utb3ZlcmxheS9wYWdlLW92ZXJsYXkuanN4P2YwMGUiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3BhZ2Utb3ZlcmxheS9pbmRleC5qcz9hNTc0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJY29uIGZyb20gJ0NvbXBvbmVudHMvaWNvbi9pY29uLmpzeCc7XG5cbmNsYXNzIFBhZ2VPdmVybGF5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICByZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcblxuICAgIGNvbXBvbmVudERpZE1vdW50ID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5wb3J0YWxfaWQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucG9ydGFsX2lkKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmhhbmRsZUNsaWNrT3V0c2lkZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlQ2xpY2tPdXRzaWRlID0gZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBwYXRoID0gZXZlbnQucGF0aCB8fCAoZXZlbnQuY29tcG9zZWRQYXRoICYmIGV2ZW50LmNvbXBvc2VkUGF0aCgpKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5wb3J0YWxfaWQgJiZcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaXNfb3BlbiAmJlxuICAgICAgICAgICAgdGhpcy5yZWYuY3VycmVudCAmJlxuICAgICAgICAgICAgIXBhdGguc29tZShlbCA9PiBlbCA9PT0gdGhpcy5yZWYuY3VycmVudClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2tDbG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiwgaGVhZGVyLCBpZCwgb25DbGlja0Nsb3NlLCBwb3J0YWxfaWQsIGlzX29wZW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgY29uc3QgZWxfcGFnZV9vdmVybGF5ID0gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHJlZj17dGhpcy5yZWZ9XG4gICAgICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZGMtcGFnZS1vdmVybGF5Jywge1xuICAgICAgICAgICAgICAgICAgICAnZGMtcGFnZS1vdmVybGF5LXBvcnRhbCc6ICEhcG9ydGFsX2lkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtoZWFkZXIgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGMtcGFnZS1vdmVybGF5X19oZWFkZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2RjLXBhZ2Utb3ZlcmxheV9faGVhZGVyLXdyYXBwZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkYy1wYWdlLW92ZXJsYXlfX2hlYWRlci10aXRsZSc+e2hlYWRlcn08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZGMtcGFnZS1vdmVybGF5X19oZWFkZXItY2xvc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2tDbG9zZSB8fCB3aW5kb3cuaGlzdG9yeS5iYWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gaWNvbj0nSWNDcm9zcycgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkYy1wYWdlLW92ZXJsYXlfX2NvbnRlbnQnPntjaGlsZHJlbn08L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChwb3J0YWxfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgICAgICAgICAgICAgPENTU1RyYW5zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgYXBwZWFyXG4gICAgICAgICAgICAgICAgICAgIGluPXtpc19vcGVufVxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PXsyNTB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZXM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcjogJ2RjLXBhZ2Utb3ZlcmxheS0tZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXI6ICdkYy1wYWdlLW92ZXJsYXktLWVudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGVyRG9uZTogJ2RjLXBhZ2Utb3ZlcmxheS0tZW50ZXItZG9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGl0OiAnZGMtcGFnZS1vdmVybGF5LS1leGl0JyxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudE9uRXhpdFxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2VsX3BhZ2Vfb3ZlcmxheX1cbiAgICAgICAgICAgICAgICA8L0NTU1RyYW5zaXRpb24+LFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvcnRhbF9pZClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPD57ZWxfcGFnZV9vdmVybGF5fTwvPjtcbiAgICB9XG59XG5cblBhZ2VPdmVybGF5LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBoYXNfc2lkZV9ub3RlOiBmYWxzZSxcbn07XG5cblBhZ2VPdmVybGF5LnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGhlYWRlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBpZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIG9uQ2xpY2tDbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcG9ydGFsX2lkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzX29wZW46IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFnZU92ZXJsYXk7XG4iLCJpbXBvcnQgUGFnZU92ZXJsYXkgZnJvbSAnLi9wYWdlLW92ZXJsYXkuanN4JztcbmltcG9ydCAnLi9wYWdlLW92ZXJsYXkuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2VPdmVybGF5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUlBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUhBO0FBUUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUZBO0FBSUE7QUFBQTtBQUtBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQVZBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBNUVBO0FBQ0E7QUE4RUE7QUFDQTtBQURBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVNBOzs7OztBQ25HQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///140\\n')},17:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__17__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3QtZG9tXCI/NWU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE3X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///17\\n\")},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},4:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);\\n/* harmony import */ var _deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3__);\\n\\n\\n\\n // TODO: [move-to-shared]\\n\\nvar getUrlBase = function getUrlBase() {\\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\\n  var l = window.location;\\n  if (!/^\\\\/(br_)/.test(l.pathname)) return path;\\n  return \\\"/\\\".concat(l.pathname.split('/')[1]).concat(/^\\\\//.test(path) ? path : \\\"/\\\".concat(path));\\n};\\n\\nvar Icon = function Icon(_ref) {\\n  var className = _ref.className,\\n      color = _ref.color,\\n      custom_color = _ref.custom_color,\\n      height = _ref.height,\\n      icon = _ref.icon,\\n      id = _ref.id,\\n      onClick = _ref.onClick,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave,\\n      _ref$size = _ref.size,\\n      size = _ref$size === void 0 ? 16 : _ref$size,\\n      width = _ref.width;\\n  if (!icon) return null;\\n  var filename = 'common';\\n  var filenames = /^Ic(Currency|Tradetype|Mt5|Flag|Underlying)/g.exec(icon);\\n\\n  if (filenames) {\\n    filename = Object(_deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3__[\\\"getKebabCase\\\"])(filenames[1]);\\n  }\\n\\n  var sprite_id = icon.startsWith('IcUnderlying') ? \\\"ic-underlying-\\\".concat(icon.split('IcUnderlying')[1].toUpperCase()) : Object(_deriv_shared_utils_string__WEBPACK_IMPORTED_MODULE_3__[\\\"getKebabCase\\\"])(icon);\\n  return react__WEBPACK_IMPORTED_MODULE_2__[\\\"createElement\\\"](\\\"svg\\\", {\\n    xmlns: \\\"http://www.w3.org/2000/svg\\\",\\n    xmlnsXlink: \\\"http://www.w3.org/1999/xlink\\\",\\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('dc-icon', className, {\\n      'dc-icon--active': color === 'active',\\n      'dc-icon--disabled': color === 'disabled',\\n      'dc-icon--green': color === 'green' || icon === 'IcProfit',\\n      'dc-icon--red': color === 'red' || icon === 'IcLoss',\\n      'dc-icon--secondary': color === 'secondary',\\n      'dc-icon--brand': color === 'brand'\\n    }),\\n    height: height || size,\\n    id: id,\\n    width: width || size,\\n    onClick: onClick,\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    style: custom_color ? {\\n      '--fill-color1': custom_color\\n    } : undefined\\n  }, react__WEBPACK_IMPORTED_MODULE_2__[\\\"createElement\\\"](\\\"use\\\", {\\n    xlinkHref: \\\"\\\".concat(getUrlBase(\\\"/public/images/sprite/\\\".concat(filename, \\\".svg\\\")), \\\"#\\\").concat(sprite_id)\\n  }));\\n};\\n\\nIcon.propTypes = {\\n  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  color: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  custom_color: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  height: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  icon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  onClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,\\n  size: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string]),\\n  width: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number, prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string])\\n};\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = (react__WEBPACK_IMPORTED_MODULE_2__[\\\"memo\\\"](Icon));//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4PzJhYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEtlYmFiQ2FzZSB9IGZyb20gJ0BkZXJpdi9zaGFyZWQvdXRpbHMvc3RyaW5nJztcblxuLy8gVE9ETzogW21vdmUtdG8tc2hhcmVkXVxuY29uc3QgZ2V0VXJsQmFzZSA9IChwYXRoID0gJycpID0+IHtcbiAgICBjb25zdCBsID0gd2luZG93LmxvY2F0aW9uO1xuXG4gICAgaWYgKCEvXlxcLyhicl8pLy50ZXN0KGwucGF0aG5hbWUpKSByZXR1cm4gcGF0aDtcblxuICAgIHJldHVybiBgLyR7bC5wYXRobmFtZS5zcGxpdCgnLycpWzFdfSR7L15cXC8vLnRlc3QocGF0aCkgPyBwYXRoIDogYC8ke3BhdGh9YH1gO1xufTtcblxuY29uc3QgSWNvbiA9ICh7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yLFxuICAgIGN1c3RvbV9jb2xvcixcbiAgICBoZWlnaHQsXG4gICAgaWNvbixcbiAgICBpZCxcbiAgICBvbkNsaWNrLFxuICAgIG9uTW91c2VFbnRlcixcbiAgICBvbk1vdXNlTGVhdmUsXG4gICAgc2l6ZSA9IDE2LFxuICAgIHdpZHRoLFxufSkgPT4ge1xuICAgIGlmICghaWNvbikgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgZmlsZW5hbWUgPSAnY29tbW9uJztcbiAgICBjb25zdCBmaWxlbmFtZXMgPSAvXkljKEN1cnJlbmN5fFRyYWRldHlwZXxNdDV8RmxhZ3xVbmRlcmx5aW5nKS9nLmV4ZWMoaWNvbik7XG4gICAgaWYgKGZpbGVuYW1lcykge1xuICAgICAgICBmaWxlbmFtZSA9IGdldEtlYmFiQ2FzZShmaWxlbmFtZXNbMV0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNwcml0ZV9pZCA9IGljb24uc3RhcnRzV2l0aCgnSWNVbmRlcmx5aW5nJylcbiAgICAgICAgPyBgaWMtdW5kZXJseWluZy0ke2ljb24uc3BsaXQoJ0ljVW5kZXJseWluZycpWzFdLnRvVXBwZXJDYXNlKCl9YFxuICAgICAgICA6IGdldEtlYmFiQ2FzZShpY29uKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxzdmdcbiAgICAgICAgICAgIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbiAgICAgICAgICAgIHhtbG5zWGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLWljb24nLCBjbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tYWN0aXZlJzogY29sb3IgPT09ICdhY3RpdmUnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1kaXNhYmxlZCc6IGNvbG9yID09PSAnZGlzYWJsZWQnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1ncmVlbic6IGNvbG9yID09PSAnZ3JlZW4nIHx8IGljb24gPT09ICdJY1Byb2ZpdCcsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLXJlZCc6IGNvbG9yID09PSAncmVkJyB8fCBpY29uID09PSAnSWNMb3NzJyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tc2Vjb25kYXJ5JzogY29sb3IgPT09ICdzZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1icmFuZCc6IGNvbG9yID09PSAnYnJhbmQnLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICBoZWlnaHQ9e2hlaWdodCB8fCBzaXplfVxuICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgd2lkdGg9e3dpZHRoIHx8IHNpemV9XG4gICAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgICAgb25Nb3VzZUVudGVyPXtvbk1vdXNlRW50ZXJ9XG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU9e29uTW91c2VMZWF2ZX1cbiAgICAgICAgICAgIHN0eWxlPXtcbiAgICAgICAgICAgICAgICBjdXN0b21fY29sb3JcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICctLWZpbGwtY29sb3IxJzogY3VzdG9tX2NvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgPlxuICAgICAgICAgICAgPHVzZSB4bGlua0hyZWY9e2Ake2dldFVybEJhc2UoYC9wdWJsaWMvaW1hZ2VzL3Nwcml0ZS8ke2ZpbGVuYW1lfS5zdmdgKX0jJHtzcHJpdGVfaWR9YH0gLz5cbiAgICAgICAgPC9zdmc+XG4gICAgKTtcbn07XG5cbkljb24ucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGNvbG9yOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGN1c3RvbV9jb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBoZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oSWNvbik7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFuQkE7QUF5QkE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFhQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///4\\n\")},5:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__5__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJAZGVyaXYvc2hhcmVkL3V0aWxzL3N0cmluZ1wiP2U2MDgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///5\\n\")},8:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__8__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzhfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///8\\n\")},82:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvcGFnZS1vdmVybGF5L3BhZ2Utb3ZlcmxheS5zY3NzP2Y1OWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU5MDQ4NDA1ODIwMFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///82\\n\")}}).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvcGFnZS1vdmVybGF5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy92YXIvd3d3L2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9wYWdlLW92ZXJsYXkuanM/NWViYSJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSxuKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1uKHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSxyZXF1aXJlKFwiQGRlcml2L3NoYXJlZC91dGlscy9zdHJpbmdcIikscmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIikscmVxdWlyZShcInJlYWN0LWRvbVwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJwcm9wLXR5cGVzXCIsXCJyZWFjdFwiLFwiY2xhc3NuYW1lc1wiLFwiQGRlcml2L3NoYXJlZC91dGlscy9zdHJpbmdcIixcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIixcInJlYWN0LWRvbVwiXSxuKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzW1wiQGRlcml2L2NvbXBvbmVudFwiXT1uKHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSxyZXF1aXJlKFwiQGRlcml2L3NoYXJlZC91dGlscy9zdHJpbmdcIikscmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIikscmVxdWlyZShcInJlYWN0LWRvbVwiKSk6ZVtcIkBkZXJpdi9jb21wb25lbnRcIl09bihlW1wicHJvcC10eXBlc1wiXSxlLnJlYWN0LGUuY2xhc3NuYW1lcyxlW1wiQGRlcml2L3NoYXJlZC91dGlscy9zdHJpbmdcIl0sZVtcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIl0sZVtcInJlYWN0LWRvbVwiXSl9KHdpbmRvdyxmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18sX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fLF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXyxfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X18sX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fOF9fLF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE3X18pe3JldHVybiBmdW5jdGlvbihlKXt2YXIgbj17fTtmdW5jdGlvbiB0KF8pe2lmKG5bX10pcmV0dXJuIG5bX10uZXhwb3J0czt2YXIgcj1uW19dPXtpOl8sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtfXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyx0KSxyLmw9ITAsci5leHBvcnRzfXJldHVybiB0Lm09ZSx0LmM9bix0LmQ9ZnVuY3Rpb24oZSxuLF8pe3QubyhlLG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtlbnVtZXJhYmxlOiEwLGdldDpffSl9LHQucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSx0LnQ9ZnVuY3Rpb24oZSxuKXtpZigxJm4mJihlPXQoZSkpLDgmbilyZXR1cm4gZTtpZig0Jm4mJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIF89T2JqZWN0LmNyZWF0ZShudWxsKTtpZih0LnIoXyksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImbiYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciByIGluIGUpdC5kKF8scixmdW5jdGlvbihuKXtyZXR1cm4gZVtuXX0uYmluZChudWxsLHIpKTtyZXR1cm4gX30sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobixcImFcIixuKSxufSx0Lm89ZnVuY3Rpb24oZSxuKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbil9LHQucD1cIlwiLHQodC5zPTE0MCl9KHswOmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTUM1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqYjIxd2IyNWxiblF2WlhoMFpYSnVZV3dnWENKd2NtOXdMWFI1Y0dWelhDSS9Nemd6TWlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZlh6QmZYenNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzBcXG5cIil9LDE6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNUzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZaWGgwWlhKdVlXd2dYQ0p5WldGamRGd2lQelU0T0dVaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmZYMWRGUWxCQlEwdGZSVmhVUlZKT1FVeGZUVTlFVlV4RlgxOHhYMTg3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8xXFxuXCIpfSwxNDA6ZnVuY3Rpb24obW9kdWxlLF9fd2VicGFja19leHBvcnRzX18sX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZXZhbCgnX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCJcXG52YXIgZXh0ZXJuYWxfY2xhc3NuYW1lc18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xcbnZhciBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX2NsYXNzbmFtZXNfKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwicmVhY3RcIlxcbnZhciBleHRlcm5hbF9yZWFjdF8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJyZWFjdC1kb21cIlxcbnZhciBleHRlcm5hbF9yZWFjdF9kb21fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RvbV9kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9yZWFjdF9kb21fKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cFwiXFxudmFyIGV4dGVybmFsX3JlYWN0X3RyYW5zaXRpb25fZ3JvdXBfID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwicHJvcC10eXBlc1wiXFxudmFyIGV4dGVybmFsX3Byb3BfdHlwZXNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcXG52YXIgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9wcm9wX3R5cGVzXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2ljb24vaWNvbi5qc3hcXG52YXIgaWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9wYWdlLW92ZXJsYXkvcGFnZS1vdmVybGF5LmpzeFxcbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxudmFyIHBhZ2Vfb3ZlcmxheV9QYWdlT3ZlcmxheSA9XFxuLyojX19QVVJFX18qL1xcbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XFxuICBfaW5oZXJpdHMoUGFnZU92ZXJsYXksIF9SZWFjdCRDb21wb25lbnQpO1xcblxcbiAgZnVuY3Rpb24gUGFnZU92ZXJsYXkoKSB7XFxuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xcblxcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYWdlT3ZlcmxheSk7XFxuXFxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XFxuICAgIH1cXG5cXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihQYWdlT3ZlcmxheSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xcbiAgICBfdGhpcy5yZWYgPSBleHRlcm5hbF9yZWFjdF9bXCJjcmVhdGVSZWZcIl0oKTtcXG5cXG4gICAgX3RoaXMuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgaWYgKF90aGlzLnByb3BzLnBvcnRhbF9pZCkge1xcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcXCdtb3VzZWRvd25cXCcsIF90aGlzLmhhbmRsZUNsaWNrT3V0c2lkZSk7XFxuICAgICAgfVxcbiAgICB9O1xcblxcbiAgICBfdGhpcy5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICBpZiAoX3RoaXMucHJvcHMucG9ydGFsX2lkKSB7XFxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxcJ21vdXNlZG93blxcJywgX3RoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlKTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIF90aGlzLmhhbmRsZUNsaWNrT3V0c2lkZSA9IGZ1bmN0aW9uIChldmVudCkge1xcbiAgICAgIHZhciBwYXRoID0gZXZlbnQucGF0aCB8fCBldmVudC5jb21wb3NlZFBhdGggJiYgZXZlbnQuY29tcG9zZWRQYXRoKCk7XFxuXFxuICAgICAgaWYgKF90aGlzLnByb3BzLnBvcnRhbF9pZCAmJiBfdGhpcy5wcm9wcy5pc19vcGVuICYmIF90aGlzLnJlZi5jdXJyZW50ICYmICFwYXRoLnNvbWUoZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICByZXR1cm4gZWwgPT09IF90aGlzLnJlZi5jdXJyZW50O1xcbiAgICAgIH0pKSB7XFxuICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrQ2xvc2UoKTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIHJldHVybiBfdGhpcztcXG4gIH1cXG5cXG4gIF9jcmVhdGVDbGFzcyhQYWdlT3ZlcmxheSwgW3tcXG4gICAga2V5OiBcInJlbmRlclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXFxuICAgICAgICAgIGhlYWRlciA9IF90aGlzJHByb3BzLmhlYWRlcixcXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcXG4gICAgICAgICAgb25DbGlja0Nsb3NlID0gX3RoaXMkcHJvcHMub25DbGlja0Nsb3NlLFxcbiAgICAgICAgICBwb3J0YWxfaWQgPSBfdGhpcyRwcm9wcy5wb3J0YWxfaWQsXFxuICAgICAgICAgIGlzX29wZW4gPSBfdGhpcyRwcm9wcy5pc19vcGVuO1xcbiAgICAgIHZhciBlbF9wYWdlX292ZXJsYXkgPSBleHRlcm5hbF9yZWFjdF9bXCJjcmVhdGVFbGVtZW50XCJdKFwiZGl2XCIsIHtcXG4gICAgICAgIHJlZjogdGhpcy5yZWYsXFxuICAgICAgICBpZDogaWQsXFxuICAgICAgICBjbGFzc05hbWU6IGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCgpKFxcJ2RjLXBhZ2Utb3ZlcmxheVxcJywge1xcbiAgICAgICAgICBcXCdkYy1wYWdlLW92ZXJsYXktcG9ydGFsXFwnOiAhIXBvcnRhbF9pZFxcbiAgICAgICAgfSlcXG4gICAgICB9LCBoZWFkZXIgJiYgZXh0ZXJuYWxfcmVhY3RfW1wiY3JlYXRlRWxlbWVudFwiXShcImRpdlwiLCB7XFxuICAgICAgICBjbGFzc05hbWU6IFwiZGMtcGFnZS1vdmVybGF5X19oZWFkZXJcIlxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X1tcImNyZWF0ZUVsZW1lbnRcIl0oXCJkaXZcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBcImRjLXBhZ2Utb3ZlcmxheV9faGVhZGVyLXdyYXBwZXJcIlxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X1tcImNyZWF0ZUVsZW1lbnRcIl0oXCJkaXZcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBcImRjLXBhZ2Utb3ZlcmxheV9faGVhZGVyLXRpdGxlXCJcXG4gICAgICB9LCBoZWFkZXIpLCBleHRlcm5hbF9yZWFjdF9bXCJjcmVhdGVFbGVtZW50XCJdKFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogXCJkYy1wYWdlLW92ZXJsYXlfX2hlYWRlci1jbG9zZVwiLFxcbiAgICAgICAgb25DbGljazogb25DbGlja0Nsb3NlIHx8IHdpbmRvdy5oaXN0b3J5LmJhY2tcXG4gICAgICB9LCBleHRlcm5hbF9yZWFjdF9bXCJjcmVhdGVFbGVtZW50XCJdKGljb25bXCJhXCIgLyogZGVmYXVsdCAqL10sIHtcXG4gICAgICAgIGljb246IFwiSWNDcm9zc1wiXFxuICAgICAgfSkpKSksIGV4dGVybmFsX3JlYWN0X1tcImNyZWF0ZUVsZW1lbnRcIl0oXCJkaXZcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBcImRjLXBhZ2Utb3ZlcmxheV9fY29udGVudFwiXFxuICAgICAgfSwgY2hpbGRyZW4pKTtcXG5cXG4gICAgICBpZiAocG9ydGFsX2lkKSB7XFxuICAgICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZG9tX2RlZmF1bHQuYS5jcmVhdGVQb3J0YWwoZXh0ZXJuYWxfcmVhY3RfW1wiY3JlYXRlRWxlbWVudFwiXShleHRlcm5hbF9yZWFjdF90cmFuc2l0aW9uX2dyb3VwX1tcIkNTU1RyYW5zaXRpb25cIl0sIHtcXG4gICAgICAgICAgYXBwZWFyOiB0cnVlLFxcbiAgICAgICAgICBcImluXCI6IGlzX29wZW4sXFxuICAgICAgICAgIHRpbWVvdXQ6IDI1MCxcXG4gICAgICAgICAgY2xhc3NOYW1lczoge1xcbiAgICAgICAgICAgIGFwcGVhcjogXFwnZGMtcGFnZS1vdmVybGF5LS1lbnRlclxcJyxcXG4gICAgICAgICAgICBlbnRlcjogXFwnZGMtcGFnZS1vdmVybGF5LS1lbnRlclxcJyxcXG4gICAgICAgICAgICBlbnRlckRvbmU6IFxcJ2RjLXBhZ2Utb3ZlcmxheS0tZW50ZXItZG9uZVxcJyxcXG4gICAgICAgICAgICBleGl0OiBcXCdkYy1wYWdlLW92ZXJsYXktLWV4aXRcXCdcXG4gICAgICAgICAgfSxcXG4gICAgICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZVxcbiAgICAgICAgfSwgZWxfcGFnZV9vdmVybGF5KSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocG9ydGFsX2lkKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBleHRlcm5hbF9yZWFjdF9bXCJjcmVhdGVFbGVtZW50XCJdKGV4dGVybmFsX3JlYWN0X1tcIkZyYWdtZW50XCJdLCBudWxsLCBlbF9wYWdlX292ZXJsYXkpO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gUGFnZU92ZXJsYXk7XFxufShleHRlcm5hbF9yZWFjdF9bXCJDb21wb25lbnRcIl0pO1xcblxcbnBhZ2Vfb3ZlcmxheV9QYWdlT3ZlcmxheS5kZWZhdWx0UHJvcHMgPSB7XFxuICBoYXNfc2lkZV9ub3RlOiBmYWxzZVxcbn07XFxucGFnZV9vdmVybGF5X1BhZ2VPdmVybGF5LnByb3BUeXBlcyA9IHtcXG4gIGNoaWxkcmVuOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmFycmF5T2YoZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubm9kZSksIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm5vZGVdKSxcXG4gIGhlYWRlcjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm5vZGVdKSxcXG4gIGlkOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZywgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyXSksXFxuICBvbkNsaWNrQ2xvc2U6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmZ1bmMsXFxuICBwb3J0YWxfaWQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGlzX29wZW46IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2xcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHBhZ2Vfb3ZlcmxheSA9IChwYWdlX292ZXJsYXlfUGFnZU92ZXJsYXkpO1xcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9wYWdlLW92ZXJsYXkvcGFnZS1vdmVybGF5LnNjc3NcXG52YXIgcGFnZV9vdmVybGF5X3BhZ2Vfb3ZlcmxheSA9IF9fd2VicGFja19yZXF1aXJlX18oODIpO1xcblxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvcGFnZS1vdmVybGF5L2luZGV4LmpzXFxuXFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY29tcG9uZW50c19wYWdlX292ZXJsYXkgPSBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChwYWdlX292ZXJsYXkpOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UUXdMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTnZiWEJ2Ym1WdWRDOHVMM055WXk5amIyMXdiMjVsYm5SekwzQmhaMlV0YjNabGNteGhlUzl3WVdkbExXOTJaWEpzWVhrdWFuTjRQMll3TUdVaUxDSjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTnZiWEJ2Ym1WdWRDOHVMM055WXk5amIyMXdiMjVsYm5SekwzQmhaMlV0YjNabGNteGhlUzlwYm1SbGVDNXFjejloTlRjMElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQmpiR0Z6YzA1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JTWldGamRFUlBUU0JtY205dElDZHlaV0ZqZEMxa2IyMG5PMXh1YVcxd2IzSjBJSHNnUTFOVFZISmhibk5wZEdsdmJpQjlJR1p5YjIwZ0ozSmxZV04wTFhSeVlXNXphWFJwYjI0dFozSnZkWEFuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCSlkyOXVJR1p5YjIwZ0owTnZiWEJ2Ym1WdWRITXZhV052Ymk5cFkyOXVMbXB6ZUNjN1hHNWNibU5zWVhOeklGQmhaMlZQZG1WeWJHRjVJR1Y0ZEdWdVpITWdVbVZoWTNRdVEyOXRjRzl1Wlc1MElIdGNiaUFnSUNCeVpXWWdQU0JTWldGamRDNWpjbVZoZEdWU1pXWW9LVHRjYmx4dUlDQWdJR052YlhCdmJtVnVkRVJwWkUxdmRXNTBJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y205d2N5NXdiM0owWVd4ZmFXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sWkc5M2JpY3NJSFJvYVhNdWFHRnVaR3hsUTJ4cFkydFBkWFJ6YVdSbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjF3YjI1bGJuUlhhV3hzVlc1dGIzVnVkQ0E5SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVjRzl5ZEdGc1gybGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R0YjNWelpXUnZkMjRuTENCMGFHbHpMbWhoYm1Sc1pVTnNhV05yVDNWMGMybGtaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnYUdGdVpHeGxRMnhwWTJ0UGRYUnphV1JsSUQwZ1pYWmxiblFnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYUm9JRDBnWlhabGJuUXVjR0YwYUNCOGZDQW9aWFpsYm5RdVkyOXRjRzl6WldSUVlYUm9JQ1ltSUdWMlpXNTBMbU52YlhCdmMyVmtVR0YwYUNncEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTV3YjNKMFlXeGZhV1FnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11YVhOZmIzQmxiaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXWXVZM1Z5Y21WdWRDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lYQmhkR2d1YzI5dFpTaGxiQ0E5UGlCbGJDQTlQVDBnZEdocGN5NXlaV1l1WTNWeWNtVnVkQ2xjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG05dVEyeHBZMnREYkc5elpTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJqYUdsc1pISmxiaXdnYUdWaFpHVnlMQ0JwWkN3Z2IyNURiR2xqYTBOc2IzTmxMQ0J3YjNKMFlXeGZhV1FzSUdselgyOXdaVzRnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaV3hmY0dGblpWOXZkbVZ5YkdGNUlEMGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWmoxN2RHaHBjeTV5WldaOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTllMmxrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbGN5Z25aR010Y0dGblpTMXZkbVZ5YkdGNUp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblpHTXRjR0ZuWlMxdmRtVnliR0Y1TFhCdmNuUmhiQ2M2SUNFaGNHOXlkR0ZzWDJsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdG9aV0ZrWlhJZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDBuWkdNdGNHRm5aUzF2ZG1WeWJHRjVYMTlvWldGa1pYSW5QbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOUoyUmpMWEJoWjJVdGIzWmxjbXhoZVY5ZmFHVmhaR1Z5TFhkeVlYQndaWEluUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFNka1l5MXdZV2RsTFc5MlpYSnNZWGxmWDJobFlXUmxjaTEwYVhSc1pTYytlMmhsWVdSbGNuMDhMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDBuWkdNdGNHRm5aUzF2ZG1WeWJHRjVYMTlvWldGa1pYSXRZMnh2YzJVblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTI5dVEyeHBZMnREYkc5elpTQjhmQ0IzYVc1a2IzY3VhR2x6ZEc5eWVTNWlZV05yZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BFbGpiMjRnYVdOdmJqMG5TV05EY205emN5Y2dMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBTZGtZeTF3WVdkbExXOTJaWEpzWVhsZlgyTnZiblJsYm5RblBudGphR2xzWkhKbGJuMDhMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHdiM0owWVd4ZmFXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCU1pXRmpkRVJQVFM1amNtVmhkR1ZRYjNKMFlXd29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRU5UVTFSeVlXNXphWFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEJ3WldGeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1UFh0cGMxOXZjR1Z1ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhVzFsYjNWMFBYc3lOVEI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpYTTllM3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z3Y0dWaGNqb2dKMlJqTFhCaFoyVXRiM1psY214aGVTMHRaVzUwWlhJbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNTBaWEk2SUNka1l5MXdZV2RsTFc5MlpYSnNZWGt0TFdWdWRHVnlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1ZEdWeVJHOXVaVG9nSjJSakxYQmhaMlV0YjNabGNteGhlUzB0Wlc1MFpYSXRaRzl1WlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGVHbDBPaUFuWkdNdGNHRm5aUzF2ZG1WeWJHRjVMUzFsZUdsMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkVzV0YjNWdWRFOXVSWGhwZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMlZzWDNCaFoyVmZiM1psY214aGVYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMME5UVTFSeVlXNXphWFJwYjI0K0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0hCdmNuUmhiRjlwWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1BENTdaV3hmY0dGblpWOXZkbVZ5YkdGNWZUd3ZQanRjYmlBZ0lDQjlYRzU5WEc1Y2JsQmhaMlZQZG1WeWJHRjVMbVJsWm1GMWJIUlFjbTl3Y3lBOUlIdGNiaUFnSUNCb1lYTmZjMmxrWlY5dWIzUmxPaUJtWVd4elpTeGNibjA3WEc1Y2JsQmhaMlZQZG1WeWJHRjVMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JqYUdsc1pISmxiam9nVUhKdmNGUjVjR1Z6TG05dVpVOW1WSGx3WlNoYlVISnZjRlI1Y0dWekxtRnljbUY1VDJZb1VISnZjRlI1Y0dWekxtNXZaR1VwTENCUWNtOXdWSGx3WlhNdWJtOWtaVjBwTEZ4dUlDQWdJR2hsWVdSbGNqb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXdnVUhKdmNGUjVjR1Z6TG01dlpHVmRLU3hjYmlBZ0lDQnBaRG9nVUhKdmNGUjVjR1Z6TG05dVpVOW1WSGx3WlNoYlVISnZjRlI1Y0dWekxuTjBjbWx1Wnl3Z1VISnZjRlI1Y0dWekxtNTFiV0psY2wwcExGeHVJQ0FnSUc5dVEyeHBZMnREYkc5elpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnY0c5eWRHRnNYMmxrT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR2x6WDI5d1pXNDZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVUdGblpVOTJaWEpzWVhrN1hHNGlMQ0pwYlhCdmNuUWdVR0ZuWlU5MlpYSnNZWGtnWm5KdmJTQW5MaTl3WVdkbExXOTJaWEpzWVhrdWFuTjRKenRjYm1sdGNHOXlkQ0FuTGk5d1lXZGxMVzkyWlhKc1lYa3VjMk56Y3ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGQmhaMlZQZG1WeWJHRjVPMXh1SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3T3pzN096dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVWxCTzBGQlFVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN08wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVkQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZFUVR0QlFVaEJPMEZCVVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlJVRTdRVUZEUVR0QlFVWkJPMEZCU1VFN1FVRkJRVHRCUVV0Qk8wRkJRVUU3UVVGRFFUdEJRVWRCTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlNrRTdRVUZOUVR0QlFWWkJPMEZCWjBKQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkJOVVZCTzBGQlEwRTdRVUU0UlVFN1FVRkRRVHRCUVVSQk8wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRk9RVHRCUVZOQk96czdPenRCUTI1SFFUdEJRVU5CTzBGQlJVRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMTQwXFxuJyl9LDE3OmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xN19fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UY3Vhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUFaR1Z5YVhZdlkyOXRjRzl1Wlc1MEwyVjRkR1Z5Ym1Gc0lGd2ljbVZoWTNRdFpHOXRYQ0kvTldVNVlTSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmVjBWQ1VFRkRTMTlGV0ZSRlVrNUJURjlOVDBSVlRFVmZYekUzWDE4N0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMTdcXG5cIil9LDI6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNaTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZaWGgwWlhKdVlXd2dYQ0pqYkdGemMyNWhiV1Z6WENJL1lXRmhZaUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5ZlYwVkNVRUZEUzE5RldGUkZVazVCVEY5TlQwUlZURVZmWHpKZlh6c2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMlxcblwiKX0sNDpmdW5jdGlvbihtb2R1bGUsX193ZWJwYWNrX2V4cG9ydHNfXyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtldmFsKFwiLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGNsYXNzbmFtZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGNsYXNzbmFtZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihjbGFzc25hbWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4ocHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4ocmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9zaGFyZWRfdXRpbHNfc3RyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGVyaXZfc2hhcmVkX3V0aWxzX3N0cmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9kZXJpdl9zaGFyZWRfdXRpbHNfc3RyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18pO1xcblxcblxcblxcbiAvLyBUT0RPOiBbbW92ZS10by1zaGFyZWRdXFxuXFxudmFyIGdldFVybEJhc2UgPSBmdW5jdGlvbiBnZXRVcmxCYXNlKCkge1xcbiAgdmFyIHBhdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xcbiAgdmFyIGwgPSB3aW5kb3cubG9jYXRpb247XFxuICBpZiAoIS9eXFxcXC8oYnJfKS8udGVzdChsLnBhdGhuYW1lKSkgcmV0dXJuIHBhdGg7XFxuICByZXR1cm4gXFxcIi9cXFwiLmNvbmNhdChsLnBhdGhuYW1lLnNwbGl0KCcvJylbMV0pLmNvbmNhdCgvXlxcXFwvLy50ZXN0KHBhdGgpID8gcGF0aCA6IFxcXCIvXFxcIi5jb25jYXQocGF0aCkpO1xcbn07XFxuXFxudmFyIEljb24gPSBmdW5jdGlvbiBJY29uKF9yZWYpIHtcXG4gIHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcXG4gICAgICBjb2xvciA9IF9yZWYuY29sb3IsXFxuICAgICAgY3VzdG9tX2NvbG9yID0gX3JlZi5jdXN0b21fY29sb3IsXFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXFxuICAgICAgaWNvbiA9IF9yZWYuaWNvbixcXG4gICAgICBpZCA9IF9yZWYuaWQsXFxuICAgICAgb25DbGljayA9IF9yZWYub25DbGljayxcXG4gICAgICBvbk1vdXNlRW50ZXIgPSBfcmVmLm9uTW91c2VFbnRlcixcXG4gICAgICBvbk1vdXNlTGVhdmUgPSBfcmVmLm9uTW91c2VMZWF2ZSxcXG4gICAgICBfcmVmJHNpemUgPSBfcmVmLnNpemUsXFxuICAgICAgc2l6ZSA9IF9yZWYkc2l6ZSA9PT0gdm9pZCAwID8gMTYgOiBfcmVmJHNpemUsXFxuICAgICAgd2lkdGggPSBfcmVmLndpZHRoO1xcbiAgaWYgKCFpY29uKSByZXR1cm4gbnVsbDtcXG4gIHZhciBmaWxlbmFtZSA9ICdjb21tb24nO1xcbiAgdmFyIGZpbGVuYW1lcyA9IC9eSWMoQ3VycmVuY3l8VHJhZGV0eXBlfE10NXxGbGFnfFVuZGVybHlpbmcpL2cuZXhlYyhpY29uKTtcXG5cXG4gIGlmIChmaWxlbmFtZXMpIHtcXG4gICAgZmlsZW5hbWUgPSBPYmplY3QoX2Rlcml2X3NoYXJlZF91dGlsc19zdHJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcXFwiZ2V0S2ViYWJDYXNlXFxcIl0pKGZpbGVuYW1lc1sxXSk7XFxuICB9XFxuXFxuICB2YXIgc3ByaXRlX2lkID0gaWNvbi5zdGFydHNXaXRoKCdJY1VuZGVybHlpbmcnKSA/IFxcXCJpYy11bmRlcmx5aW5nLVxcXCIuY29uY2F0KGljb24uc3BsaXQoJ0ljVW5kZXJseWluZycpWzFdLnRvVXBwZXJDYXNlKCkpIDogT2JqZWN0KF9kZXJpdl9zaGFyZWRfdXRpbHNfc3RyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXFxcImdldEtlYmFiQ2FzZVxcXCJdKShpY29uKTtcXG4gIHJldHVybiByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1xcXCJjcmVhdGVFbGVtZW50XFxcIl0oXFxcInN2Z1xcXCIsIHtcXG4gICAgeG1sbnM6IFxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIsXFxuICAgIHhtbG5zWGxpbms6IFxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXFxcIixcXG4gICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKCdkYy1pY29uJywgY2xhc3NOYW1lLCB7XFxuICAgICAgJ2RjLWljb24tLWFjdGl2ZSc6IGNvbG9yID09PSAnYWN0aXZlJyxcXG4gICAgICAnZGMtaWNvbi0tZGlzYWJsZWQnOiBjb2xvciA9PT0gJ2Rpc2FibGVkJyxcXG4gICAgICAnZGMtaWNvbi0tZ3JlZW4nOiBjb2xvciA9PT0gJ2dyZWVuJyB8fCBpY29uID09PSAnSWNQcm9maXQnLFxcbiAgICAgICdkYy1pY29uLS1yZWQnOiBjb2xvciA9PT0gJ3JlZCcgfHwgaWNvbiA9PT0gJ0ljTG9zcycsXFxuICAgICAgJ2RjLWljb24tLXNlY29uZGFyeSc6IGNvbG9yID09PSAnc2Vjb25kYXJ5JyxcXG4gICAgICAnZGMtaWNvbi0tYnJhbmQnOiBjb2xvciA9PT0gJ2JyYW5kJ1xcbiAgICB9KSxcXG4gICAgaGVpZ2h0OiBoZWlnaHQgfHwgc2l6ZSxcXG4gICAgaWQ6IGlkLFxcbiAgICB3aWR0aDogd2lkdGggfHwgc2l6ZSxcXG4gICAgb25DbGljazogb25DbGljayxcXG4gICAgb25Nb3VzZUVudGVyOiBvbk1vdXNlRW50ZXIsXFxuICAgIG9uTW91c2VMZWF2ZTogb25Nb3VzZUxlYXZlLFxcbiAgICBzdHlsZTogY3VzdG9tX2NvbG9yID8ge1xcbiAgICAgICctLWZpbGwtY29sb3IxJzogY3VzdG9tX2NvbG9yXFxuICAgIH0gOiB1bmRlZmluZWRcXG4gIH0sIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXFxcImNyZWF0ZUVsZW1lbnRcXFwiXShcXFwidXNlXFxcIiwge1xcbiAgICB4bGlua0hyZWY6IFxcXCJcXFwiLmNvbmNhdChnZXRVcmxCYXNlKFxcXCIvcHVibGljL2ltYWdlcy9zcHJpdGUvXFxcIi5jb25jYXQoZmlsZW5hbWUsIFxcXCIuc3ZnXFxcIikpLCBcXFwiI1xcXCIpLmNvbmNhdChzcHJpdGVfaWQpXFxuICB9KSk7XFxufTtcXG5cXG5JY29uLnByb3BUeXBlcyA9IHtcXG4gIGNsYXNzTmFtZTogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW3Byb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0LmEub2JqZWN0LCBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdC5hLnN0cmluZ10pLFxcbiAgY29sb3I6IHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0LmEub25lT2ZUeXBlKFtwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdC5hLmJvb2wsIHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0LmEuc3RyaW5nXSksXFxuICBjdXN0b21fY29sb3I6IHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgaGVpZ2h0OiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdC5hLm9uZU9mVHlwZShbcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQuYS5udW1iZXIsIHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0LmEuc3RyaW5nXSksXFxuICBpY29uOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdC5hLnN0cmluZyxcXG4gIG9uQ2xpY2s6IHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0LmEuZnVuYyxcXG4gIG9uTW91c2VFbnRlcjogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQuYS5mdW5jLFxcbiAgb25Nb3VzZUxlYXZlOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdC5hLmZ1bmMsXFxuICBzaXplOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdC5hLm9uZU9mVHlwZShbcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQuYS5udW1iZXIsIHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0LmEuc3RyaW5nXSksXFxuICB3aWR0aDogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW3Byb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0LmEubnVtYmVyLCBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdC5hLnN0cmluZ10pXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXFxcImFcXFwiXSA9IChyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1xcXCJtZW1vXFxcIl0oSWNvbikpOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5DNXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwwQmtaWEpwZGk5amIyMXdiMjVsYm5RdkxpOXpjbU12WTI5dGNHOXVaVzUwY3k5cFkyOXVMMmxqYjI0dWFuTjRQekpoWVRNaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElHTnNZWE56VG1GdFpYTWdabkp2YlNBblkyeGhjM051WVcxbGN5YzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUdkbGRFdGxZbUZpUTJGelpTQjlJR1p5YjIwZ0owQmtaWEpwZGk5emFHRnlaV1F2ZFhScGJITXZjM1J5YVc1bkp6dGNibHh1THk4Z1ZFOUVUem9nVzIxdmRtVXRkRzh0YzJoaGNtVmtYVnh1WTI5dWMzUWdaMlYwVlhKc1FtRnpaU0E5SUNod1lYUm9JRDBnSnljcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCc0lEMGdkMmx1Wkc5M0xteHZZMkYwYVc5dU8xeHVYRzRnSUNBZ2FXWWdLQ0V2WGx4Y0x5aGljbDhwTHk1MFpYTjBLR3d1Y0dGMGFHNWhiV1VwS1NCeVpYUjFjbTRnY0dGMGFEdGNibHh1SUNBZ0lISmxkSFZ5YmlCZ0x5UjdiQzV3WVhSb2JtRnRaUzV6Y0d4cGRDZ25MeWNwV3pGZGZTUjdMMTVjWEM4dkxuUmxjM1FvY0dGMGFDa2dQeUJ3WVhSb0lEb2dZQzhrZTNCaGRHaDlZSDFnTzF4dWZUdGNibHh1WTI5dWMzUWdTV052YmlBOUlDaDdYRzRnSUNBZ1kyeGhjM05PWVcxbExGeHVJQ0FnSUdOdmJHOXlMRnh1SUNBZ0lHTjFjM1J2YlY5amIyeHZjaXhjYmlBZ0lDQm9aV2xuYUhRc1hHNGdJQ0FnYVdOdmJpeGNiaUFnSUNCcFpDeGNiaUFnSUNCdmJrTnNhV05yTEZ4dUlDQWdJRzl1VFc5MWMyVkZiblJsY2l4Y2JpQWdJQ0J2YmsxdmRYTmxUR1ZoZG1Vc1hHNGdJQ0FnYzJsNlpTQTlJREUyTEZ4dUlDQWdJSGRwWkhSb0xGeHVmU2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDZ2hhV052YmlrZ2NtVjBkWEp1SUc1MWJHdzdYRzVjYmlBZ0lDQnNaWFFnWm1sc1pXNWhiV1VnUFNBblkyOXRiVzl1Snp0Y2JpQWdJQ0JqYjI1emRDQm1hV3hsYm1GdFpYTWdQU0F2WGtsaktFTjFjbkpsYm1ONWZGUnlZV1JsZEhsd1pYeE5kRFY4Um14aFozeFZibVJsY214NWFXNW5LUzluTG1WNFpXTW9hV052YmlrN1hHNGdJQ0FnYVdZZ0tHWnBiR1Z1WVcxbGN5a2dlMXh1SUNBZ0lDQWdJQ0JtYVd4bGJtRnRaU0E5SUdkbGRFdGxZbUZpUTJGelpTaG1hV3hsYm1GdFpYTmJNVjBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElITndjbWwwWlY5cFpDQTlJR2xqYjI0dWMzUmhjblJ6VjJsMGFDZ25TV05WYm1SbGNteDVhVzVuSnlsY2JpQWdJQ0FnSUNBZ1B5QmdhV010ZFc1a1pYSnNlV2x1Wnkwa2UybGpiMjR1YzNCc2FYUW9KMGxqVlc1a1pYSnNlV2x1WnljcFd6RmRMblJ2VlhCd1pYSkRZWE5sS0NsOVlGeHVJQ0FnSUNBZ0lDQTZJR2RsZEV0bFltRmlRMkZ6WlNocFkyOXVLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJRHh6ZG1kY2JpQWdJQ0FnSUNBZ0lDQWdJSGh0Ykc1elBTZG9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3TDNOMlp5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUhodGJHNXpXR3hwYm1zOUoyaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6RTVPVGt2ZUd4cGJtc25YRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyTnNZWE56VG1GdFpYTW9KMlJqTFdsamIyNG5MQ0JqYkdGemMwNWhiV1VzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblpHTXRhV052YmkwdFlXTjBhWFpsSnpvZ1kyOXNiM0lnUFQwOUlDZGhZM1JwZG1VbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGtZeTFwWTI5dUxTMWthWE5oWW14bFpDYzZJR052Ykc5eUlEMDlQU0FuWkdsellXSnNaV1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNka1l5MXBZMjl1TFMxbmNtVmxiaWM2SUdOdmJHOXlJRDA5UFNBblozSmxaVzRuSUh4OElHbGpiMjRnUFQwOUlDZEpZMUJ5YjJacGRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMlJqTFdsamIyNHRMWEpsWkNjNklHTnZiRzl5SUQwOVBTQW5jbVZrSnlCOGZDQnBZMjl1SUQwOVBTQW5TV05NYjNOekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5aR010YVdOdmJpMHRjMlZqYjI1a1lYSjVKem9nWTI5c2IzSWdQVDA5SUNkelpXTnZibVJoY25rbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGtZeTFwWTI5dUxTMWljbUZ1WkNjNklHTnZiRzl5SUQwOVBTQW5ZbkpoYm1RbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTllMmhsYVdkb2RDQjhmQ0J6YVhwbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdROWUybGtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c5ZTNkcFpIUm9JSHg4SUhOcGVtVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFh0dmJrTnNhV05yZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVOYjNWelpVVnVkR1Z5UFh0dmJrMXZkWE5sUlc1MFpYSjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrMXZkWE5sVEdWaGRtVTllMjl1VFc5MWMyVk1aV0YyWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWE4wYjIxZlkyOXNiM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2N0TFdacGJHd3RZMjlzYjNJeEp6b2dZM1Z6ZEc5dFgyTnZiRzl5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnUEhWelpTQjRiR2x1YTBoeVpXWTllMkFrZTJkbGRGVnliRUpoYzJVb1lDOXdkV0pzYVdNdmFXMWhaMlZ6TDNOd2NtbDBaUzhrZTJacGJHVnVZVzFsZlM1emRtZGdLWDBqSkh0emNISnBkR1ZmYVdSOVlIMGdMejVjYmlBZ0lDQWdJQ0FnUEM5emRtYytYRzRnSUNBZ0tUdGNibjA3WEc1Y2JrbGpiMjR1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdOc1lYTnpUbUZ0WlRvZ1VISnZjRlI1Y0dWekxtOXVaVTltVkhsd1pTaGJVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDd2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVoxMHBMRnh1SUNBZ0lHTnZiRzl5T2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdFFjbTl3Vkhsd1pYTXVZbTl2YkN3Z1VISnZjRlI1Y0dWekxuTjBjbWx1WjEwcExGeHVJQ0FnSUdOMWMzUnZiVjlqYjJ4dmNqb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCb1pXbG5hSFE2SUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxQnliM0JVZVhCbGN5NXVkVzFpWlhJc0lGQnliM0JVZVhCbGN5NXpkSEpwYm1kZEtTeGNiaUFnSUNCcFkyOXVPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHOXVRMnhwWTJzNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1VFc5MWMyVkZiblJsY2pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdiMjVOYjNWelpVeGxZWFpsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnphWHBsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdFFjbTl3Vkhsd1pYTXViblZ0WW1WeUxDQlFjbTl3Vkhsd1pYTXVjM1J5YVc1blhTa3NYRzRnSUNBZ2QybGtkR2c2SUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxQnliM0JVZVhCbGN5NXVkVzFpWlhJc0lGQnliM0JVZVhCbGN5NXpkSEpwYm1kZEtTeGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZKbFlXTjBMbTFsYlc4b1NXTnZiaWs3WEc0aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVTkJPMEZCUlVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVmxCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVbEJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCVGtFN1FVRlJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVZEJPMEZCUkVFN1FVRnVRa0U3UVVGNVFrRTdRVUZCUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJWa0U3UVVGaFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNFxcblwiKX0sNTpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7ZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNV9fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5TNXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwwQmtaWEpwZGk5amIyMXdiMjVsYm5RdlpYaDBaWEp1WVd3Z1hDSkFaR1Z5YVhZdmMyaGhjbVZrTDNWMGFXeHpMM04wY21sdVoxd2lQMlUyTURnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmZYMWRGUWxCQlEwdGZSVmhVUlZKT1FVeGZUVTlFVlV4RlgxODFYMTg3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy81XFxuXCIpfSw4OmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX184X187Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pT0M1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqYjIxd2IyNWxiblF2WlhoMFpYSnVZV3dnWENKeVpXRmpkQzEwY21GdWMybDBhVzl1TFdkeWIzVndYQ0kvWkdSbE1DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmVjBWQ1VFRkRTMTlGV0ZSRlVrNUJURjlOVDBSVlRFVmZYemhmWHpzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy84XFxuXCIpfSw4MjpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtldmFsKFwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXFxuICAgIGlmKGZhbHNlKSB7IHZhciBjc3NSZWxvYWQ7IH1cXG4gIC8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU9ESXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUFaR1Z5YVhZdlkyOXRjRzl1Wlc1MEx5NHZjM0pqTDJOdmJYQnZibVZ1ZEhNdmNHRm5aUzF2ZG1WeWJHRjVMM0JoWjJVdGIzWmxjbXhoZVM1elkzTnpQMlkxT1dRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnWlhoMGNtRmpkR1ZrSUdKNUlHMXBibWt0WTNOekxXVjRkSEpoWTNRdGNHeDFaMmx1WEc0Z0lDQWdhV1lvYlc5a2RXeGxMbWh2ZENrZ2UxeHVJQ0FnSUNBZ0x5OGdNVFU1TURRNE5EQTFPREl3TUZ4dUlDQWdJQ0FnZG1GeUlHTnpjMUpsYkc5aFpDQTlJSEpsY1hWcGNtVW9YQ0loTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnpjeTFvYjNRdGJHOWhaR1Z5TDJodmRFMXZaSFZzWlZKbGNHeGhZMlZ0Wlc1MExtcHpYQ0lwS0cxdlpIVnNaUzVwWkN3Z2Uxd2labWxzWlUxaGNGd2lPbHdpZTJacGJHVk9ZVzFsZlZ3aWZTazdYRzRnSUNBZ0lDQnRiMlIxYkdVdWFHOTBMbVJwYzNCdmMyVW9ZM056VW1Wc2IyRmtLVHRjYmlBZ0lDQWdJRzF2WkhWc1pTNW9iM1F1WVdOalpYQjBLSFZ1WkdWbWFXNWxaQ3dnWTNOelVtVnNiMkZrS1RzN1hHNGdJQ0FnZlZ4dUlDQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFc1owTkJTMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vODJcXG5cIil9fSkuZGVmYXVsdH0pOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../components/lib/page-overlay.js\n");

/***/ })

}]);