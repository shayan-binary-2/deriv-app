version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  s3: circleci/aws-s3@1.0.13
commands:
  git_checkout_from_cache:
    description: "Git checkout and save cache"
    steps:
      - restore_cache:
          name: Git restore cache
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - run: 
          name: Fetch git tags 
          command: |
            mkdir -p ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== ' >> ~/.ssh/known_hosts
            # Fetch tags if git cache is present
            if [ -e /home/circleci/project/.git ]
            then
              git fetch origin --tags
            fi
      - checkout
      - run:
          name: Compress git objects 
          command: git gc
      - save_cache:
          name: Git save cache
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  yarn_install:
    description: "Install node modules"
    steps:
      - restore_cache:
          name: Restoring node_modules
          keys:
            - source-v1-modules-{{ checksum "yarn.lock" }}
            - source-v1-modules
      - run:
          name: yarn install
          command: yarn install
      - save_cache:
          name: Save node_module
          key: source-v1-modules-{{ checksum "yarn.lock" }}
          paths:
            - "node_modules"
  test:
    description: Test App
    steps:
      - run:
          name: Testing App
          command: yarn test
  build:
    description: Build App
    steps:
      - run:
          name: Building App
          command: yarn build-travis
  early_return_for_pull_requests:
    description: Avoid deploying the docker image while it is triggered by a PR
    steps:
      - run:
          name: Earyl Return while it is a PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Avoid deploying while it is a PR."
              circleci-agent step halt
            fi
  compress:
    description: "Compress"
    steps:
      - run:
          name: "Compress"
          command: |
            tar -cvf artifact.tar index.html nojs-smartcharts.css dist/*
      - run:
          name: "Tag commit id as artifact identifer"
          command: echo "${CIRCLE_SHA1}" > artifact-info.txt
  upload_artifact:
    description: "upload build artifact to s3 bucket"
    steps:
      - s3/copy:
          from: artifact.tar
          to: 's3://${CONTEXT_ARTIFACT_S3_BUCKET}/${CIRCLE_PROJECT_REPONAME}/'
          aws-access-key-id: env_CONTEXT_ARTIFACT_S3_AWS_ACCESS_KEY_ID
          aws-secret-access-key: env_CONTEXT_ARTIFACT_S3_AWS_SECRET_ACCESS_KEY
          aws-region: env_CONTEXT_ARTIFACT_S3_AWS_REGION
          arguments: '--metadata "{\"x-amz-artifact-id\": \"${CIRCLE_SHA1}\" }"'
  upload_checksum:
    description: "upload artifact checksum to s3"
    steps:
      - s3/copy:
          from: artifact-info.txt
          to: 's3://${CONTEXT_ARTIFACT_S3_BUCKET}/${CIRCLE_PROJECT_REPONAME}/'
          aws-access-key-id: env_CONTEXT_ARTIFACT_S3_AWS_ACCESS_KEY_ID
          aws-secret-access-key: env_CONTEXT_ARTIFACT_S3_AWS_SECRET_ACCESS_KEY
          aws-region: env_CONTEXT_ARTIFACT_S3_AWS_REGION
  docker_build_dev:
    description: "Build Docker image"
    steps:
      - setup_remote_docker
      - run: 
          name: Building docker image
          command: |
            docker build -t ${DOCKHUB_ORGANISATION}/binary-static-charts:beta-${CIRCLE_SHA1} -t ${DOCKHUB_ORGANISATION}/binary-static-charts:beta-latest .
  docker_build_production:
    description: "Build Docker image"
    steps:
      - setup_remote_docker
      - run: 
          name: Building docker image
          command: |
            docker build -t ${DOCKHUB_ORGANISATION}/binary-static-charts:${CIRCLE_SHA1} -t ${DOCKHUB_ORGANISATION}/binary-static-charts:latest .
  docker_push_dev:
    description: "Push image to docker hub"
    steps:
      - run: 
          name: Pushing Image to docker hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/binary-static-charts:${CIRCLE_SHA1}
            docker push ${DOCKHUB_ORGANISATION}/binary-static-charts:beta-latest
  docker_push_production:
    description: "Push image to docker hub"
    steps:
      - run: 
          name: Pushing Image to docker hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/binary-static-charts:${CIRCLE_SHA1}
            docker push ${DOCKHUB_ORGANISATION}/binary-static-charts:latest
  k8s_deploy:
    description: "Deploy to k8s cluster"
    parameters:
      k8s_svc_name:
        type: string
        default: "charts-binary-com-beta"
    steps:
      - k8s/install-kubectl
      - run: 
          name: Deploying to k8s cluster for service binary-charts
          command: |
            echo $CA_CRT | base64 --decode > ca.crt
            kubectl --server=${KUBE_SERVER} --certificate-authority=ca.crt --token=$SERVICEACCOUNT_TOKEN set image deployment/<< parameters.k8s_svc_name >> << parameters.k8s_svc_name >>=${DOCKHUB_ORGANISATION}/binary-static-charts:${CIRCLE_SHA1}

jobs:
  build_push_dev:
    docker:
      - image: circleci/node:12.13.0-stretch
    steps:
      - git_checkout_from_cache
      - yarn_install
      - test
      - build
      - early_return_for_pull_requests
      - compress
      - upload_artifact  # uploading the built code to s3 to create a backup of key services separate from Kubernetes deployment
      - upload_checksum  # uploading compressed artifact checksum to cross match artifact fingerprint
      - docker_build_dev
      - docker_push_dev

  build_push_production:
    docker:
      - image: circleci/node:12.13.0-stretch
    steps:
      - git_checkout_from_cache
      - yarn_install
      - build
      - docker_build_production
      - docker_push_production

  deploy_dev:
    docker:
      - image: circleci/node:12.13.0-stretch
    steps:
      - k8s_deploy

  deploy_production:
    docker:
      - image: circleci/node:12.13.0-stretch
    steps:
      - k8s_deploy:
          k8s_svc_name: "charts-binary-com"
      
workflows:
  release_dev:
    jobs:
      - build_push_dev:
          filters:
            branches:
              only: /^dev$/
          context: binary-frontend-artifact-upload

      - deploy_dev:
          requires:
            - build_push_dev
          filters:
            branches:
              only: /^dev$/

  release_production:
    jobs:
      - build_push_production:
          filters:
            branches:
              only: /^master$/
          context: binary-frontend-artifact-upload
              
      - deploy_production:
          requires:
            - build_push_production
          filters:
            branches:
              only: /^master$/