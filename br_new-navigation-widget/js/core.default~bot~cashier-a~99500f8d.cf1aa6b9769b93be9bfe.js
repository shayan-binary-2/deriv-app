(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~bot~cashier-a~99500f8d"],{

/***/ "../../components/lib/dropdown.css":
/*!**************************************************************************************!*\
  !*** /private/var/www/Company/Binary/deriv-app/packages/components/lib/dropdown.css ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9wcml2YXRlL3Zhci93d3cvQ29tcGFueS9CaW5hcnkvZGVyaXYtYXBwL3BhY2thZ2VzL2NvbXBvbmVudHMvbGliL2Ryb3Bkb3duLmNzcz83MWUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.css\n");

/***/ }),

/***/ "../../components/lib/dropdown.js":
/*!*************************************************************************************!*\
  !*** /private/var/www/Company/Binary/deriv-app/packages/components/lib/dropdown.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,g){ true?module.exports=g(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! tt-react-custom-scrollbars */ \"../../components/node_modules/tt-react-custom-scrollbars/lib/index.js\"),__webpack_require__(/*! react-tiny-popover */ \"../../components/node_modules/react-tiny-popover/dist/Popover.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__5__,__WEBPACK_EXTERNAL_MODULE__10__,__WEBPACK_EXTERNAL_MODULE__15__){return function(e){var g={};function I(t){if(g[t])return g[t].exports;var n=g[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,I),n.l=!0,n.exports}return I.m=e,I.c=g,I.d=function(e,g,t){I.o(e,g)||Object.defineProperty(e,g,{enumerable:!0,get:t})},I.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},I.t=function(e,g){if(1&g&&(e=I(e)),8&g)return e;if(4&g&&\"object\"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(I.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:e}),2&g&&\"string\"!=typeof e)for(var n in e)I.d(t,n,function(g){return e[g]}.bind(null,n));return t},I.n=function(e){var g=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(g,\"a\",g),g},I.o=function(e,g){return Object.prototype.hasOwnProperty.call(e,g)},I.p=\"\",I(I.s=53)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},10:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__10__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIj8xMTY3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///10\\n\")},13:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/themed-scrollbars.scss\\nvar themed_scrollbars = __webpack_require__(17);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"tt-react-custom-scrollbars\"\\nvar external_tt_react_custom_scrollbars_ = __webpack_require__(10);\\n\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/themed-scrollbars.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\nvar themed_scrollbars_ThemedScrollbars =\\n/*#__PURE__*/\\nfunction (_React$Component) {\\n  _inherits(ThemedScrollbars, _React$Component);\\n\\n  function ThemedScrollbars() {\\n    _classCallCheck(this, ThemedScrollbars);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(ThemedScrollbars).apply(this, arguments));\\n  }\\n\\n  _createClass(ThemedScrollbars, [{\\n    key: \"render\",\\n    value: function render() {\\n      return external_react_default.a.createElement(external_tt_react_custom_scrollbars_[\"Scrollbars\"], _extends({\\n        ref: this.props.list_ref,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__track--horizontal\"\\n          }));\\n        },\\n        renderTrackVertical: function renderTrackVertical(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__track--vertical\"\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__thumb--horizontal\"\\n          }));\\n        },\\n        renderThumbVertical: function renderThumbVertical(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__thumb--vertical\"\\n          }));\\n        }\\n      }, this.props), this.props.children);\\n    }\\n  }]);\\n\\n  return ThemedScrollbars;\\n}(external_react_default.a.Component);\\n\\n/* harmony default export */ var themed_scrollbars_themed_scrollbars = (themed_scrollbars_ThemedScrollbars);\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return themed_scrollbars_themed_scrollbars; });\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuanN4PzQxMjEiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3RoZW1lZC1zY3JvbGxiYXJzL2luZGV4LmpzPzc1MzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjcm9sbGJhcnMgfSBmcm9tICd0dC1yZWFjdC1jdXN0b20tc2Nyb2xsYmFycyc7XG5cbmNsYXNzIFRoZW1lZFNjcm9sbGJhcnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxTY3JvbGxiYXJzXG4gICAgICAgICAgICAgICAgcmVmPXt0aGlzLnByb3BzLmxpc3RfcmVmfVxuICAgICAgICAgICAgICAgIHJlbmRlclRyYWNrSG9yaXpvbnRhbD17cHJvcHMgPT4gPGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT0nZGMtdGhlbWVkLXNjcm9sbGJhcnNfX3RyYWNrLS1ob3Jpem9udGFsJyAvPn1cbiAgICAgICAgICAgICAgICByZW5kZXJUcmFja1ZlcnRpY2FsPXtwcm9wcyA9PiA8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPSdkYy10aGVtZWQtc2Nyb2xsYmFyc19fdHJhY2stLXZlcnRpY2FsJyAvPn1cbiAgICAgICAgICAgICAgICByZW5kZXJUaHVtYkhvcml6b250YWw9e3Byb3BzID0+IDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9J2RjLXRoZW1lZC1zY3JvbGxiYXJzX190aHVtYi0taG9yaXpvbnRhbCcgLz59XG4gICAgICAgICAgICAgICAgcmVuZGVyVGh1bWJWZXJ0aWNhbD17cHJvcHMgPT4gPGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT0nZGMtdGhlbWVkLXNjcm9sbGJhcnNfX3RodW1iLS12ZXJ0aWNhbCcgLz59XG4gICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L1Njcm9sbGJhcnM+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZWRTY3JvbGxiYXJzO1xuIiwiaW1wb3J0ICcuL3RoZW1lZC1zY3JvbGxiYXJzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL3RoZW1lZC1zY3JvbGxiYXJzLmpzeCc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUxBO0FBV0E7Ozs7QUFkQTtBQUNBO0FBZ0JBOztBQ3BCQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///13\\n')},15:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__15__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3QtdGlueS1wb3BvdmVyXCI/NzQxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE1X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///15\\n\")},17:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuc2Nzcz8zNjJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1ODE1NzM4NzA3ODJcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///17\\n\")},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},21:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-tiny-popover\"\\nvar external_react_tiny_popover_ = __webpack_require__(15);\\nvar external_react_tiny_popover_default = /*#__PURE__*/__webpack_require__.n(external_react_tiny_popover_);\\n\\n// EXTERNAL MODULE: ./src/components/icon/index.js + 1 modules\\nvar components_icon = __webpack_require__(3);\\n\\n// CONCATENATED MODULE: ./src/components/popover/popover.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\nvar popover_Popover =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(Popover, _React$PureComponent);\\n\\n  function Popover(props) {\\n    var _this;\\n\\n    _classCallCheck(this, Popover);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popover).call(this, props));\\n\\n    _this.toggleOpen = function () {\\n      return _this.setState({\\n        is_open: Boolean(_this.props.message)\\n      });\\n    };\\n\\n    _this.toggleClose = function () {\\n      return _this.setState({\\n        is_open: false\\n      });\\n    };\\n\\n    _this.state = {\\n      is_open: false\\n    };\\n    return _this;\\n  }\\n\\n  _createClass(Popover, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.setState({\\n        is_open: this.props.has_error\\n      });\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props = this.props,\\n          alignment = _this$props.alignment,\\n          children = _this$props.children,\\n          className = _this$props.className,\\n          classNameBubble = _this$props.classNameBubble,\\n          classNameTarget = _this$props.classNameTarget,\\n          classNameTargetIcon = _this$props.classNameTargetIcon,\\n          counter = _this$props.counter,\\n          disable_message_icon = _this$props.disable_message_icon,\\n          disable_target_icon = _this$props.disable_target_icon,\\n          has_error = _this$props.has_error,\\n          icon = _this$props.icon,\\n          id = _this$props.id,\\n          is_open = _this$props.is_open,\\n          margin = _this$props.margin,\\n          message = _this$props.message,\\n          zIndex = _this$props.zIndex;\\n      var has_external_open_state = is_open !== undefined;\\n      var icon_class_name = external_classnames_default()(classNameTargetIcon, icon);\\n      return external_react_default.a.createElement(external_react_tiny_popover_default.a, {\\n        isOpen: has_external_open_state ? is_open : this.state.is_open,\\n        position: alignment,\\n        transitionDuration: 0.25,\\n        padding: margin + 8,\\n        containerStyle: {\\n          zIndex: zIndex || 1\\n        },\\n        content: function content(_ref) {\\n          var position = _ref.position,\\n              targetRect = _ref.targetRect,\\n              popoverRect = _ref.popoverRect;\\n          return external_react_default.a.createElement(external_react_tiny_popover_[\"ArrowContainer\"], {\\n            position: position,\\n            targetRect: targetRect,\\n            popoverRect: popoverRect,\\n            arrowColor: has_error ? \\'var(--status-danger)\\' : \\'var(--general-active)\\',\\n            arrowSize: 5\\n          }, external_react_default.a.createElement(\"div\", {\\n            id: id,\\n            className: external_classnames_default()(classNameBubble, \\'dc-popover__bubble\\', {\\n              \\'dc-popover__bubble--error\\': has_error\\n            })\\n          }, !disable_message_icon && icon === \\'info\\' && external_react_default.a.createElement(\"i\", {\\n            className: \"dc-popover__bubble__icon\"\\n          }, external_react_default.a.createElement(components_icon[\"default\"], {\\n            icon: \"IcInfoBlue\"\\n          })), external_react_default.a.createElement(\"span\", {\\n            className: external_classnames_default()(\\'dc-popover__bubble__text\\', {\\n              \\'dc-popover__bubble__text--error\\': has_error\\n            })\\n          }, message)));\\n        }\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(\\'dc-popover\\', className),\\n        id: id,\\n        onMouseEnter: has_external_open_state ? undefined : this.toggleOpen,\\n        onMouseLeave: has_external_open_state ? undefined : this.toggleClose\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(classNameTarget, \\'dc-popover__target\\')\\n      }, !disable_target_icon && external_react_default.a.createElement(\"i\", {\\n        className: message ? \\'dc-popover__target__icon\\' : \\'dc-popover__target__icon--disabled\\'\\n      }, icon === \\'info\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcInfoOutline\",\\n        className: icon_class_name\\n      }), icon === \\'question\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcUnknown\",\\n        className: icon_class_name\\n      }), icon === \\'dot\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcCircle\",\\n        className: icon_class_name,\\n        size: 4\\n      }), icon === \\'counter\\' && external_react_default.a.createElement(\"span\", {\\n        className: icon_class_name\\n      }, counter)), children)));\\n    }\\n  }]);\\n\\n  return Popover;\\n}(external_react_default.a.PureComponent);\\n\\npopover_Popover.defaultProps = {\\n  portal_container: \\'deriv_app\\',\\n  margin: 0\\n};\\npopover_Popover.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  classNameBubble: external_prop_types_default.a.string,\\n  classNameTarget: external_prop_types_default.a.string,\\n  classNameTargetIcon: external_prop_types_default.a.string,\\n  counter: external_prop_types_default.a.number,\\n  disable_message_icon: external_prop_types_default.a.bool,\\n  disable_target_icon: external_prop_types_default.a.bool,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.oneOf([\\'info\\', \\'question\\', \\'dot\\', \\'counter\\']),\\n  id: external_prop_types_default.a.string,\\n  is_open: external_prop_types_default.a.bool,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.object]),\\n  portal_container: external_prop_types_default.a.string,\\n  zIndex: external_prop_types_default.a.number\\n};\\n/* harmony default export */ var popover = (popover_Popover);\\n// EXTERNAL MODULE: ./src/components/popover/popover.scss\\nvar popover_popover = __webpack_require__(23);\\n\\n// CONCATENATED MODULE: ./src/components/popover/index.js\\n\\n\\n/* harmony default export */ var components_popover = __webpack_exports__[\"default\"] = (popover);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLmpzeD8zNTkxIiwid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9wb3BvdmVyL2luZGV4LmpzP2I2NjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaW55UG9wb3ZlciwgeyBBcnJvd0NvbnRhaW5lciB9IGZyb20gJ3JlYWN0LXRpbnktcG9wb3Zlcic7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcblxuY2xhc3MgUG9wb3ZlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHsgaXNfb3BlbjogZmFsc2UgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzX29wZW46IHRoaXMucHJvcHMuaGFzX2Vycm9yIH0pO1xuICAgIH1cblxuICAgIHRvZ2dsZU9wZW4gPSAoKSA9PiB0aGlzLnNldFN0YXRlKHsgaXNfb3BlbjogQm9vbGVhbih0aGlzLnByb3BzLm1lc3NhZ2UpIH0pO1xuXG4gICAgdG9nZ2xlQ2xvc2UgPSAoKSA9PiB0aGlzLnNldFN0YXRlKHsgaXNfb3BlbjogZmFsc2UgfSk7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGFsaWdubWVudCxcbiAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lQnViYmxlLFxuICAgICAgICAgICAgY2xhc3NOYW1lVGFyZ2V0LFxuICAgICAgICAgICAgY2xhc3NOYW1lVGFyZ2V0SWNvbixcbiAgICAgICAgICAgIGNvdW50ZXIsXG4gICAgICAgICAgICBkaXNhYmxlX21lc3NhZ2VfaWNvbixcbiAgICAgICAgICAgIGRpc2FibGVfdGFyZ2V0X2ljb24sXG4gICAgICAgICAgICBoYXNfZXJyb3IsXG4gICAgICAgICAgICBpY29uLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBpc19vcGVuLFxuICAgICAgICAgICAgbWFyZ2luLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIHpJbmRleCxcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgY29uc3QgaGFzX2V4dGVybmFsX29wZW5fc3RhdGUgPSBpc19vcGVuICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGljb25fY2xhc3NfbmFtZSA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lVGFyZ2V0SWNvbiwgaWNvbik7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8VGlueVBvcG92ZXJcbiAgICAgICAgICAgICAgICBpc09wZW49e2hhc19leHRlcm5hbF9vcGVuX3N0YXRlID8gaXNfb3BlbiA6IHRoaXMuc3RhdGUuaXNfb3Blbn1cbiAgICAgICAgICAgICAgICBwb3NpdGlvbj17YWxpZ25tZW50fVxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbj17MC4yNX1cbiAgICAgICAgICAgICAgICBwYWRkaW5nPXttYXJnaW4gKyA4fVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlPXt7IHpJbmRleDogekluZGV4IHx8IDEgfX1cbiAgICAgICAgICAgICAgICBjb250ZW50PXsoeyBwb3NpdGlvbiwgdGFyZ2V0UmVjdCwgcG9wb3ZlclJlY3QgfSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8QXJyb3dDb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFJlY3Q9e3RhcmdldFJlY3R9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3BvdmVyUmVjdD17cG9wb3ZlclJlY3R9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJvd0NvbG9yPXtoYXNfZXJyb3IgPyAndmFyKC0tc3RhdHVzLWRhbmdlciknIDogJ3ZhcigtLWdlbmVyYWwtYWN0aXZlKSd9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJvd1NpemU9ezV9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGNsYXNzTmFtZUJ1YmJsZSwgJ2RjLXBvcG92ZXJfX2J1YmJsZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RjLXBvcG92ZXJfX2J1YmJsZS0tZXJyb3InOiBoYXNfZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyFkaXNhYmxlX21lc3NhZ2VfaWNvbiAmJiBpY29uID09PSAnaW5mbycgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9J2RjLXBvcG92ZXJfX2J1YmJsZV9faWNvbic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBpY29uPSdJY0luZm9CbHVlJyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLXBvcG92ZXJfX2J1YmJsZV9fdGV4dCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYy1wb3BvdmVyX19idWJibGVfX3RleHQtLWVycm9yJzogaGFzX2Vycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L0Fycm93Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLXBvcG92ZXInLCBjbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17aGFzX2V4dGVybmFsX29wZW5fc3RhdGUgPyB1bmRlZmluZWQgOiB0aGlzLnRvZ2dsZU9wZW59XG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17aGFzX2V4dGVybmFsX29wZW5fc3RhdGUgPyB1bmRlZmluZWQgOiB0aGlzLnRvZ2dsZUNsb3NlfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoY2xhc3NOYW1lVGFyZ2V0LCAnZGMtcG9wb3Zlcl9fdGFyZ2V0Jyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgeyFkaXNhYmxlX3RhcmdldF9pY29uICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9e21lc3NhZ2UgPyAnZGMtcG9wb3Zlcl9fdGFyZ2V0X19pY29uJyA6ICdkYy1wb3BvdmVyX190YXJnZXRfX2ljb24tLWRpc2FibGVkJ30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpY29uID09PSAnaW5mbycgJiYgPEljb24gaWNvbj0nSWNJbmZvT3V0bGluZScgY2xhc3NOYW1lPXtpY29uX2NsYXNzX25hbWV9IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aWNvbiA9PT0gJ3F1ZXN0aW9uJyAmJiA8SWNvbiBpY29uPSdJY1Vua25vd24nIGNsYXNzTmFtZT17aWNvbl9jbGFzc19uYW1lfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2ljb24gPT09ICdkb3QnICYmIDxJY29uIGljb249J0ljQ2lyY2xlJyBjbGFzc05hbWU9e2ljb25fY2xhc3NfbmFtZX0gc2l6ZT17NH0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpY29uID09PSAnY291bnRlcicgJiYgPHNwYW4gY2xhc3NOYW1lPXtpY29uX2NsYXNzX25hbWV9Pntjb3VudGVyfTwvc3Bhbj59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvVGlueVBvcG92ZXI+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Qb3BvdmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBwb3J0YWxfY29udGFpbmVyOiAnZGVyaXZfYXBwJyxcbiAgICBtYXJnaW46IDAsXG59O1xuXG5Qb3BvdmVyLnByb3BUeXBlcyA9IHtcbiAgICBhbGlnbm1lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjbGFzc05hbWVCdWJibGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2xhc3NOYW1lVGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNsYXNzTmFtZVRhcmdldEljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY291bnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBkaXNhYmxlX21lc3NhZ2VfaWNvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZV90YXJnZXRfaWNvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzX2Vycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpY29uOiBQcm9wVHlwZXMub25lT2YoWydpbmZvJywgJ3F1ZXN0aW9uJywgJ2RvdCcsICdjb3VudGVyJ10pLFxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzX29wZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1hcmdpbjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcG9ydGFsX2NvbnRhaW5lcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB6SW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3BvdmVyO1xuIiwiaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi9wb3BvdmVyLmpzeCc7XG5pbXBvcnQgJy4vcG9wb3Zlci5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBRkE7QUFTQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBVkE7QUFXQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBVkE7QUFBQTtBQUFBO0FBRkE7QUFHQTtBQUNBOzs7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBOzs7QUFNQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFvQkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBUUE7QUFDQTtBQUNBO0FBREE7QUFGQTtBQU9BO0FBQUE7QUFDQTtBQUFBO0FBSUE7QUFDQTtBQURBO0FBREE7QUFuQkE7QUFOQTtBQXFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFTQTs7OztBQTlGQTtBQUNBO0FBZ0dBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBakJBO0FBb0JBOzs7OztBQ2hJQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///21\\n')},23:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLnNjc3M/ZWVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTgxNTczODcwMzgzXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///23\\n\")},3:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \\\"classnames\\\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \\\"prop-types\\\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// CONCATENATED MODULE: ./src/components/icon/icon.jsx\\n\\n\\n // TODO: [move-to-shared]\\n\\nvar getUrlBase = function getUrlBase() {\\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\\n  var l = window.location;\\n  if (!/^\\\\/(br_)/.test(l.pathname)) return path;\\n  return \\\"/\\\".concat(l.pathname.split('/')[1]).concat(/^\\\\//.test(path) ? path : \\\"/\\\".concat(path));\\n}; // TODO: [move-to-shared]\\n\\n\\nvar getKebabCase = function getKebabCase(str) {\\n  if (!str) return str;\\n  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2') // get all lowercase letters that are near to uppercase ones\\n  .replace(/[\\\\s]+/g, '-') // replace all spaces and low dash\\n  .toLowerCase();\\n};\\n\\nvar icon_Icon = function Icon(_ref) {\\n  var className = _ref.className,\\n      color = _ref.color,\\n      custom_color = _ref.custom_color,\\n      height = _ref.height,\\n      icon = _ref.icon,\\n      id = _ref.id,\\n      onClick = _ref.onClick,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave,\\n      _ref$size = _ref.size,\\n      size = _ref$size === void 0 ? 16 : _ref$size,\\n      width = _ref.width;\\n  if (!icon) return null;\\n  var filename = 'common';\\n  var filenames = /^Ic(Currency|Tradetype|Mt5|Flag|Underlying)/g.exec(icon);\\n\\n  if (filenames) {\\n    filename = getKebabCase(filenames[1]);\\n  }\\n\\n  var sprite_id = icon.startsWith('IcUnderlying') ? \\\"ic-underlying-\\\".concat(icon.split('IcUnderlying')[1].toUpperCase()) : getKebabCase(icon);\\n  return external_react_default.a.createElement(\\\"svg\\\", {\\n    xmlns: \\\"http://www.w3.org/2000/svg\\\",\\n    xmlnsXlink: \\\"http://www.w3.org/1999/xlink\\\",\\n    className: external_classnames_default()('dc-icon', className, {\\n      'dc-icon--active': color === 'active',\\n      'dc-icon--disabled': color === 'disabled',\\n      'dc-icon--green': color === 'green' || icon === 'IcProfit',\\n      'dc-icon--red': color === 'red' || icon === 'IcLoss',\\n      'dc-icon--secondary': color === 'secondary',\\n      'dc-icon--brand': color === 'brand'\\n    }),\\n    height: height || size,\\n    id: id,\\n    width: width || size,\\n    onClick: onClick,\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    style: custom_color ? {\\n      '--fill-color1': custom_color\\n    } : undefined\\n  }, external_react_default.a.createElement(\\\"use\\\", {\\n    xlinkHref: \\\"\\\".concat(getUrlBase(\\\"/public/images/sprite/\\\".concat(filename, \\\".svg\\\")), \\\"#\\\").concat(sprite_id)\\n  }));\\n};\\n\\nicon_Icon.propTypes = {\\n  className: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.string]),\\n  color: external_prop_types_default.a.oneOfType([external_prop_types_default.a.bool, external_prop_types_default.a.string]),\\n  custom_color: external_prop_types_default.a.string,\\n  height: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string]),\\n  icon: external_prop_types_default.a.string,\\n  onClick: external_prop_types_default.a.func,\\n  onMouseEnter: external_prop_types_default.a.func,\\n  onMouseLeave: external_prop_types_default.a.func,\\n  size: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string]),\\n  width: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var icon_icon = (icon_Icon);\\n// EXTERNAL MODULE: ./src/components/icon/icon.scss\\nvar components_icon_icon = __webpack_require__(4);\\n\\n// CONCATENATED MODULE: ./src/components/icon/index.js\\n\\n\\n/* harmony default export */ var components_icon = __webpack_exports__[\\\"default\\\"] = (icon_icon);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4PzJhYTMiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL2ljb24vaW5kZXguanM/YWU2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBUT0RPOiBbbW92ZS10by1zaGFyZWRdXG5jb25zdCBnZXRVcmxCYXNlID0gKHBhdGggPSAnJykgPT4ge1xuICAgIGNvbnN0IGwgPSB3aW5kb3cubG9jYXRpb247XG5cbiAgICBpZiAoIS9eXFwvKGJyXykvLnRlc3QobC5wYXRobmFtZSkpIHJldHVybiBwYXRoO1xuXG4gICAgcmV0dXJuIGAvJHtsLnBhdGhuYW1lLnNwbGl0KCcvJylbMV19JHsvXlxcLy8udGVzdChwYXRoKSA/IHBhdGggOiBgLyR7cGF0aH1gfWA7XG59O1xuXG4vLyBUT0RPOiBbbW92ZS10by1zaGFyZWRdXG5jb25zdCBnZXRLZWJhYkNhc2UgPSBzdHIgPT4ge1xuICAgIGlmICghc3RyKSByZXR1cm4gc3RyO1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoLyhbYS16MC05XSkoW0EtWl0pL2csICckMS0kMicpIC8vIGdldCBhbGwgbG93ZXJjYXNlIGxldHRlcnMgdGhhdCBhcmUgbmVhciB0byB1cHBlcmNhc2Ugb25lc1xuICAgICAgICAucmVwbGFjZSgvW1xcc10rL2csICctJykgLy8gcmVwbGFjZSBhbGwgc3BhY2VzIGFuZCBsb3cgZGFzaFxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbn07XG5cbmNvbnN0IEljb24gPSAoe1xuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xvcixcbiAgICBjdXN0b21fY29sb3IsXG4gICAgaGVpZ2h0LFxuICAgIGljb24sXG4gICAgaWQsXG4gICAgb25DbGljayxcbiAgICBvbk1vdXNlRW50ZXIsXG4gICAgb25Nb3VzZUxlYXZlLFxuICAgIHNpemUgPSAxNixcbiAgICB3aWR0aCxcbn0pID0+IHtcbiAgICBpZiAoIWljb24pIHJldHVybiBudWxsO1xuXG4gICAgbGV0IGZpbGVuYW1lID0gJ2NvbW1vbic7XG4gICAgY29uc3QgZmlsZW5hbWVzID0gL15JYyhDdXJyZW5jeXxUcmFkZXR5cGV8TXQ1fEZsYWd8VW5kZXJseWluZykvZy5leGVjKGljb24pO1xuICAgIGlmIChmaWxlbmFtZXMpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBnZXRLZWJhYkNhc2UoZmlsZW5hbWVzWzFdKTtcbiAgICB9XG5cbiAgICBjb25zdCBzcHJpdGVfaWQgPSBpY29uLnN0YXJ0c1dpdGgoJ0ljVW5kZXJseWluZycpXG4gICAgICAgID8gYGljLXVuZGVybHlpbmctJHtpY29uLnNwbGl0KCdJY1VuZGVybHlpbmcnKVsxXS50b1VwcGVyQ2FzZSgpfWBcbiAgICAgICAgOiBnZXRLZWJhYkNhc2UoaWNvbik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8c3ZnXG4gICAgICAgICAgICB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG4gICAgICAgICAgICB4bWxuc1hsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJ1xuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdkYy1pY29uJywgY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWFjdGl2ZSc6IGNvbG9yID09PSAnYWN0aXZlJyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tZGlzYWJsZWQnOiBjb2xvciA9PT0gJ2Rpc2FibGVkJyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tZ3JlZW4nOiBjb2xvciA9PT0gJ2dyZWVuJyB8fCBpY29uID09PSAnSWNQcm9maXQnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1yZWQnOiBjb2xvciA9PT0gJ3JlZCcgfHwgaWNvbiA9PT0gJ0ljTG9zcycsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLXNlY29uZGFyeSc6IGNvbG9yID09PSAnc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tYnJhbmQnOiBjb2xvciA9PT0gJ2JyYW5kJyxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHQgfHwgc2l6ZX1cbiAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgIHdpZHRoPXt3aWR0aCB8fCBzaXplfVxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgIG9uTW91c2VFbnRlcj17b25Nb3VzZUVudGVyfVxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXtvbk1vdXNlTGVhdmV9XG4gICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgICAgY3VzdG9tX2NvbG9yXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnLS1maWxsLWNvbG9yMSc6IGN1c3RvbV9jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICAgIDx1c2UgeGxpbmtIcmVmPXtgJHtnZXRVcmxCYXNlKGAvcHVibGljL2ltYWdlcy9zcHJpdGUvJHtmaWxlbmFtZX0uc3ZnYCl9IyR7c3ByaXRlX2lkfWB9IC8+XG4gICAgICAgIDwvc3ZnPlxuICAgICk7XG59O1xuXG5JY29uLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBjdXN0b21fY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgaWNvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uO1xuIiwiaW1wb3J0IEljb24gZnJvbSAnLi9pY29uLmpzeCc7XG5pbXBvcnQgJy4vaWNvbi5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFuQkE7QUF5QkE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFhQTs7Ozs7QUMzRkE7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n\")},35:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24uc2Nzcz8wZjUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1ODE1NzM4Njg3NDlcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///35\\n\")},36:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbGlzdC5zY3NzP2ZhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU4MTU3Mzg2ODc3NlxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///36\\n\")},4:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uc2Nzcz83YjFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1ODE1NzM4NjkyOTRcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///4\\n\")},5:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__5__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzVfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///5\\n\")},53:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(5);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/index.js + 1 modules\\nvar themed_scrollbars = __webpack_require__(13);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.js\\n\\nvar getDisplayText = function getDisplayText(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return (arr_list.find(function (item) {\\n      return item.value === value;\\n    }) || {}).text;\\n  };\\n\\n  var text = \\'\\';\\n\\n  if (Array.isArray(list)) {\\n    text = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      text = findInArray(list[key]);\\n      return text;\\n    });\\n  }\\n\\n  return text;\\n};\\nvar getItemFromValue = function getItemFromValue(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return arr_list.findIndex(function (item) {\\n      return item.value === value;\\n    });\\n  };\\n\\n  var item = {};\\n\\n  if (Array.isArray(list)) {\\n    item = {\\n      number: findInArray(list),\\n      length: list.length\\n    };\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      item = {\\n        number: findInArray(list[key]),\\n        length: list[key].length\\n      };\\n      return item;\\n    });\\n  }\\n\\n  return item;\\n};\\nvar getValueFromIndex = function getValueFromIndex(list, index) {\\n  var findInArray = function findInArray(arr_list) {\\n    return arr_list[index];\\n  };\\n\\n  var result;\\n\\n  if (Array.isArray(list)) {\\n    result = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      result = findInArray(list[key]);\\n      return result.value;\\n    });\\n  }\\n\\n  return result.value;\\n};\\nvar getPrevIndex = function getPrevIndex(index, length) {\\n  var prev_index = index - 1 < 0 ? length - 1 : index - 1;\\n  return prev_index;\\n};\\nvar getNextIndex = function getNextIndex(index, length) {\\n  var next_index = index + 1 === length ? 0 : index + 1;\\n  return next_index;\\n};\\nvar dropdown_listPropType = function listPropType() {\\n  return external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.shape({\\n    disabled: external_prop_types_default.a.bool,\\n    has_tooltip: external_prop_types_default.a.bool,\\n    text: external_prop_types_default.a.string,\\n    tooltip: external_prop_types_default.a.string,\\n    value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n  })), external_prop_types_default.a.object]);\\n};\\n// EXTERNAL MODULE: ./src/components/popover/index.js + 1 modules\\nvar popover = __webpack_require__(21);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/items.jsx\\n\\n\\n\\n\\n\\nvar items_Items = function Items(_ref) {\\n  var className = _ref.className,\\n      index = _ref.index,\\n      handleSelect = _ref.handleSelect,\\n      has_symbol = _ref.has_symbol,\\n      items = _ref.items,\\n      name = _ref.name,\\n      is_align_text_left = _ref.is_align_text_left,\\n      value = _ref.value;\\n  return items.map(function (item, idx) {\\n    var symbol_type_class_name = item.text && typeof item.text === \\'string\\' ? \"symbols--\".concat(item.text.toLowerCase()) : null;\\n    return external_react_default.a.createElement(\"div\", {\\n      className: external_classnames_default()(\\'dc-list__item\\', {\\n        \\'dc-list__item--highlighted\\': idx === index\\n      }, {\\n        \\'dc-list__item--selected\\': value === item.value\\n      }, {\\n        \\'dc-list__item--disabled\\': item.disabled\\n      }),\\n      name: name,\\n      value: item.value,\\n      onClick: item.disabled ? null : handleSelect.bind(null, item),\\n      key: idx\\n    }, !!has_symbol && item.has_tooltip && external_react_default.a.createElement(popover[\"default\"], {\\n      alignment: \"left\",\\n      message: item.text\\n    }, external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-symbol\\', symbol_type_class_name)\\n    })), !!has_symbol && !item.has_tooltip && external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-text\\', symbol_type_class_name)\\n    }), !has_symbol && external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'dc-list__item-text\\', {\\n        \\'dc-list__item-text--left\\': is_align_text_left\\n      }, className)\\n    }, item.text));\\n  });\\n};\\n\\nitems_Items.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  handleSelect: external_prop_types_default.a.func,\\n  has_symbol: external_prop_types_default.a.bool,\\n  name: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown_items = (items_Items);\\n// CONCATENATED MODULE: ./src/components/dropdown/native-select.jsx\\n\\n\\n\\nvar native_select_NativeSelect = function NativeSelect(_ref) {\\n  var name = _ref.name,\\n      list = _ref.list,\\n      value = _ref.value,\\n      onChange = _ref.onChange;\\n  return external_react_default.a.createElement(\"div\", {\\n    className: \"native-select native-select__wrapper\"\\n  }, external_react_default.a.createElement(\"select\", {\\n    className: \"select native-select__select\",\\n    name: name,\\n    value: value,\\n    onChange: onChange\\n  }, Array.isArray(list) ? list.map(function (item, idx) {\\n    return external_react_default.a.createElement(\"option\", {\\n      key: idx,\\n      value: item.value\\n    }, item.text);\\n  }) : Object.keys(list).map(function (key) {\\n    return external_react_default.a.createElement(external_react_default.a.Fragment, {\\n      key: key\\n    }, external_react_default.a.createElement(\"optgroup\", {\\n      label: key\\n    }, list[key].map(function (item, idx) {\\n      return external_react_default.a.createElement(\"option\", {\\n        key: idx,\\n        value: item.value\\n      }, item.text);\\n    })));\\n  })));\\n};\\n\\nnative_select_NativeSelect.propTypes = {\\n  list: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.array]),\\n  name: external_prop_types_default.a.string,\\n  onChange: external_prop_types_default.a.func,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var native_select = (native_select_NativeSelect);\\n// CONCATENATED MODULE: ./src/components/dropdown/display-text.jsx\\n\\n\\n\\n\\n\\nvar display_text_DisplayText = function DisplayText(_ref) {\\n  var className = _ref.className,\\n      has_symbol = _ref.has_symbol,\\n      list = _ref.list,\\n      is_align_text_left = _ref.is_align_text_left,\\n      placeholder = _ref.placeholder,\\n      name = _ref.name,\\n      value = _ref.value;\\n  var symbol_value_class = value && has_symbol ? \"symbols--\".concat(value.toLowerCase()) : null;\\n  return external_react_default.a.createElement(external_react_default.a.Fragment, null, has_symbol ? external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(\\'symbols dc-dropdown__display-symbol\\', symbol_value_class, className),\\n    name: name,\\n    value: value\\n  }) : external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-text\\', className),\\n    name: name,\\n    value: value\\n  }, getDisplayText(list, value)), placeholder && external_react_default.a.createElement(\"div\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-placeholder\\', {\\n      \\'dc-dropdown__display-placeholder--is-title\\': value,\\n      \\'dc-dropdown__display-placeholder--is-left-text\\': is_align_text_left\\n    })\\n  }, external_react_default.a.createElement(\"span\", {\\n    className: \"dc-dropdown__display-placeholder-text\"\\n  }, placeholder)));\\n};\\n\\ndisplay_text_DisplayText.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_title: external_prop_types_default.a.bool,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n};\\n/* harmony default export */ var display_text = (display_text_DisplayText);\\n// EXTERNAL MODULE: ./src/components/icon/index.js + 1 modules\\nvar icon = __webpack_require__(3);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar dropdown_Dropdown =\\n/*#__PURE__*/\\nfunction (_React$Component) {\\n  _inherits(Dropdown, _React$Component);\\n\\n  function Dropdown() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, Dropdown);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.list_ref = external_react_default.a.createRef();\\n    _this.state = {\\n      curr_index: 0,\\n      is_list_visible: false,\\n      list_height: 0,\\n      list_width: 0\\n    };\\n\\n    _this.handleSelect = function (item) {\\n      if (item.value !== _this.props.value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: item.value\\n          }\\n        });\\n\\n        _this.updateSelected(item.value);\\n      }\\n\\n      _this.handleVisibility();\\n    };\\n\\n    _this.setWrapperRef = function (node) {\\n      return _this.wrapper_ref = node;\\n    };\\n\\n    _this.handleClickOutside = function (event) {\\n      if (_this.wrapper_ref && !_this.wrapper_ref.contains(event.target) && !_this.wrapper_ref.contains(event.path[0]) && // event.path[0] is the node that the event originated from, it does not need to walk the array\\n      _this.state.is_list_visible) {\\n        if (typeof _this.props.handleBlur === \\'function\\') {\\n          _this.props.handleBlur({\\n            target: {\\n              name: _this.props.name\\n            }\\n          });\\n        }\\n\\n        _this.setState({\\n          is_list_visible: false\\n        });\\n      }\\n    };\\n\\n    _this.handleVisibility = function () {\\n      _this.setState(function (state) {\\n        return {\\n          is_list_visible: !state.is_list_visible\\n        };\\n      });\\n    };\\n\\n    _this.handleToggle = function (value) {\\n      if (_this.state.is_list_visible && _this.props.value !== value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: value\\n          }\\n        });\\n      }\\n\\n      _this.handleVisibility();\\n    };\\n\\n    _this.onKeyPressed = function (event) {\\n      if (_this.is_single_option) return;\\n\\n      if (event.keyCode === 9) {\\n        // Tab is pressed\\n        if (_this.state.is_list_visible) {\\n          _this.handleVisibility();\\n        }\\n\\n        return;\\n      }\\n\\n      event.preventDefault();\\n      var index = _this.props.value ? getItemFromValue(_this.props.list, _this.props.value) : 0;\\n      var value = _this.props.value ? getValueFromIndex(_this.props.list, _this.state.curr_index) : null;\\n\\n      switch (event.keyCode) {\\n        case 13: // Enter is pressed\\n\\n        case 32:\\n          // Space is pressed\\n          if (value) _this.handleToggle(value);\\n          break;\\n\\n        case 38:\\n          // Up Arrow is pressed\\n          if (_this.state.is_list_visible) {\\n            var prev_index = getPrevIndex(_this.state.curr_index, index.length);\\n\\n            _this.setState({\\n              curr_index: prev_index\\n            });\\n          }\\n\\n          break;\\n\\n        case 40:\\n          // Down Arrow is pressed\\n          if (_this.state.is_list_visible) {\\n            var next_index = getNextIndex(_this.state.curr_index, index.length);\\n\\n            _this.setState({\\n              curr_index: next_index\\n            });\\n          } else if (!_this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 37:\\n          // Left arrow is pressed\\n          if (!_this.state.is_list_visible && _this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 39:\\n          // Right Arrow is pressed\\n          if (_this.state.is_list_visible && _this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        default:\\n      } // For char presses, we do a search for the item:\\n\\n\\n      if (event.key.length === 1 && _this.props.list.length) {\\n        var _char = event.key.toLowerCase();\\n\\n        var firstChars = _this.props.list.map(function (x) {\\n          return typeof x === \\'string\\' && x.text[0].toLowerCase();\\n        });\\n\\n        var idx; // Tapping the same character again jumps to the next match:\\n\\n        if (_this.state.curr_index) {\\n          idx = firstChars.indexOf(_char, _this.state.curr_index + 1);\\n        }\\n\\n        if (idx === undefined || idx === -1) {\\n          idx = firstChars.indexOf(_char);\\n        }\\n\\n        if (idx >= 0) {\\n          _this.setState({\\n            curr_index: idx\\n          });\\n        }\\n      }\\n    };\\n\\n    _this.setListDimension = function () {\\n      return _this.setState({\\n        list_width: _this.list_ref.current.offsetWidth,\\n        list_height: _this.list_ref.current.offsetHeight\\n      });\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(Dropdown, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.updateSelected(this.props.value);\\n      document.addEventListener(\\'mousedown\\', this.handleClickOutside, {\\n        passive: true\\n      });\\n    }\\n  }, {\\n    key: \"componentDidUpdate\",\\n    value: function componentDidUpdate(prevProps) {\\n      if (prevProps.value !== this.props.value) {\\n        this.updateSelected(this.props.value);\\n      }\\n    }\\n  }, {\\n    key: \"componentWillUnmount\",\\n    value: function componentWillUnmount() {\\n      document.removeEventListener(\\'mousedown\\', this.handleClickOutside);\\n    }\\n  }, {\\n    key: \"updateSelected\",\\n    value: function updateSelected(value) {\\n      this.setState({\\n        curr_index: getItemFromValue(this.props.list, value).number\\n      });\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      if (this.props.is_nativepicker) {\\n        return external_react_default.a.createElement(native_select, {\\n          name: this.props.name,\\n          value: this.props.value,\\n          list: this.props.list,\\n          onChange: this.props.onChange\\n        });\\n      }\\n\\n      var getDropDownAlignment = function getDropDownAlignment() {\\n        if (_this2.props.is_alignment_left) return _this2.computed_offset_left;else if (_this2.props.is_alignment_top) return _this2.computed_offset_top;\\n        return null;\\n      };\\n\\n      return external_react_default.a.createElement(external_react_default.a.Fragment, null, external_react_default.a.createElement(\"input\", {\\n        className: \"dc-dropdown__inner\",\\n        autoComplete: \"off\",\\n        name: this.props.name,\\n        readOnly: \"readonly\",\\n        type: \"hidden\",\\n        value: this.props.value || 0\\n      }), external_react_default.a.createElement(\"div\", {\\n        ref: this.setWrapperRef,\\n        className: this.container_class_name\\n      }, this.props.label && external_react_default.a.createElement(\"span\", {\\n        className: external_classnames_default()(\\'dc-dropdown__label\\', {\\n          \\'dc-dropdown__label--clicked\\': this.state.is_list_visible\\n        })\\n      }, this.props.label), external_react_default.a.createElement(\"div\", {\\n        className: this.dropdown_display_class_name,\\n        tabIndex: this.is_single_option ? \\'-1\\' : \\'0\\',\\n        onClick: this.handleVisibility,\\n        onKeyDown: this.onKeyPressed\\n      }, external_react_default.a.createElement(display_text, {\\n        has_symbol: this.props.has_symbol,\\n        name: this.props.name,\\n        is_title: this.state.is_list_visible,\\n        placeholder: this.props.placeholder,\\n        value: this.props.value || 0,\\n        list: this.props.list,\\n        is_align_text_left: this.props.is_align_text_left\\n      })), !this.is_single_option && external_react_default.a.createElement(icon[\"default\"], {\\n        icon: this.props.is_alignment_left ? \\'IcChevronLeft\\' : \\'IcChevronDown\\',\\n        className: external_classnames_default()(\\'dc-dropdown__select-arrow\\', {\\n          \\'dc-dropdown__select-arrow--left\\': this.props.is_alignment_left\\n        })\\n      }), this.props.error && external_react_default.a.createElement(\"p\", {\\n        className: \"dc-field-error\"\\n      }, this.props.error), external_react_default.a.createElement(external_react_transition_group_[\"CSSTransition\"], {\\n        \"in\": this.state.is_list_visible,\\n        timeout: 100,\\n        classNames: this.transition_class_names,\\n        onEntered: this.setListDimension,\\n        unmountOnExit: true\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.dropdown_list_class_names\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.list_class_names,\\n        ref: this.list_ref,\\n        style: getDropDownAlignment()\\n      }, external_react_default.a.createElement(themed_scrollbars[\"default\"], {\\n        autoHeight: true,\\n        autoHide: true,\\n        autoHeightMax: 200,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        }\\n      }, Array.isArray(this.props.list) ? external_react_default.a.createElement(dropdown_items, {\\n        className: this.props.classNameItems,\\n        index: this.state.curr_index,\\n        handleSelect: this.handleSelect,\\n        has_symbol: this.props.has_symbol,\\n        items: this.props.list,\\n        name: this.props.name,\\n        is_align_text_left: this.props.is_align_text_left,\\n        value: this.props.value\\n      }) : Object.keys(this.props.list).map(function (key, idx) {\\n        return external_react_default.a.createElement(external_react_default.a.Fragment, {\\n          key: key\\n        }, external_react_default.a.createElement(\"div\", {\\n          className: external_classnames_default()(\\'dc-list__label\\', _this2.props.classNameLabel)\\n        }, key), external_react_default.a.createElement(dropdown_items, {\\n          className: _this2.props.classNameItems,\\n          handleSelect: _this2.handleSelect,\\n          has_symbol: _this2.props.has_symbol,\\n          items: _this2.props.list[key],\\n          name: _this2.props.name,\\n          is_align_text_left: _this2.props.is_align_text_left,\\n          value: _this2.props.value\\n        }), idx !== Object.keys(_this2.props.list).length - 1 && external_react_default.a.createElement(\"span\", {\\n          className: \"dc-list__separator\"\\n        }));\\n      })))))));\\n    }\\n  }, {\\n    key: \"computed_offset_left\",\\n\\n    /**\\n     * Calculate the offset for the dropdown list based on its width\\n     *\\n     * @return {{transform: string}}\\n     */\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(calc(-\".concat(this.state.list_width, \"px - 12px), 0, 0px)\")\\n      };\\n    }\\n    /**\\n     * Calculate the offset for the dropdown list based on its height\\n     *\\n     * @return {{transform: string}}\\n     */\\n\\n  }, {\\n    key: \"computed_offset_top\",\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(0, calc(-\".concat(this.state.list_height, \"px - 16px), 0px)\")\\n      };\\n    }\\n  }, {\\n    key: \"is_single_option\",\\n    get: function get() {\\n      return Array.isArray(this.props.list) ? this.props.list.length < 2 : // object has less than two props or inner object has less than two props\\n      Object.keys(this.props.list).length && Object.keys(this.props.list).length < 2 && this.props.list[Object.keys(this.props.list)[0]].length < 2;\\n    }\\n  }, {\\n    key: \"container_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown-container\\', this.props.className, {\\n        \\'dc-dropdown--has-placeholder\\': this.props.placeholder,\\n        \\'dc-dropdown--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown--show\\': this.state.is_list_visible,\\n        \\'dc-dropdown--disabled\\': this.is_single_option || this.props.disabled\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_display_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__display\\', this.props.classNameDisplay, {\\n        \\'dc-dropdown__display--clicked\\': this.state.is_list_visible,\\n        \\'dc-dropdown__display--has-symbol\\': this.props.has_symbol,\\n        \\'dc-dropdown__display--no-border\\': this.props.no_border,\\n        \\'dc-dropdown__display--is-left-text\\': this.props.is_align_text_left\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__list\\', {\\n        \\'dc-dropdown__list--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown__list--top\\': this.props.is_alignment_top\\n      });\\n    }\\n  }, {\\n    key: \"list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-list\\', {\\n        \\'dc-list--left\\': this.props.is_alignment_left\\n      });\\n    }\\n  }, {\\n    key: \"transition_class_names\",\\n    get: function get() {\\n      return {\\n        enter: \"dc-dropdown__list--enter\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter\\' : \\'\\'),\\n        enterDone: \"dc-dropdown__list--enter-done\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter-done\\' : \\'\\'),\\n        exit: \"dc-dropdown__list--exit\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--exit\\' : \\'\\')\\n      };\\n    }\\n  }]);\\n\\n  return Dropdown;\\n}(external_react_default.a.Component);\\n\\ndropdown_Dropdown.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNameDisplay: external_prop_types_default.a.string,\\n  classNameItems: external_prop_types_default.a.string,\\n  classNameLabel: external_prop_types_default.a.string,\\n  disabled: external_prop_types_default.a.bool,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_alignment_left: external_prop_types_default.a.bool,\\n  is_nativepicker: external_prop_types_default.a.bool,\\n  label: external_prop_types_default.a.string,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  no_border: external_prop_types_default.a.bool,\\n  onChange: external_prop_types_default.a.func,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown = (dropdown_Dropdown);\\n// EXTERNAL MODULE: ./src/components/dropdown/dropdown.scss\\nvar dropdown_dropdown = __webpack_require__(35);\\n\\n// EXTERNAL MODULE: ./src/components/dropdown/list.scss\\nvar dropdown_list = __webpack_require__(36);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/index.js\\n\\n\\n\\n/* harmony default export */ var components_dropdown = __webpack_exports__[\"default\"] = (dropdown);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///53\\n')}}).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZHJvcGRvd24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL3ByaXZhdGUvdmFyL3d3dy9Db21wYW55L0JpbmFyeS9kZXJpdi1hcHAvcGFja2FnZXMvY29tcG9uZW50cy9saWIvZHJvcGRvd24uanM/NzQ2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSxnKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1nKHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSxyZXF1aXJlKFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cFwiKSxyZXF1aXJlKFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIikscmVxdWlyZShcInJlYWN0LXRpbnktcG9wb3ZlclwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJwcm9wLXR5cGVzXCIsXCJyZWFjdFwiLFwiY2xhc3NuYW1lc1wiLFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cFwiLFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIixcInJlYWN0LXRpbnktcG9wb3ZlclwiXSxnKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzW1wiQGRlcml2L2NvbXBvbmVudFwiXT1nKHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSxyZXF1aXJlKFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cFwiKSxyZXF1aXJlKFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIikscmVxdWlyZShcInJlYWN0LXRpbnktcG9wb3ZlclwiKSk6ZVtcIkBkZXJpdi9jb21wb25lbnRcIl09ZyhlW1wicHJvcC10eXBlc1wiXSxlLnJlYWN0LGUuY2xhc3NuYW1lcyxlW1wicmVhY3QtdHJhbnNpdGlvbi1ncm91cFwiXSxlW1widHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIl0sZVtcInJlYWN0LXRpbnktcG9wb3ZlclwiXSl9KHdpbmRvdyxmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18sX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fLF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXyxfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X18sX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTBfXyxfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xNV9fKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIGc9e307ZnVuY3Rpb24gSSh0KXtpZihnW3RdKXJldHVybiBnW3RdLmV4cG9ydHM7dmFyIG49Z1t0XT17aTp0LGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbdF0uY2FsbChuLmV4cG9ydHMsbixuLmV4cG9ydHMsSSksbi5sPSEwLG4uZXhwb3J0c31yZXR1cm4gSS5tPWUsSS5jPWcsSS5kPWZ1bmN0aW9uKGUsZyx0KXtJLm8oZSxnKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsZyx7ZW51bWVyYWJsZTohMCxnZXQ6dH0pfSxJLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sSS50PWZ1bmN0aW9uKGUsZyl7aWYoMSZnJiYoZT1JKGUpKSw4JmcpcmV0dXJuIGU7aWYoNCZnJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PU9iamVjdC5jcmVhdGUobnVsbCk7aWYoSS5yKHQpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJmcmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgbiBpbiBlKUkuZCh0LG4sZnVuY3Rpb24oZyl7cmV0dXJuIGVbZ119LmJpbmQobnVsbCxuKSk7cmV0dXJuIHR9LEkubj1mdW5jdGlvbihlKXt2YXIgZz1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gSS5kKGcsXCJhXCIsZyksZ30sSS5vPWZ1bmN0aW9uKGUsZyl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLGcpfSxJLnA9XCJcIixJKEkucz01Myl9KHswOmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTUM1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqYjIxd2IyNWxiblF2WlhoMFpYSnVZV3dnWENKd2NtOXdMWFI1Y0dWelhDSS9Nemd6TWlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZlh6QmZYenNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzBcXG5cIil9LDE6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNUzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZaWGgwWlhKdVlXd2dYQ0p5WldGamRGd2lQelU0T0dVaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmZYMWRGUWxCQlEwdGZSVmhVUlZKT1FVeGZUVTlFVlV4RlgxOHhYMTg3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8xXFxuXCIpfSwxMDpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7ZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTBfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVEF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMMlY0ZEdWeWJtRnNJRndpZEhRdGNtVmhZM1F0WTNWemRHOXRMWE5qY205c2JHSmhjbk5jSWo4eE1UWTNJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDE5WFJVSlFRVU5MWDBWWVZFVlNUa0ZNWDAxUFJGVk1SVjlmTVRCZlh6c2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMTBcXG5cIil9LDEzOmZ1bmN0aW9uKG1vZHVsZSxfX3dlYnBhY2tfZXhwb3J0c19fLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO2V2YWwoJ19fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuc2Nzc1xcbnZhciB0aGVtZWRfc2Nyb2xsYmFycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJyZWFjdFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInR0LXJlYWN0LWN1c3RvbS1zY3JvbGxiYXJzXCJcXG52YXIgZXh0ZXJuYWxfdHRfcmVhY3RfY3VzdG9tX3Njcm9sbGJhcnNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy90aGVtZWQtc2Nyb2xsYmFycy90aGVtZWQtc2Nyb2xsYmFycy5qc3hcXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XFxuXFxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuXFxuXFxuXFxudmFyIHRoZW1lZF9zY3JvbGxiYXJzX1RoZW1lZFNjcm9sbGJhcnMgPVxcbi8qI19fUFVSRV9fKi9cXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xcbiAgX2luaGVyaXRzKFRoZW1lZFNjcm9sbGJhcnMsIF9SZWFjdCRDb21wb25lbnQpO1xcblxcbiAgZnVuY3Rpb24gVGhlbWVkU2Nyb2xsYmFycygpIHtcXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRoZW1lZFNjcm9sbGJhcnMpO1xcblxcbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRoZW1lZFNjcm9sbGJhcnMpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xcbiAgfVxcblxcbiAgX2NyZWF0ZUNsYXNzKFRoZW1lZFNjcm9sbGJhcnMsIFt7XFxuICAgIGtleTogXCJyZW5kZXJcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcXG4gICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZXh0ZXJuYWxfdHRfcmVhY3RfY3VzdG9tX3Njcm9sbGJhcnNfW1wiU2Nyb2xsYmFyc1wiXSwgX2V4dGVuZHMoe1xcbiAgICAgICAgcmVmOiB0aGlzLnByb3BzLmxpc3RfcmVmLFxcbiAgICAgICAgcmVuZGVyVHJhY2tIb3Jpem9udGFsOiBmdW5jdGlvbiByZW5kZXJUcmFja0hvcml6b250YWwocHJvcHMpIHtcXG4gICAgICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJkYy10aGVtZWQtc2Nyb2xsYmFyc19fdHJhY2stLWhvcml6b250YWxcIlxcbiAgICAgICAgICB9KSk7XFxuICAgICAgICB9LFxcbiAgICAgICAgcmVuZGVyVHJhY2tWZXJ0aWNhbDogZnVuY3Rpb24gcmVuZGVyVHJhY2tWZXJ0aWNhbChwcm9wcykge1xcbiAgICAgICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImRjLXRoZW1lZC1zY3JvbGxiYXJzX190cmFjay0tdmVydGljYWxcIlxcbiAgICAgICAgICB9KSk7XFxuICAgICAgICB9LFxcbiAgICAgICAgcmVuZGVyVGh1bWJIb3Jpem9udGFsOiBmdW5jdGlvbiByZW5kZXJUaHVtYkhvcml6b250YWwocHJvcHMpIHtcXG4gICAgICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJkYy10aGVtZWQtc2Nyb2xsYmFyc19fdGh1bWItLWhvcml6b250YWxcIlxcbiAgICAgICAgICB9KSk7XFxuICAgICAgICB9LFxcbiAgICAgICAgcmVuZGVyVGh1bWJWZXJ0aWNhbDogZnVuY3Rpb24gcmVuZGVyVGh1bWJWZXJ0aWNhbChwcm9wcykge1xcbiAgICAgICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImRjLXRoZW1lZC1zY3JvbGxiYXJzX190aHVtYi0tdmVydGljYWxcIlxcbiAgICAgICAgICB9KSk7XFxuICAgICAgICB9XFxuICAgICAgfSwgdGhpcy5wcm9wcyksIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gVGhlbWVkU2Nyb2xsYmFycztcXG59KGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5Db21wb25lbnQpO1xcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHRoZW1lZF9zY3JvbGxiYXJzX3RoZW1lZF9zY3JvbGxiYXJzID0gKHRoZW1lZF9zY3JvbGxiYXJzX1RoZW1lZFNjcm9sbGJhcnMpO1xcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvaW5kZXguanNcXG4vKiBjb25jYXRlZCBoYXJtb255IHJlZXhwb3J0IGRlZmF1bHQgKi9fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhlbWVkX3Njcm9sbGJhcnNfdGhlbWVkX3Njcm9sbGJhcnM7IH0pO1xcblxcblxcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UTXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUFaR1Z5YVhZdlkyOXRjRzl1Wlc1MEx5NHZjM0pqTDJOdmJYQnZibVZ1ZEhNdmRHaGxiV1ZrTFhOamNtOXNiR0poY25NdmRHaGxiV1ZrTFhOamNtOXNiR0poY25NdWFuTjRQelF4TWpFaUxDSjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTnZiWEJ2Ym1WdWRDOHVMM055WXk5amIyMXdiMjVsYm5SekwzUm9aVzFsWkMxelkzSnZiR3hpWVhKekwybHVaR1Y0TG1welB6YzFNelFpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCN0lGTmpjbTlzYkdKaGNuTWdmU0JtY205dElDZDBkQzF5WldGamRDMWpkWE4wYjIwdGMyTnliMnhzWW1GeWN5YzdYRzVjYm1Oc1lYTnpJRlJvWlcxbFpGTmpjbTlzYkdKaGNuTWdaWGgwWlc1a2N5QlNaV0ZqZEM1RGIyMXdiMjVsYm5RZ2UxeHVJQ0FnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHhUWTNKdmJHeGlZWEp6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WbVBYdDBhR2x6TG5CeWIzQnpMbXhwYzNSZmNtVm1mVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYm1SbGNsUnlZV05yU0c5eWFYcHZiblJoYkQxN2NISnZjSE1nUFQ0Z1BHUnBkaUI3TGk0dWNISnZjSE45SUdOc1lYTnpUbUZ0WlQwblpHTXRkR2hsYldWa0xYTmpjbTlzYkdKaGNuTmZYM1J5WVdOckxTMW9iM0pwZW05dWRHRnNKeUF2UG4xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEpVY21GamExWmxjblJwWTJGc1BYdHdjbTl3Y3lBOVBpQThaR2wySUhzdUxpNXdjbTl3YzMwZ1kyeGhjM05PWVcxbFBTZGtZeTEwYUdWdFpXUXRjMk55YjJ4c1ltRnljMTlmZEhKaFkyc3RMWFpsY25ScFkyRnNKeUF2UG4xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEpVYUhWdFlraHZjbWw2YjI1MFlXdzllM0J5YjNCeklEMCtJRHhrYVhZZ2V5NHVMbkJ5YjNCemZTQmpiR0Z6YzA1aGJXVTlKMlJqTFhSb1pXMWxaQzF6WTNKdmJHeGlZWEp6WDE5MGFIVnRZaTB0YUc5eWFYcHZiblJoYkNjZ0x6NTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVZHaDFiV0pXWlhKMGFXTmhiRDE3Y0hKdmNITWdQVDRnUEdScGRpQjdMaTR1Y0hKdmNITjlJR05zWVhOelRtRnRaVDBuWkdNdGRHaGxiV1ZrTFhOamNtOXNiR0poY25OZlgzUm9kVzFpTFMxMlpYSjBhV05oYkNjZ0x6NTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleTR1TG5Sb2FYTXVjSEp2Y0hOOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVjSEp2Y0hNdVkyaHBiR1J5Wlc1OVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDFOamNtOXNiR0poY25NK1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JVYUdWdFpXUlRZM0p2Ykd4aVlYSnpPMXh1SWl3aWFXMXdiM0owSUNjdUwzUm9aVzFsWkMxelkzSnZiR3hpWVhKekxuTmpjM01uTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWNtOXRJQ2N1TDNSb1pXMWxaQzF6WTNKdmJHeGlZWEp6TG1wemVDYzdYRzRpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVXhCTzBGQlYwRTdPenM3UVVGa1FUdEJRVU5CTzBGQlowSkJPenRCUTNCQ1FUdEJRVUZCTzBGQlJVRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMTNcXG4nKX0sMTU6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE1X187Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRVdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QVpHVnlhWFl2WTI5dGNHOXVaVzUwTDJWNGRHVnlibUZzSUZ3aWNtVmhZM1F0ZEdsdWVTMXdiM0J2ZG1WeVhDSS9OelF4TVNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZlh6RTFYMTg3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8xNVxcblwiKX0sMTc6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbiAgICBpZihmYWxzZSkgeyB2YXIgY3NzUmVsb2FkOyB9XFxuICAvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVGN1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZkR2hsYldWa0xYTmpjbTlzYkdKaGNuTXZkR2hsYldWa0xYTmpjbTlzYkdKaGNuTXVjMk56Y3o4ek5qSmpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklHVjRkSEpoWTNSbFpDQmllU0J0YVc1cExXTnpjeTFsZUhSeVlXTjBMWEJzZFdkcGJseHVJQ0FnSUdsbUtHMXZaSFZzWlM1b2IzUXBJSHRjYmlBZ0lDQWdJQzh2SURFMU9ERTFOek00TnpBM09ESmNiaUFnSUNBZ0lIWmhjaUJqYzNOU1pXeHZZV1FnUFNCeVpYRjFhWEpsS0Z3aUlTNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlqYzNNdGFHOTBMV3h2WVdSbGNpOW9iM1JOYjJSMWJHVlNaWEJzWVdObGJXVnVkQzVxYzF3aUtTaHRiMlIxYkdVdWFXUXNJSHRjSW1acGJHVk5ZWEJjSWpwY0ludG1hV3hsVG1GdFpYMWNJbjBwTzF4dUlDQWdJQ0FnYlc5a2RXeGxMbWh2ZEM1a2FYTndiM05sS0dOemMxSmxiRzloWkNrN1hHNGdJQ0FnSUNCdGIyUjFiR1V1YUc5MExtRmpZMlZ3ZENoMWJtUmxabWx1WldRc0lHTnpjMUpsYkc5aFpDazdPMXh1SUNBZ0lIMWNiaUFnSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJMR2REUVV0Qk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzE3XFxuXCIpfSwyOmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yX187Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWk1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqYjIxd2IyNWxiblF2WlhoMFpYSnVZV3dnWENKamJHRnpjMjVoYldWelhDSS9ZV0ZoWWlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZlh6SmZYenNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzJcXG5cIil9LDIxOmZ1bmN0aW9uKG1vZHVsZSxfX3dlYnBhY2tfZXhwb3J0c19fLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO2V2YWwoJ19fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwiY2xhc3NuYW1lc1wiXFxudmFyIGV4dGVybmFsX2NsYXNzbmFtZXNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcXG52YXIgZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9jbGFzc25hbWVzXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInByb3AtdHlwZXNcIlxcbnZhciBleHRlcm5hbF9wcm9wX3R5cGVzXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XFxudmFyIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcHJvcF90eXBlc18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJyZWFjdFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInJlYWN0LXRpbnktcG9wb3ZlclwiXFxudmFyIGV4dGVybmFsX3JlYWN0X3RpbnlfcG9wb3Zlcl8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcXG52YXIgZXh0ZXJuYWxfcmVhY3RfdGlueV9wb3BvdmVyX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0X3RpbnlfcG9wb3Zlcl8pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9pY29uL2luZGV4LmpzICsgMSBtb2R1bGVzXFxudmFyIGNvbXBvbmVudHNfaWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9wb3BvdmVyL3BvcG92ZXIuanN4XFxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc25cXCd0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc25cXCd0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XFxuXFxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG52YXIgcG9wb3Zlcl9Qb3BvdmVyID1cXG4vKiNfX1BVUkVfXyovXFxuZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XFxuICBfaW5oZXJpdHMoUG9wb3ZlciwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xcblxcbiAgZnVuY3Rpb24gUG9wb3Zlcihwcm9wcykge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BvdmVyKTtcXG5cXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUG9wb3ZlcikuY2FsbCh0aGlzLCBwcm9wcykpO1xcblxcbiAgICBfdGhpcy50b2dnbGVPcGVuID0gZnVuY3Rpb24gKCkge1xcbiAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7XFxuICAgICAgICBpc19vcGVuOiBCb29sZWFuKF90aGlzLnByb3BzLm1lc3NhZ2UpXFxuICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIF90aGlzLnRvZ2dsZUNsb3NlID0gZnVuY3Rpb24gKCkge1xcbiAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7XFxuICAgICAgICBpc19vcGVuOiBmYWxzZVxcbiAgICAgIH0pO1xcbiAgICB9O1xcblxcbiAgICBfdGhpcy5zdGF0ZSA9IHtcXG4gICAgICBpc19vcGVuOiBmYWxzZVxcbiAgICB9O1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuXFxuICBfY3JlYXRlQ2xhc3MoUG9wb3ZlciwgW3tcXG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcXG4gICAgICB0aGlzLnNldFN0YXRlKHtcXG4gICAgICAgIGlzX29wZW46IHRoaXMucHJvcHMuaGFzX2Vycm9yXFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlbmRlclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXFxuICAgICAgICAgIGFsaWdubWVudCA9IF90aGlzJHByb3BzLmFsaWdubWVudCxcXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxcbiAgICAgICAgICBjbGFzc05hbWVCdWJibGUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWVCdWJibGUsXFxuICAgICAgICAgIGNsYXNzTmFtZVRhcmdldCA9IF90aGlzJHByb3BzLmNsYXNzTmFtZVRhcmdldCxcXG4gICAgICAgICAgY2xhc3NOYW1lVGFyZ2V0SWNvbiA9IF90aGlzJHByb3BzLmNsYXNzTmFtZVRhcmdldEljb24sXFxuICAgICAgICAgIGNvdW50ZXIgPSBfdGhpcyRwcm9wcy5jb3VudGVyLFxcbiAgICAgICAgICBkaXNhYmxlX21lc3NhZ2VfaWNvbiA9IF90aGlzJHByb3BzLmRpc2FibGVfbWVzc2FnZV9pY29uLFxcbiAgICAgICAgICBkaXNhYmxlX3RhcmdldF9pY29uID0gX3RoaXMkcHJvcHMuZGlzYWJsZV90YXJnZXRfaWNvbixcXG4gICAgICAgICAgaGFzX2Vycm9yID0gX3RoaXMkcHJvcHMuaGFzX2Vycm9yLFxcbiAgICAgICAgICBpY29uID0gX3RoaXMkcHJvcHMuaWNvbixcXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcXG4gICAgICAgICAgaXNfb3BlbiA9IF90aGlzJHByb3BzLmlzX29wZW4sXFxuICAgICAgICAgIG1hcmdpbiA9IF90aGlzJHByb3BzLm1hcmdpbixcXG4gICAgICAgICAgbWVzc2FnZSA9IF90aGlzJHByb3BzLm1lc3NhZ2UsXFxuICAgICAgICAgIHpJbmRleCA9IF90aGlzJHByb3BzLnpJbmRleDtcXG4gICAgICB2YXIgaGFzX2V4dGVybmFsX29wZW5fc3RhdGUgPSBpc19vcGVuICE9PSB1bmRlZmluZWQ7XFxuICAgICAgdmFyIGljb25fY2xhc3NfbmFtZSA9IGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCgpKGNsYXNzTmFtZVRhcmdldEljb24sIGljb24pO1xcbiAgICAgIHJldHVybiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChleHRlcm5hbF9yZWFjdF90aW55X3BvcG92ZXJfZGVmYXVsdC5hLCB7XFxuICAgICAgICBpc09wZW46IGhhc19leHRlcm5hbF9vcGVuX3N0YXRlID8gaXNfb3BlbiA6IHRoaXMuc3RhdGUuaXNfb3BlbixcXG4gICAgICAgIHBvc2l0aW9uOiBhbGlnbm1lbnQsXFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IDAuMjUsXFxuICAgICAgICBwYWRkaW5nOiBtYXJnaW4gKyA4LFxcbiAgICAgICAgY29udGFpbmVyU3R5bGU6IHtcXG4gICAgICAgICAgekluZGV4OiB6SW5kZXggfHwgMVxcbiAgICAgICAgfSxcXG4gICAgICAgIGNvbnRlbnQ6IGZ1bmN0aW9uIGNvbnRlbnQoX3JlZikge1xcbiAgICAgICAgICB2YXIgcG9zaXRpb24gPSBfcmVmLnBvc2l0aW9uLFxcbiAgICAgICAgICAgICAgdGFyZ2V0UmVjdCA9IF9yZWYudGFyZ2V0UmVjdCxcXG4gICAgICAgICAgICAgIHBvcG92ZXJSZWN0ID0gX3JlZi5wb3BvdmVyUmVjdDtcXG4gICAgICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGV4dGVybmFsX3JlYWN0X3RpbnlfcG9wb3Zlcl9bXCJBcnJvd0NvbnRhaW5lclwiXSwge1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcXG4gICAgICAgICAgICB0YXJnZXRSZWN0OiB0YXJnZXRSZWN0LFxcbiAgICAgICAgICAgIHBvcG92ZXJSZWN0OiBwb3BvdmVyUmVjdCxcXG4gICAgICAgICAgICBhcnJvd0NvbG9yOiBoYXNfZXJyb3IgPyBcXCd2YXIoLS1zdGF0dXMtZGFuZ2VyKVxcJyA6IFxcJ3ZhcigtLWdlbmVyYWwtYWN0aXZlKVxcJyxcXG4gICAgICAgICAgICBhcnJvd1NpemU6IDVcXG4gICAgICAgICAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xcbiAgICAgICAgICAgIGlkOiBpZCxcXG4gICAgICAgICAgICBjbGFzc05hbWU6IGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCgpKGNsYXNzTmFtZUJ1YmJsZSwgXFwnZGMtcG9wb3Zlcl9fYnViYmxlXFwnLCB7XFxuICAgICAgICAgICAgICBcXCdkYy1wb3BvdmVyX19idWJibGUtLWVycm9yXFwnOiBoYXNfZXJyb3JcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgICB9LCAhZGlzYWJsZV9tZXNzYWdlX2ljb24gJiYgaWNvbiA9PT0gXFwnaW5mb1xcJyAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImlcIiwge1xcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJkYy1wb3BvdmVyX19idWJibGVfX2ljb25cIlxcbiAgICAgICAgICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChjb21wb25lbnRzX2ljb25bXCJkZWZhdWx0XCJdLCB7XFxuICAgICAgICAgICAgaWNvbjogXCJJY0luZm9CbHVlXCJcXG4gICAgICAgICAgfSkpLCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xcbiAgICAgICAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtcG9wb3Zlcl9fYnViYmxlX190ZXh0XFwnLCB7XFxuICAgICAgICAgICAgICBcXCdkYy1wb3BvdmVyX19idWJibGVfX3RleHQtLWVycm9yXFwnOiBoYXNfZXJyb3JcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgICB9LCBtZXNzYWdlKSkpO1xcbiAgICAgICAgfVxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtcG9wb3ZlclxcJywgY2xhc3NOYW1lKSxcXG4gICAgICAgIGlkOiBpZCxcXG4gICAgICAgIG9uTW91c2VFbnRlcjogaGFzX2V4dGVybmFsX29wZW5fc3RhdGUgPyB1bmRlZmluZWQgOiB0aGlzLnRvZ2dsZU9wZW4sXFxuICAgICAgICBvbk1vdXNlTGVhdmU6IGhhc19leHRlcm5hbF9vcGVuX3N0YXRlID8gdW5kZWZpbmVkIDogdGhpcy50b2dnbGVDbG9zZVxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoY2xhc3NOYW1lVGFyZ2V0LCBcXCdkYy1wb3BvdmVyX190YXJnZXRcXCcpXFxuICAgICAgfSwgIWRpc2FibGVfdGFyZ2V0X2ljb24gJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogbWVzc2FnZSA/IFxcJ2RjLXBvcG92ZXJfX3RhcmdldF9faWNvblxcJyA6IFxcJ2RjLXBvcG92ZXJfX3RhcmdldF9faWNvbi0tZGlzYWJsZWRcXCdcXG4gICAgICB9LCBpY29uID09PSBcXCdpbmZvXFwnICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfaWNvbltcImRlZmF1bHRcIl0sIHtcXG4gICAgICAgIGljb246IFwiSWNJbmZvT3V0bGluZVwiLFxcbiAgICAgICAgY2xhc3NOYW1lOiBpY29uX2NsYXNzX25hbWVcXG4gICAgICB9KSwgaWNvbiA9PT0gXFwncXVlc3Rpb25cXCcgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c19pY29uW1wiZGVmYXVsdFwiXSwge1xcbiAgICAgICAgaWNvbjogXCJJY1Vua25vd25cIixcXG4gICAgICAgIGNsYXNzTmFtZTogaWNvbl9jbGFzc19uYW1lXFxuICAgICAgfSksIGljb24gPT09IFxcJ2RvdFxcJyAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChjb21wb25lbnRzX2ljb25bXCJkZWZhdWx0XCJdLCB7XFxuICAgICAgICBpY29uOiBcIkljQ2lyY2xlXCIsXFxuICAgICAgICBjbGFzc05hbWU6IGljb25fY2xhc3NfbmFtZSxcXG4gICAgICAgIHNpemU6IDRcXG4gICAgICB9KSwgaWNvbiA9PT0gXFwnY291bnRlclxcJyAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBpY29uX2NsYXNzX25hbWVcXG4gICAgICB9LCBjb3VudGVyKSksIGNoaWxkcmVuKSkpO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gUG9wb3ZlcjtcXG59KGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtcXG5cXG5wb3BvdmVyX1BvcG92ZXIuZGVmYXVsdFByb3BzID0ge1xcbiAgcG9ydGFsX2NvbnRhaW5lcjogXFwnZGVyaXZfYXBwXFwnLFxcbiAgbWFyZ2luOiAwXFxufTtcXG5wb3BvdmVyX1BvcG92ZXIucHJvcFR5cGVzID0ge1xcbiAgYWxpZ25tZW50OiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBjaGlsZHJlbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubm9kZSxcXG4gIGNsYXNzTmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgY2xhc3NOYW1lQnViYmxlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBjbGFzc05hbWVUYXJnZXQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNsYXNzTmFtZVRhcmdldEljb246IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNvdW50ZXI6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm51bWJlcixcXG4gIGRpc2FibGVfbWVzc2FnZV9pY29uOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgZGlzYWJsZV90YXJnZXRfaWNvbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCxcXG4gIGhhc19lcnJvcjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCxcXG4gIGljb246IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9uZU9mKFtcXCdpbmZvXFwnLCBcXCdxdWVzdGlvblxcJywgXFwnZG90XFwnLCBcXCdjb3VudGVyXFwnXSksXFxuICBpZDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgaXNfb3BlbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCxcXG4gIG1hcmdpbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyLFxcbiAgbWVzc2FnZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9iamVjdF0pLFxcbiAgcG9ydGFsX2NvbnRhaW5lcjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgekluZGV4OiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5udW1iZXJcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHBvcG92ZXIgPSAocG9wb3Zlcl9Qb3BvdmVyKTtcXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLnNjc3NcXG52YXIgcG9wb3Zlcl9wb3BvdmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9wb3BvdmVyL2luZGV4LmpzXFxuXFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY29tcG9uZW50c19wb3BvdmVyID0gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAocG9wb3Zlcik7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWpFdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QVpHVnlhWFl2WTI5dGNHOXVaVzUwTHk0dmMzSmpMMk52YlhCdmJtVnVkSE12Y0c5d2IzWmxjaTl3YjNCdmRtVnlMbXB6ZUQ4ek5Ua3hJaXdpZDJWaWNHRmphem92TDBCa1pYSnBkaTlqYjIxd2IyNWxiblF2TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTl3YjNCdmRtVnlMMmx1WkdWNExtcHpQMkkyTmpjaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElHTnNZWE56VG1GdFpYTWdabkp2YlNBblkyeGhjM051WVcxbGN5YzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JVYVc1NVVHOXdiM1psY2l3Z2V5QkJjbkp2ZDBOdmJuUmhhVzVsY2lCOUlHWnliMjBnSjNKbFlXTjBMWFJwYm5rdGNHOXdiM1psY2ljN1hHNXBiWEJ2Y25RZ1NXTnZiaUJtY205dElDY3VMaTlwWTI5dUp6dGNibHh1WTJ4aGMzTWdVRzl3YjNabGNpQmxlSFJsYm1SeklGSmxZV04wTGxCMWNtVkRiMjF3YjI1bGJuUWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSEJ5YjNCektTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtIQnliM0J6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpTQTlJSHNnYVhOZmIzQmxiam9nWm1Gc2MyVWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjF3YjI1bGJuUkVhV1JOYjNWdWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJR2x6WDI5d1pXNDZJSFJvYVhNdWNISnZjSE11YUdGelgyVnljbTl5SUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSdloyZHNaVTl3Wlc0Z1BTQW9LU0E5UGlCMGFHbHpMbk5sZEZOMFlYUmxLSHNnYVhOZmIzQmxiam9nUW05dmJHVmhiaWgwYUdsekxuQnliM0J6TG0xbGMzTmhaMlVwSUgwcE8xeHVYRzRnSUNBZ2RHOW5aMnhsUTJ4dmMyVWdQU0FvS1NBOVBpQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ2FYTmZiM0JsYmpvZ1ptRnNjMlVnZlNrN1hHNWNiaUFnSUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZzYVdkdWJXVnVkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9hV3hrY21WdUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxRblZpWW14bExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsVkdGeVoyVjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFZHRnlaMlYwU1dOdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWE5oWW14bFgyMWxjM05oWjJWZmFXTnZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnBjMkZpYkdWZmRHRnlaMlYwWDJsamIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lYTmZaWEp5YjNJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWTI5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzE5dmNHVnVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRnlaMmx1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhwSmJtUmxlQ3hjYmlBZ0lDQWdJQ0FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhR0Z6WDJWNGRHVnlibUZzWDI5d1pXNWZjM1JoZEdVZ1BTQnBjMTl2Y0dWdUlDRTlQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2xqYjI1ZlkyeGhjM05mYm1GdFpTQTlJR05zWVhOelRtRnRaWE1vWTJ4aGMzTk9ZVzFsVkdGeVoyVjBTV052Yml3Z2FXTnZiaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQThWR2x1ZVZCdmNHOTJaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzA5d1pXNDllMmhoYzE5bGVIUmxjbTVoYkY5dmNHVnVYM04wWVhSbElEOGdhWE5mYjNCbGJpQTZJSFJvYVhNdWMzUmhkR1V1YVhOZmIzQmxibjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiajE3WVd4cFoyNXRaVzUwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeVlXNXphWFJwYjI1RWRYSmhkR2x2YmoxN01DNHlOWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVdSa2FXNW5QWHR0WVhKbmFXNGdLeUE0ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUmhhVzVsY2xOMGVXeGxQWHQ3SUhwSmJtUmxlRG9nZWtsdVpHVjRJSHg4SURFZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWlc1MFBYc29leUJ3YjNOcGRHbHZiaXdnZEdGeVoyVjBVbVZqZEN3Z2NHOXdiM1psY2xKbFkzUWdmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4UVhKeWIzZERiMjUwWVdsdVpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBYdHdiM05wZEdsdmJuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEZKbFkzUTllM1JoY21kbGRGSmxZM1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNCdmRtVnlVbVZqZEQxN2NHOXdiM1psY2xKbFkzUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbkp2ZDBOdmJHOXlQWHRvWVhOZlpYSnliM0lnUHlBbmRtRnlLQzB0YzNSaGRIVnpMV1JoYm1kbGNpa25JRG9nSjNaaGNpZ3RMV2RsYm1WeVlXd3RZV04wYVhabEtTZDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbkp2ZDFOcGVtVTllelY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpEMTdhV1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVnpLR05zWVhOelRtRnRaVUoxWW1Kc1pTd2dKMlJqTFhCdmNHOTJaWEpmWDJKMVltSnNaU2NzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJSakxYQnZjRzkyWlhKZlgySjFZbUpzWlMwdFpYSnliM0luT2lCb1lYTmZaWEp5YjNJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5RmthWE5oWW14bFgyMWxjM05oWjJWZmFXTnZiaUFtSmlCcFkyOXVJRDA5UFNBbmFXNW1ieWNnSmlZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFTQmpiR0Z6YzA1aGJXVTlKMlJqTFhCdmNHOTJaWEpmWDJKMVltSnNaVjlmYVdOdmJpYytYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4U1dOdmJpQnBZMjl1UFNkSlkwbHVabTlDYkhWbEp5QXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMmsrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyTnNZWE56VG1GdFpYTW9KMlJqTFhCdmNHOTJaWEpmWDJKMVltSnNaVjlmZEdWNGRDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNka1l5MXdiM0J2ZG1WeVgxOWlkV0ppYkdWZlgzUmxlSFF0TFdWeWNtOXlKem9nYUdGelgyVnljbTl5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdHRaWE56WVdkbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMEZ5Y205M1EyOXVkR0ZwYm1WeVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyTnNZWE56VG1GdFpYTW9KMlJqTFhCdmNHOTJaWEluTENCamJHRnpjMDVoYldVcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkQxN2FXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVRXOTFjMlZGYm5SbGNqMTdhR0Z6WDJWNGRHVnlibUZzWDI5d1pXNWZjM1JoZEdVZ1B5QjFibVJsWm1sdVpXUWdPaUIwYUdsekxuUnZaMmRzWlU5d1pXNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVRXOTFjMlZNWldGMlpUMTdhR0Z6WDJWNGRHVnlibUZzWDI5d1pXNWZjM1JoZEdVZ1B5QjFibVJsWm1sdVpXUWdPaUIwYUdsekxuUnZaMmRzWlVOc2IzTmxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5ZTJOc1lYTnpUbUZ0WlhNb1kyeGhjM05PWVcxbFZHRnlaMlYwTENBblpHTXRjRzl3YjNabGNsOWZkR0Z5WjJWMEp5bDlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleUZrYVhOaFlteGxYM1JoY21kbGRGOXBZMjl1SUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YVNCamJHRnpjMDVoYldVOWUyMWxjM05oWjJVZ1B5QW5aR010Y0c5d2IzWmxjbDlmZEdGeVoyVjBYMTlwWTI5dUp5QTZJQ2RrWXkxd2IzQnZkbVZ5WDE5MFlYSm5aWFJmWDJsamIyNHRMV1JwYzJGaWJHVmtKMzArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRwWTI5dUlEMDlQU0FuYVc1bWJ5Y2dKaVlnUEVsamIyNGdhV052YmowblNXTkpibVp2VDNWMGJHbHVaU2NnWTJ4aGMzTk9ZVzFsUFh0cFkyOXVYMk5zWVhOelgyNWhiV1Y5SUM4K2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2FXTnZiaUE5UFQwZ0ozRjFaWE4wYVc5dUp5QW1KaUE4U1dOdmJpQnBZMjl1UFNkSlkxVnVhMjV2ZDI0bklHTnNZWE56VG1GdFpUMTdhV052Ymw5amJHRnpjMTl1WVcxbGZTQXZQbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMmxqYjI0Z1BUMDlJQ2RrYjNRbklDWW1JRHhKWTI5dUlHbGpiMjQ5SjBsalEybHlZMnhsSnlCamJHRnpjMDVoYldVOWUybGpiMjVmWTJ4aGMzTmZibUZ0WlgwZ2MybDZaVDE3TkgwZ0x6NTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdHBZMjl1SUQwOVBTQW5ZMjkxYm5SbGNpY2dKaVlnUEhOd1lXNGdZMnhoYzNOT1lXMWxQWHRwWTI5dVgyTnNZWE56WDI1aGJXVjlQbnRqYjNWdWRHVnlmVHd2YzNCaGJqNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5cFBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tYMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMk5vYVd4a2NtVnVmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlZHbHVlVkJ2Y0c5MlpYSStYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNVFiM0J2ZG1WeUxtUmxabUYxYkhSUWNtOXdjeUE5SUh0Y2JpQWdJQ0J3YjNKMFlXeGZZMjl1ZEdGcGJtVnlPaUFuWkdWeWFYWmZZWEJ3Snl4Y2JpQWdJQ0J0WVhKbmFXNDZJREFzWEc1OU8xeHVYRzVRYjNCdmRtVnlMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JoYkdsbmJtMWxiblE2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMmhwYkdSeVpXNDZJRkJ5YjNCVWVYQmxjeTV1YjJSbExGeHVJQ0FnSUdOc1lYTnpUbUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JqYkdGemMwNWhiV1ZDZFdKaWJHVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ1kyeGhjM05PWVcxbFZHRnlaMlYwT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR05zWVhOelRtRnRaVlJoY21kbGRFbGpiMjQ2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMjkxYm5SbGNqb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNCa2FYTmhZbXhsWDIxbGMzTmhaMlZmYVdOdmJqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnWkdsellXSnNaVjkwWVhKblpYUmZhV052YmpvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdhR0Z6WDJWeWNtOXlPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCcFkyOXVPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XeWRwYm1adkp5d2dKM0YxWlhOMGFXOXVKeXdnSjJSdmRDY3NJQ2RqYjNWdWRHVnlKMTBwTEZ4dUlDQWdJR2xrT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR2x6WDI5d1pXNDZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUcxaGNtZHBiam9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ0lDQnRaWE56WVdkbE9pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRRY205d1ZIbHdaWE11YzNSeWFXNW5MQ0JRY205d1ZIbHdaWE11YjJKcVpXTjBYU2tzWEc0Z0lDQWdjRzl5ZEdGc1gyTnZiblJoYVc1bGNqb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCNlNXNWtaWGc2SUZCeWIzQlVlWEJsY3k1dWRXMWlaWElzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlFiM0J2ZG1WeU8xeHVJaXdpYVcxd2IzSjBJRkJ2Y0c5MlpYSWdabkp2YlNBbkxpOXdiM0J2ZG1WeUxtcHplQ2M3WEc1cGJYQnZjblFnSnk0dmNHOXdiM1psY2k1elkzTnpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVUc5d2IzWmxjanRjYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096dEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVUkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSa0U3UVVGVFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCVmtFN1FVRlhRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlZrRTdRVUZCUVR0QlFVRkJPMEZCUmtFN1FVRkhRVHRCUVVOQk96czdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk96czdRVUZOUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZ2UWtFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVV4Qk8wRkJVVUU3UVVGRFFUdEJRVU5CTzBGQlJFRTdRVUZHUVR0QlFVOUJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJTVUU3UVVGRFFUdEJRVVJCTzBGQlJFRTdRVUZ1UWtFN1FVRk9RVHRCUVhGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVcEJPMEZCVFVFN1FVRkJRVHRCUVVWQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZUUVRzN096dEJRVGxHUVR0QlFVTkJPMEZCWjBkQk8wRkJRMEU3UVVGRFFUdEJRVVpCTzBGQlMwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQmFrSkJPMEZCYjBKQk96czdPenRCUTJoSlFUdEJRVU5CTzBGQlJVRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMjFcXG4nKX0sMjM6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbiAgICBpZihmYWxzZSkgeyB2YXIgY3NzUmVsb2FkOyB9XFxuICAvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNak11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZjRzl3YjNabGNpOXdiM0J2ZG1WeUxuTmpjM00vWldWa05TSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCbGVIUnlZV04wWldRZ1lua2diV2x1YVMxamMzTXRaWGgwY21GamRDMXdiSFZuYVc1Y2JpQWdJQ0JwWmlodGIyUjFiR1V1YUc5MEtTQjdYRzRnSUNBZ0lDQXZMeUF4TlRneE5UY3pPRGN3TXpnelhHNGdJQ0FnSUNCMllYSWdZM056VW1Wc2IyRmtJRDBnY21WeGRXbHlaU2hjSWlFdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZM056TFdodmRDMXNiMkZrWlhJdmFHOTBUVzlrZFd4bFVtVndiR0ZqWlcxbGJuUXVhbk5jSWlrb2JXOWtkV3hsTG1sa0xDQjdYQ0ptYVd4bFRXRndYQ0k2WENKN1ptbHNaVTVoYldWOVhDSjlLVHRjYmlBZ0lDQWdJRzF2WkhWc1pTNW9iM1F1WkdsemNHOXpaU2hqYzNOU1pXeHZZV1FwTzF4dUlDQWdJQ0FnYlc5a2RXeGxMbWh2ZEM1aFkyTmxjSFFvZFc1a1pXWnBibVZrTENCamMzTlNaV3h2WVdRcE96dGNiaUFnSUNCOVhHNGdJQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFTeG5RMEZMUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMjNcXG5cIil9LDM6ZnVuY3Rpb24obW9kdWxlLF9fd2VicGFja19leHBvcnRzX18sX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZXZhbChcIl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFxcXCJjbGFzc25hbWVzXFxcIlxcbnZhciBleHRlcm5hbF9jbGFzc25hbWVzXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XFxudmFyIGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfY2xhc3NuYW1lc18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXFxcInByb3AtdHlwZXNcXFwiXFxudmFyIGV4dGVybmFsX3Byb3BfdHlwZXNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcXG52YXIgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9wcm9wX3R5cGVzXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcXFwicmVhY3RcXFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4XFxuXFxuXFxuIC8vIFRPRE86IFttb3ZlLXRvLXNoYXJlZF1cXG5cXG52YXIgZ2V0VXJsQmFzZSA9IGZ1bmN0aW9uIGdldFVybEJhc2UoKSB7XFxuICB2YXIgcGF0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XFxuICB2YXIgbCA9IHdpbmRvdy5sb2NhdGlvbjtcXG4gIGlmICghL15cXFxcLyhicl8pLy50ZXN0KGwucGF0aG5hbWUpKSByZXR1cm4gcGF0aDtcXG4gIHJldHVybiBcXFwiL1xcXCIuY29uY2F0KGwucGF0aG5hbWUuc3BsaXQoJy8nKVsxXSkuY29uY2F0KC9eXFxcXC8vLnRlc3QocGF0aCkgPyBwYXRoIDogXFxcIi9cXFwiLmNvbmNhdChwYXRoKSk7XFxufTsgLy8gVE9ETzogW21vdmUtdG8tc2hhcmVkXVxcblxcblxcbnZhciBnZXRLZWJhYkNhc2UgPSBmdW5jdGlvbiBnZXRLZWJhYkNhc2Uoc3RyKSB7XFxuICBpZiAoIXN0cikgcmV0dXJuIHN0cjtcXG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgJyQxLSQyJykgLy8gZ2V0IGFsbCBsb3dlcmNhc2UgbGV0dGVycyB0aGF0IGFyZSBuZWFyIHRvIHVwcGVyY2FzZSBvbmVzXFxuICAucmVwbGFjZSgvW1xcXFxzXSsvZywgJy0nKSAvLyByZXBsYWNlIGFsbCBzcGFjZXMgYW5kIGxvdyBkYXNoXFxuICAudG9Mb3dlckNhc2UoKTtcXG59O1xcblxcbnZhciBpY29uX0ljb24gPSBmdW5jdGlvbiBJY29uKF9yZWYpIHtcXG4gIHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcXG4gICAgICBjb2xvciA9IF9yZWYuY29sb3IsXFxuICAgICAgY3VzdG9tX2NvbG9yID0gX3JlZi5jdXN0b21fY29sb3IsXFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXFxuICAgICAgaWNvbiA9IF9yZWYuaWNvbixcXG4gICAgICBpZCA9IF9yZWYuaWQsXFxuICAgICAgb25DbGljayA9IF9yZWYub25DbGljayxcXG4gICAgICBvbk1vdXNlRW50ZXIgPSBfcmVmLm9uTW91c2VFbnRlcixcXG4gICAgICBvbk1vdXNlTGVhdmUgPSBfcmVmLm9uTW91c2VMZWF2ZSxcXG4gICAgICBfcmVmJHNpemUgPSBfcmVmLnNpemUsXFxuICAgICAgc2l6ZSA9IF9yZWYkc2l6ZSA9PT0gdm9pZCAwID8gMTYgOiBfcmVmJHNpemUsXFxuICAgICAgd2lkdGggPSBfcmVmLndpZHRoO1xcbiAgaWYgKCFpY29uKSByZXR1cm4gbnVsbDtcXG4gIHZhciBmaWxlbmFtZSA9ICdjb21tb24nO1xcbiAgdmFyIGZpbGVuYW1lcyA9IC9eSWMoQ3VycmVuY3l8VHJhZGV0eXBlfE10NXxGbGFnfFVuZGVybHlpbmcpL2cuZXhlYyhpY29uKTtcXG5cXG4gIGlmIChmaWxlbmFtZXMpIHtcXG4gICAgZmlsZW5hbWUgPSBnZXRLZWJhYkNhc2UoZmlsZW5hbWVzWzFdKTtcXG4gIH1cXG5cXG4gIHZhciBzcHJpdGVfaWQgPSBpY29uLnN0YXJ0c1dpdGgoJ0ljVW5kZXJseWluZycpID8gXFxcImljLXVuZGVybHlpbmctXFxcIi5jb25jYXQoaWNvbi5zcGxpdCgnSWNVbmRlcmx5aW5nJylbMV0udG9VcHBlckNhc2UoKSkgOiBnZXRLZWJhYkNhc2UoaWNvbik7XFxuICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXFxcInN2Z1xcXCIsIHtcXG4gICAgeG1sbnM6IFxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIsXFxuICAgIHhtbG5zWGxpbms6IFxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXFxcIixcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKSgnZGMtaWNvbicsIGNsYXNzTmFtZSwge1xcbiAgICAgICdkYy1pY29uLS1hY3RpdmUnOiBjb2xvciA9PT0gJ2FjdGl2ZScsXFxuICAgICAgJ2RjLWljb24tLWRpc2FibGVkJzogY29sb3IgPT09ICdkaXNhYmxlZCcsXFxuICAgICAgJ2RjLWljb24tLWdyZWVuJzogY29sb3IgPT09ICdncmVlbicgfHwgaWNvbiA9PT0gJ0ljUHJvZml0JyxcXG4gICAgICAnZGMtaWNvbi0tcmVkJzogY29sb3IgPT09ICdyZWQnIHx8IGljb24gPT09ICdJY0xvc3MnLFxcbiAgICAgICdkYy1pY29uLS1zZWNvbmRhcnknOiBjb2xvciA9PT0gJ3NlY29uZGFyeScsXFxuICAgICAgJ2RjLWljb24tLWJyYW5kJzogY29sb3IgPT09ICdicmFuZCdcXG4gICAgfSksXFxuICAgIGhlaWdodDogaGVpZ2h0IHx8IHNpemUsXFxuICAgIGlkOiBpZCxcXG4gICAgd2lkdGg6IHdpZHRoIHx8IHNpemUsXFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXFxuICAgIG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyLFxcbiAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZSxcXG4gICAgc3R5bGU6IGN1c3RvbV9jb2xvciA/IHtcXG4gICAgICAnLS1maWxsLWNvbG9yMSc6IGN1c3RvbV9jb2xvclxcbiAgICB9IDogdW5kZWZpbmVkXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcXFwidXNlXFxcIiwge1xcbiAgICB4bGlua0hyZWY6IFxcXCJcXFwiLmNvbmNhdChnZXRVcmxCYXNlKFxcXCIvcHVibGljL2ltYWdlcy9zcHJpdGUvXFxcIi5jb25jYXQoZmlsZW5hbWUsIFxcXCIuc3ZnXFxcIikpLCBcXFwiI1xcXCIpLmNvbmNhdChzcHJpdGVfaWQpXFxuICB9KSk7XFxufTtcXG5cXG5pY29uX0ljb24ucHJvcFR5cGVzID0ge1xcbiAgY2xhc3NOYW1lOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9iamVjdCwgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nXSksXFxuICBjb2xvcjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLCBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmddKSxcXG4gIGN1c3RvbV9jb2xvcjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgaGVpZ2h0OiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm51bWJlciwgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nXSksXFxuICBpY29uOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBvbkNsaWNrOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5mdW5jLFxcbiAgb25Nb3VzZUVudGVyOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5mdW5jLFxcbiAgb25Nb3VzZUxlYXZlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5mdW5jLFxcbiAgc2l6ZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5udW1iZXIsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZ10pLFxcbiAgd2lkdGg6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9uZU9mVHlwZShbZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyLCBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmddKVxcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgaWNvbl9pY29uID0gKGljb25fSWNvbik7XFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2ljb24vaWNvbi5zY3NzXFxudmFyIGNvbXBvbmVudHNfaWNvbl9pY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcXG5cXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2ljb24vaW5kZXguanNcXG5cXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb21wb25lbnRzX2ljb24gPSBfX3dlYnBhY2tfZXhwb3J0c19fW1xcXCJkZWZhdWx0XFxcIl0gPSAoaWNvbl9pY29uKTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZMaTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXBZMjl1TDJsamIyNHVhbk40UHpKaFlUTWlMQ0ozWldKd1lXTnJPaTh2UUdSbGNtbDJMMk52YlhCdmJtVnVkQzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMmxqYjI0dmFXNWtaWGd1YW5NL1lXVTJNQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnWTJ4aGMzTk9ZVzFsY3lCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVYRzR2THlCVVQwUlBPaUJiYlc5MlpTMTBieTF6YUdGeVpXUmRYRzVqYjI1emRDQm5aWFJWY214Q1lYTmxJRDBnS0hCaGRHZ2dQU0FuSnlrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUd3Z1BTQjNhVzVrYjNjdWJHOWpZWFJwYjI0N1hHNWNiaUFnSUNCcFppQW9JUzllWEZ3dktHSnlYeWt2TG5SbGMzUW9iQzV3WVhSb2JtRnRaU2twSUhKbGRIVnliaUJ3WVhSb08xeHVYRzRnSUNBZ2NtVjBkWEp1SUdBdkpIdHNMbkJoZEdodVlXMWxMbk53YkdsMEtDY3ZKeWxiTVYxOUpIc3ZYbHhjTHk4dWRHVnpkQ2h3WVhSb0tTQS9JSEJoZEdnZ09pQmdMeVI3Y0dGMGFIMWdmV0E3WEc1OU8xeHVYRzR2THlCVVQwUlBPaUJiYlc5MlpTMTBieTF6YUdGeVpXUmRYRzVqYjI1emRDQm5aWFJMWldKaFlrTmhjMlVnUFNCemRISWdQVDRnZTF4dUlDQWdJR2xtSUNnaGMzUnlLU0J5WlhSMWNtNGdjM1J5TzF4dUlDQWdJSEpsZEhWeWJpQnpkSEpjYmlBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTHloYllTMTZNQzA1WFNrb1cwRXRXbDBwTDJjc0lDY2tNUzBrTWljcElDOHZJR2RsZENCaGJHd2diRzkzWlhKallYTmxJR3hsZEhSbGNuTWdkR2hoZENCaGNtVWdibVZoY2lCMGJ5QjFjSEJsY21OaGMyVWdiMjVsYzF4dUlDQWdJQ0FnSUNBdWNtVndiR0ZqWlNndlcxeGNjMTByTDJjc0lDY3RKeWtnTHk4Z2NtVndiR0ZqWlNCaGJHd2djM0JoWTJWeklHRnVaQ0JzYjNjZ1pHRnphRnh1SUNBZ0lDQWdJQ0F1ZEc5TWIzZGxja05oYzJVb0tUdGNibjA3WEc1Y2JtTnZibk4wSUVsamIyNGdQU0FvZTF4dUlDQWdJR05zWVhOelRtRnRaU3hjYmlBZ0lDQmpiMnh2Y2l4Y2JpQWdJQ0JqZFhOMGIyMWZZMjlzYjNJc1hHNGdJQ0FnYUdWcFoyaDBMRnh1SUNBZ0lHbGpiMjRzWEc0Z0lDQWdhV1FzWEc0Z0lDQWdiMjVEYkdsamF5eGNiaUFnSUNCdmJrMXZkWE5sUlc1MFpYSXNYRzRnSUNBZ2IyNU5iM1Z6WlV4bFlYWmxMRnh1SUNBZ0lITnBlbVVnUFNBeE5peGNiaUFnSUNCM2FXUjBhQ3hjYm4wcElEMCtJSHRjYmlBZ0lDQnBaaUFvSVdsamIyNHBJSEpsZEhWeWJpQnVkV3hzTzF4dVhHNGdJQ0FnYkdWMElHWnBiR1Z1WVcxbElEMGdKMk52YlcxdmJpYzdYRzRnSUNBZ1kyOXVjM1FnWm1sc1pXNWhiV1Z6SUQwZ0wxNUpZeWhEZFhKeVpXNWplWHhVY21Ga1pYUjVjR1Y4VFhRMWZFWnNZV2Q4Vlc1a1pYSnNlV2x1Wnlrdlp5NWxlR1ZqS0dsamIyNHBPMXh1SUNBZ0lHbG1JQ2htYVd4bGJtRnRaWE1wSUh0Y2JpQWdJQ0FnSUNBZ1ptbHNaVzVoYldVZ1BTQm5aWFJMWldKaFlrTmhjMlVvWm1sc1pXNWhiV1Z6V3pGZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6Y0hKcGRHVmZhV1FnUFNCcFkyOXVMbk4wWVhKMGMxZHBkR2dvSjBsalZXNWtaWEpzZVdsdVp5Y3BYRzRnSUNBZ0lDQWdJRDhnWUdsakxYVnVaR1Z5YkhscGJtY3RKSHRwWTI5dUxuTndiR2wwS0NkSlkxVnVaR1Z5YkhscGJtY25LVnN4WFM1MGIxVndjR1Z5UTJGelpTZ3BmV0JjYmlBZ0lDQWdJQ0FnT2lCblpYUkxaV0poWWtOaGMyVW9hV052YmlrN1hHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBOGMzWm5YRzRnSUNBZ0lDQWdJQ0FnSUNCNGJXeHVjejBuYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjRiV3h1YzFoc2FXNXJQU2RvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUwzaHNhVzVySjF4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0Nka1l5MXBZMjl1Snl3Z1kyeGhjM05PWVcxbExDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMlJqTFdsamIyNHRMV0ZqZEdsMlpTYzZJR052Ykc5eUlEMDlQU0FuWVdOMGFYWmxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWkdNdGFXTnZiaTB0WkdsellXSnNaV1FuT2lCamIyeHZjaUE5UFQwZ0oyUnBjMkZpYkdWa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5aR010YVdOdmJpMHRaM0psWlc0bk9pQmpiMnh2Y2lBOVBUMGdKMmR5WldWdUp5QjhmQ0JwWTI5dUlEMDlQU0FuU1dOUWNtOW1hWFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNka1l5MXBZMjl1TFMxeVpXUW5PaUJqYjJ4dmNpQTlQVDBnSjNKbFpDY2dmSHdnYVdOdmJpQTlQVDBnSjBsalRHOXpjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJSakxXbGpiMjR0TFhObFkyOXVaR0Z5ZVNjNklHTnZiRzl5SUQwOVBTQW5jMlZqYjI1a1lYSjVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWkdNdGFXTnZiaTB0WW5KaGJtUW5PaUJqYjJ4dmNpQTlQVDBnSjJKeVlXNWtKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwUFh0b1pXbG5hSFFnZkh3Z2MybDZaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtQWHRwWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb1BYdDNhV1IwYUNCOGZDQnphWHBsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdiMjVEYkdsamEzMWNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVRXOTFjMlZGYm5SbGNqMTdiMjVOYjNWelpVVnVkR1Z5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVOYjNWelpVeGxZWFpsUFh0dmJrMXZkWE5sVEdWaGRtVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVDE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWemRHOXRYMk52Ykc5eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbkxTMW1hV3hzTFdOdmJHOXlNU2M2SUdOMWMzUnZiVjlqYjJ4dmNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeDFjMlVnZUd4cGJtdEljbVZtUFh0Z0pIdG5aWFJWY214Q1lYTmxLR0F2Y0hWaWJHbGpMMmx0WVdkbGN5OXpjSEpwZEdVdkpIdG1hV3hsYm1GdFpYMHVjM1puWUNsOUl5UjdjM0J5YVhSbFgybGtmV0I5SUM4K1hHNGdJQ0FnSUNBZ0lEd3ZjM1puUGx4dUlDQWdJQ2s3WEc1OU8xeHVYRzVKWTI5dUxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQmpiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFpsUjVjR1VvVzFCeWIzQlVlWEJsY3k1dlltcGxZM1FzSUZCeWIzQlVlWEJsY3k1emRISnBibWRkS1N4Y2JpQWdJQ0JqYjJ4dmNqb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG1KdmIyd3NJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtZGRLU3hjYmlBZ0lDQmpkWE4wYjIxZlkyOXNiM0k2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdhR1ZwWjJoME9pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRRY205d1ZIbHdaWE11Ym5WdFltVnlMQ0JRY205d1ZIbHdaWE11YzNSeWFXNW5YU2tzWEc0Z0lDQWdhV052YmpvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0J2YmtOc2FXTnJPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCdmJrMXZkWE5sUlc1MFpYSTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUc5dVRXOTFjMlZNWldGMlpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYzJsNlpUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXdnVUhKdmNGUjVjR1Z6TG5OMGNtbHVaMTBwTEZ4dUlDQWdJSGRwWkhSb09pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRRY205d1ZIbHdaWE11Ym5WdFltVnlMQ0JRY205d1ZIbHdaWE11YzNSeWFXNW5YU2tzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkpZMjl1TzF4dUlpd2lhVzF3YjNKMElFbGpiMjRnWm5KdmJTQW5MaTlwWTI5dUxtcHplQ2M3WEc1cGJYQnZjblFnSnk0dmFXTnZiaTV6WTNOekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdTV052Ymp0Y2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVUZCTzBGQlEwRTdRVUZGUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVbEJPMEZCUTBFN1FVRkRRVHRCUVZsQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVWxCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRrRTdRVUZSUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVWRCTzBGQlJFRTdRVUZ1UWtFN1FVRjVRa0U3UVVGQlFUdEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCVmtFN1FVRmhRVHM3T3pzN1FVTXpSa0U3UVVGRFFUdEJRVVZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzNcXG5cIil9LDM1OmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoXCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXG4gICAgaWYoZmFsc2UpIHsgdmFyIGNzc1JlbG9hZDsgfVxcbiAgLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTXpVdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QVpHVnlhWFl2WTI5dGNHOXVaVzUwTHk0dmMzSmpMMk52YlhCdmJtVnVkSE12WkhKdmNHUnZkMjR2WkhKdmNHUnZkMjR1YzJOemN6OHdaalV3SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJR1Y0ZEhKaFkzUmxaQ0JpZVNCdGFXNXBMV056Y3kxbGVIUnlZV04wTFhCc2RXZHBibHh1SUNBZ0lHbG1LRzF2WkhWc1pTNW9iM1FwSUh0Y2JpQWdJQ0FnSUM4dklERTFPREUxTnpNNE5qZzNORGxjYmlBZ0lDQWdJSFpoY2lCamMzTlNaV3h2WVdRZ1BTQnlaWEYxYVhKbEtGd2lJUzR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amMzTXRhRzkwTFd4dllXUmxjaTlvYjNSTmIyUjFiR1ZTWlhCc1lXTmxiV1Z1ZEM1cWMxd2lLU2h0YjJSMWJHVXVhV1FzSUh0Y0ltWnBiR1ZOWVhCY0lqcGNJbnRtYVd4bFRtRnRaWDFjSW4wcE8xeHVJQ0FnSUNBZ2JXOWtkV3hsTG1odmRDNWthWE53YjNObEtHTnpjMUpsYkc5aFpDazdYRzRnSUNBZ0lDQnRiMlIxYkdVdWFHOTBMbUZqWTJWd2RDaDFibVJsWm1sdVpXUXNJR056YzFKbGJHOWhaQ2s3TzF4dUlDQWdJSDFjYmlBZ0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTEdkRFFVdEJPMEZCUTBFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8zNVxcblwiKX0sMzY6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbiAgICBpZihmYWxzZSkgeyB2YXIgY3NzUmVsb2FkOyB9XFxuICAvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNell1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZaSEp2Y0dSdmQyNHZiR2x6ZEM1elkzTnpQMlpoWmpZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnWlhoMGNtRmpkR1ZrSUdKNUlHMXBibWt0WTNOekxXVjRkSEpoWTNRdGNHeDFaMmx1WEc0Z0lDQWdhV1lvYlc5a2RXeGxMbWh2ZENrZ2UxeHVJQ0FnSUNBZ0x5OGdNVFU0TVRVM016ZzJPRGMzTmx4dUlDQWdJQ0FnZG1GeUlHTnpjMUpsYkc5aFpDQTlJSEpsY1hWcGNtVW9YQ0loTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnpjeTFvYjNRdGJHOWhaR1Z5TDJodmRFMXZaSFZzWlZKbGNHeGhZMlZ0Wlc1MExtcHpYQ0lwS0cxdlpIVnNaUzVwWkN3Z2Uxd2labWxzWlUxaGNGd2lPbHdpZTJacGJHVk9ZVzFsZlZ3aWZTazdYRzRnSUNBZ0lDQnRiMlIxYkdVdWFHOTBMbVJwYzNCdmMyVW9ZM056VW1Wc2IyRmtLVHRjYmlBZ0lDQWdJRzF2WkhWc1pTNW9iM1F1WVdOalpYQjBLSFZ1WkdWbWFXNWxaQ3dnWTNOelVtVnNiMkZrS1RzN1hHNGdJQ0FnZlZ4dUlDQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFc1owTkJTMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMzZcXG5cIil9LDQ6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbiAgICBpZihmYWxzZSkgeyB2YXIgY3NzUmVsb2FkOyB9XFxuICAvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOQzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZMaTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXBZMjl1TDJsamIyNHVjMk56Y3o4M1lqRmhJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklHVjRkSEpoWTNSbFpDQmllU0J0YVc1cExXTnpjeTFsZUhSeVlXTjBMWEJzZFdkcGJseHVJQ0FnSUdsbUtHMXZaSFZzWlM1b2IzUXBJSHRjYmlBZ0lDQWdJQzh2SURFMU9ERTFOek00TmpreU9UUmNiaUFnSUNBZ0lIWmhjaUJqYzNOU1pXeHZZV1FnUFNCeVpYRjFhWEpsS0Z3aUlTNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlqYzNNdGFHOTBMV3h2WVdSbGNpOW9iM1JOYjJSMWJHVlNaWEJzWVdObGJXVnVkQzVxYzF3aUtTaHRiMlIxYkdVdWFXUXNJSHRjSW1acGJHVk5ZWEJjSWpwY0ludG1hV3hsVG1GdFpYMWNJbjBwTzF4dUlDQWdJQ0FnYlc5a2RXeGxMbWh2ZEM1a2FYTndiM05sS0dOemMxSmxiRzloWkNrN1hHNGdJQ0FnSUNCdGIyUjFiR1V1YUc5MExtRmpZMlZ3ZENoMWJtUmxabWx1WldRc0lHTnpjMUpsYkc5aFpDazdPMXh1SUNBZ0lIMWNiaUFnSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJMR2REUVV0Qk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzRcXG5cIil9LDU6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzVfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOUzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOWpiMjF3YjI1bGJuUXZaWGgwWlhKdVlXd2dYQ0p5WldGamRDMTBjbUZ1YzJsMGFXOXVMV2R5YjNWd1hDSS9aR1JsTUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZlh6VmZYenNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzVcXG5cIil9LDUzOmZ1bmN0aW9uKG1vZHVsZSxfX3dlYnBhY2tfZXhwb3J0c19fLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO2V2YWwoJ19fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwiY2xhc3NuYW1lc1wiXFxudmFyIGV4dGVybmFsX2NsYXNzbmFtZXNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcXG52YXIgZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9jbGFzc25hbWVzXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInByb3AtdHlwZXNcIlxcbnZhciBleHRlcm5hbF9wcm9wX3R5cGVzXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XFxudmFyIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcHJvcF90eXBlc18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJyZWFjdFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIlxcbnZhciBleHRlcm5hbF9yZWFjdF90cmFuc2l0aW9uX2dyb3VwXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL3RoZW1lZC1zY3JvbGxiYXJzL2luZGV4LmpzICsgMSBtb2R1bGVzXFxudmFyIHRoZW1lZF9zY3JvbGxiYXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9kcm9wZG93bi9kcm9wZG93bi5qc1xcblxcbnZhciBnZXREaXNwbGF5VGV4dCA9IGZ1bmN0aW9uIGdldERpc3BsYXlUZXh0KGxpc3QsIHZhbHVlKSB7XFxuICB2YXIgZmluZEluQXJyYXkgPSBmdW5jdGlvbiBmaW5kSW5BcnJheShhcnJfbGlzdCkge1xcbiAgICByZXR1cm4gKGFycl9saXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICByZXR1cm4gaXRlbS52YWx1ZSA9PT0gdmFsdWU7XFxuICAgIH0pIHx8IHt9KS50ZXh0O1xcbiAgfTtcXG5cXG4gIHZhciB0ZXh0ID0gXFwnXFwnO1xcblxcbiAgaWYgKEFycmF5LmlzQXJyYXkobGlzdCkpIHtcXG4gICAgdGV4dCA9IGZpbmRJbkFycmF5KGxpc3QpO1xcbiAgfSBlbHNlIHtcXG4gICAgT2JqZWN0LmtleXMobGlzdCkuc29tZShmdW5jdGlvbiAoa2V5KSB7XFxuICAgICAgdGV4dCA9IGZpbmRJbkFycmF5KGxpc3Rba2V5XSk7XFxuICAgICAgcmV0dXJuIHRleHQ7XFxuICAgIH0pO1xcbiAgfVxcblxcbiAgcmV0dXJuIHRleHQ7XFxufTtcXG52YXIgZ2V0SXRlbUZyb21WYWx1ZSA9IGZ1bmN0aW9uIGdldEl0ZW1Gcm9tVmFsdWUobGlzdCwgdmFsdWUpIHtcXG4gIHZhciBmaW5kSW5BcnJheSA9IGZ1bmN0aW9uIGZpbmRJbkFycmF5KGFycl9saXN0KSB7XFxuICAgIHJldHVybiBhcnJfbGlzdC5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICByZXR1cm4gaXRlbS52YWx1ZSA9PT0gdmFsdWU7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIHZhciBpdGVtID0ge307XFxuXFxuICBpZiAoQXJyYXkuaXNBcnJheShsaXN0KSkge1xcbiAgICBpdGVtID0ge1xcbiAgICAgIG51bWJlcjogZmluZEluQXJyYXkobGlzdCksXFxuICAgICAgbGVuZ3RoOiBsaXN0Lmxlbmd0aFxcbiAgICB9O1xcbiAgfSBlbHNlIHtcXG4gICAgT2JqZWN0LmtleXMobGlzdCkuc29tZShmdW5jdGlvbiAoa2V5KSB7XFxuICAgICAgaXRlbSA9IHtcXG4gICAgICAgIG51bWJlcjogZmluZEluQXJyYXkobGlzdFtrZXldKSxcXG4gICAgICAgIGxlbmd0aDogbGlzdFtrZXldLmxlbmd0aFxcbiAgICAgIH07XFxuICAgICAgcmV0dXJuIGl0ZW07XFxuICAgIH0pO1xcbiAgfVxcblxcbiAgcmV0dXJuIGl0ZW07XFxufTtcXG52YXIgZ2V0VmFsdWVGcm9tSW5kZXggPSBmdW5jdGlvbiBnZXRWYWx1ZUZyb21JbmRleChsaXN0LCBpbmRleCkge1xcbiAgdmFyIGZpbmRJbkFycmF5ID0gZnVuY3Rpb24gZmluZEluQXJyYXkoYXJyX2xpc3QpIHtcXG4gICAgcmV0dXJuIGFycl9saXN0W2luZGV4XTtcXG4gIH07XFxuXFxuICB2YXIgcmVzdWx0O1xcblxcbiAgaWYgKEFycmF5LmlzQXJyYXkobGlzdCkpIHtcXG4gICAgcmVzdWx0ID0gZmluZEluQXJyYXkobGlzdCk7XFxuICB9IGVsc2Uge1xcbiAgICBPYmplY3Qua2V5cyhsaXN0KS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcXG4gICAgICByZXN1bHQgPSBmaW5kSW5BcnJheShsaXN0W2tleV0pO1xcbiAgICAgIHJldHVybiByZXN1bHQudmFsdWU7XFxuICAgIH0pO1xcbiAgfVxcblxcbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcXG59O1xcbnZhciBnZXRQcmV2SW5kZXggPSBmdW5jdGlvbiBnZXRQcmV2SW5kZXgoaW5kZXgsIGxlbmd0aCkge1xcbiAgdmFyIHByZXZfaW5kZXggPSBpbmRleCAtIDEgPCAwID8gbGVuZ3RoIC0gMSA6IGluZGV4IC0gMTtcXG4gIHJldHVybiBwcmV2X2luZGV4O1xcbn07XFxudmFyIGdldE5leHRJbmRleCA9IGZ1bmN0aW9uIGdldE5leHRJbmRleChpbmRleCwgbGVuZ3RoKSB7XFxuICB2YXIgbmV4dF9pbmRleCA9IGluZGV4ICsgMSA9PT0gbGVuZ3RoID8gMCA6IGluZGV4ICsgMTtcXG4gIHJldHVybiBuZXh0X2luZGV4O1xcbn07XFxudmFyIGRyb3Bkb3duX2xpc3RQcm9wVHlwZSA9IGZ1bmN0aW9uIGxpc3RQcm9wVHlwZSgpIHtcXG4gIHJldHVybiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmFycmF5T2YoZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc2hhcGUoe1xcbiAgICBkaXNhYmxlZDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCxcXG4gICAgaGFzX3Rvb2x0aXA6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICAgIHRleHQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gICAgdG9vbHRpcDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgICB2YWx1ZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm51bWJlcl0pXFxuICB9KSksIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9iamVjdF0pO1xcbn07XFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvaW5kZXguanMgKyAxIG1vZHVsZXNcXG52YXIgcG9wb3ZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xcblxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vaXRlbXMuanN4XFxuXFxuXFxuXFxuXFxuXFxudmFyIGl0ZW1zX0l0ZW1zID0gZnVuY3Rpb24gSXRlbXMoX3JlZikge1xcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxcbiAgICAgIGluZGV4ID0gX3JlZi5pbmRleCxcXG4gICAgICBoYW5kbGVTZWxlY3QgPSBfcmVmLmhhbmRsZVNlbGVjdCxcXG4gICAgICBoYXNfc3ltYm9sID0gX3JlZi5oYXNfc3ltYm9sLFxcbiAgICAgIGl0ZW1zID0gX3JlZi5pdGVtcyxcXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxcbiAgICAgIGlzX2FsaWduX3RleHRfbGVmdCA9IF9yZWYuaXNfYWxpZ25fdGV4dF9sZWZ0LFxcbiAgICAgIHZhbHVlID0gX3JlZi52YWx1ZTtcXG4gIHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xcbiAgICB2YXIgc3ltYm9sX3R5cGVfY2xhc3NfbmFtZSA9IGl0ZW0udGV4dCAmJiB0eXBlb2YgaXRlbS50ZXh0ID09PSBcXCdzdHJpbmdcXCcgPyBcInN5bWJvbHMtLVwiLmNvbmNhdChpdGVtLnRleHQudG9Mb3dlckNhc2UoKSkgOiBudWxsO1xcbiAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xcbiAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtbGlzdF9faXRlbVxcJywge1xcbiAgICAgICAgXFwnZGMtbGlzdF9faXRlbS0taGlnaGxpZ2h0ZWRcXCc6IGlkeCA9PT0gaW5kZXhcXG4gICAgICB9LCB7XFxuICAgICAgICBcXCdkYy1saXN0X19pdGVtLS1zZWxlY3RlZFxcJzogdmFsdWUgPT09IGl0ZW0udmFsdWVcXG4gICAgICB9LCB7XFxuICAgICAgICBcXCdkYy1saXN0X19pdGVtLS1kaXNhYmxlZFxcJzogaXRlbS5kaXNhYmxlZFxcbiAgICAgIH0pLFxcbiAgICAgIG5hbWU6IG5hbWUsXFxuICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXFxuICAgICAgb25DbGljazogaXRlbS5kaXNhYmxlZCA/IG51bGwgOiBoYW5kbGVTZWxlY3QuYmluZChudWxsLCBpdGVtKSxcXG4gICAgICBrZXk6IGlkeFxcbiAgICB9LCAhIWhhc19zeW1ib2wgJiYgaXRlbS5oYXNfdG9vbHRpcCAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChwb3BvdmVyW1wiZGVmYXVsdFwiXSwge1xcbiAgICAgIGFsaWdubWVudDogXCJsZWZ0XCIsXFxuICAgICAgbWVzc2FnZTogaXRlbS50ZXh0XFxuICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XFxuICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdzeW1ib2xzXFwnLCBcXCdkYy1saXN0X19pdGVtLXN5bWJvbFxcJywgc3ltYm9sX3R5cGVfY2xhc3NfbmFtZSlcXG4gICAgfSkpLCAhIWhhc19zeW1ib2wgJiYgIWl0ZW0uaGFzX3Rvb2x0aXAgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgICBjbGFzc05hbWU6IGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCgpKFxcJ3N5bWJvbHNcXCcsIFxcJ2RjLWxpc3RfX2l0ZW0tdGV4dFxcJywgc3ltYm9sX3R5cGVfY2xhc3NfbmFtZSlcXG4gICAgfSksICFoYXNfc3ltYm9sICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XFxuICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1saXN0X19pdGVtLXRleHRcXCcsIHtcXG4gICAgICAgIFxcJ2RjLWxpc3RfX2l0ZW0tdGV4dC0tbGVmdFxcJzogaXNfYWxpZ25fdGV4dF9sZWZ0XFxuICAgICAgfSwgY2xhc3NOYW1lKVxcbiAgICB9LCBpdGVtLnRleHQpKTtcXG4gIH0pO1xcbn07XFxuXFxuaXRlbXNfSXRlbXMucHJvcFR5cGVzID0ge1xcbiAgY2xhc3NOYW1lOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBoYW5kbGVTZWxlY3Q6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmZ1bmMsXFxuICBoYXNfc3ltYm9sOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgbmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgdmFsdWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9uZU9mVHlwZShbZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyLCBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmddKVxcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZHJvcGRvd25faXRlbXMgPSAoaXRlbXNfSXRlbXMpO1xcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbmF0aXZlLXNlbGVjdC5qc3hcXG5cXG5cXG5cXG52YXIgbmF0aXZlX3NlbGVjdF9OYXRpdmVTZWxlY3QgPSBmdW5jdGlvbiBOYXRpdmVTZWxlY3QoX3JlZikge1xcbiAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXFxuICAgICAgbGlzdCA9IF9yZWYubGlzdCxcXG4gICAgICB2YWx1ZSA9IF9yZWYudmFsdWUsXFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlO1xcbiAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgY2xhc3NOYW1lOiBcIm5hdGl2ZS1zZWxlY3QgbmF0aXZlLXNlbGVjdF9fd3JhcHBlclwiXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXCJzZWxlY3QgbmF0aXZlLXNlbGVjdF9fc2VsZWN0XCIsXFxuICAgIG5hbWU6IG5hbWUsXFxuICAgIHZhbHVlOiB2YWx1ZSxcXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlXFxuICB9LCBBcnJheS5pc0FycmF5KGxpc3QpID8gbGlzdC5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xcbiAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiwge1xcbiAgICAgIGtleTogaWR4LFxcbiAgICAgIHZhbHVlOiBpdGVtLnZhbHVlXFxuICAgIH0sIGl0ZW0udGV4dCk7XFxuICB9KSA6IE9iamVjdC5rZXlzKGxpc3QpLm1hcChmdW5jdGlvbiAoa2V5KSB7XFxuICAgIHJldHVybiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuRnJhZ21lbnQsIHtcXG4gICAgICBrZXk6IGtleVxcbiAgICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcIm9wdGdyb3VwXCIsIHtcXG4gICAgICBsYWJlbDoga2V5XFxuICAgIH0sIGxpc3Rba2V5XS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xcbiAgICAgIHJldHVybiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7XFxuICAgICAgICBrZXk6IGlkeCxcXG4gICAgICAgIHZhbHVlOiBpdGVtLnZhbHVlXFxuICAgICAgfSwgaXRlbS50ZXh0KTtcXG4gICAgfSkpKTtcXG4gIH0pKSk7XFxufTtcXG5cXG5uYXRpdmVfc2VsZWN0X05hdGl2ZVNlbGVjdC5wcm9wVHlwZXMgPSB7XFxuICBsaXN0OiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9iamVjdCwgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYXJyYXldKSxcXG4gIG5hbWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIG9uQ2hhbmdlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5mdW5jLFxcbiAgdmFsdWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9uZU9mVHlwZShbZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyLCBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmddKVxcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgbmF0aXZlX3NlbGVjdCA9IChuYXRpdmVfc2VsZWN0X05hdGl2ZVNlbGVjdCk7XFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9kcm9wZG93bi9kaXNwbGF5LXRleHQuanN4XFxuXFxuXFxuXFxuXFxuXFxudmFyIGRpc3BsYXlfdGV4dF9EaXNwbGF5VGV4dCA9IGZ1bmN0aW9uIERpc3BsYXlUZXh0KF9yZWYpIHtcXG4gIHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcXG4gICAgICBoYXNfc3ltYm9sID0gX3JlZi5oYXNfc3ltYm9sLFxcbiAgICAgIGxpc3QgPSBfcmVmLmxpc3QsXFxuICAgICAgaXNfYWxpZ25fdGV4dF9sZWZ0ID0gX3JlZi5pc19hbGlnbl90ZXh0X2xlZnQsXFxuICAgICAgcGxhY2Vob2xkZXIgPSBfcmVmLnBsYWNlaG9sZGVyLFxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXFxuICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlO1xcbiAgdmFyIHN5bWJvbF92YWx1ZV9jbGFzcyA9IHZhbHVlICYmIGhhc19zeW1ib2wgPyBcInN5bWJvbHMtLVwiLmNvbmNhdCh2YWx1ZS50b0xvd2VyQ2FzZSgpKSA6IG51bGw7XFxuICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLkZyYWdtZW50LCBudWxsLCBoYXNfc3ltYm9sID8gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdzeW1ib2xzIGRjLWRyb3Bkb3duX19kaXNwbGF5LXN5bWJvbFxcJywgc3ltYm9sX3ZhbHVlX2NsYXNzLCBjbGFzc05hbWUpLFxcbiAgICBuYW1lOiBuYW1lLFxcbiAgICB2YWx1ZTogdmFsdWVcXG4gIH0pIDogZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bl9fZGlzcGxheS10ZXh0XFwnLCBjbGFzc05hbWUpLFxcbiAgICBuYW1lOiBuYW1lLFxcbiAgICB2YWx1ZTogdmFsdWVcXG4gIH0sIGdldERpc3BsYXlUZXh0KGxpc3QsIHZhbHVlKSksIHBsYWNlaG9sZGVyICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bl9fZGlzcGxheS1wbGFjZWhvbGRlclxcJywge1xcbiAgICAgIFxcJ2RjLWRyb3Bkb3duX19kaXNwbGF5LXBsYWNlaG9sZGVyLS1pcy10aXRsZVxcJzogdmFsdWUsXFxuICAgICAgXFwnZGMtZHJvcGRvd25fX2Rpc3BsYXktcGxhY2Vob2xkZXItLWlzLWxlZnQtdGV4dFxcJzogaXNfYWxpZ25fdGV4dF9sZWZ0XFxuICAgIH0pXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xcbiAgICBjbGFzc05hbWU6IFwiZGMtZHJvcGRvd25fX2Rpc3BsYXktcGxhY2Vob2xkZXItdGV4dFwiXFxuICB9LCBwbGFjZWhvbGRlcikpKTtcXG59O1xcblxcbmRpc3BsYXlfdGV4dF9EaXNwbGF5VGV4dC5wcm9wVHlwZXMgPSB7XFxuICBjbGFzc05hbWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGhhc19zeW1ib2w6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBpc190aXRsZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCxcXG4gIGxpc3Q6IGRyb3Bkb3duX2xpc3RQcm9wVHlwZSgpLFxcbiAgbmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgcGxhY2Vob2xkZXI6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIHZhbHVlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZywgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyXSlcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGRpc3BsYXlfdGV4dCA9IChkaXNwbGF5X3RleHRfRGlzcGxheVRleHQpO1xcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9pY29uL2luZGV4LmpzICsgMSBtb2R1bGVzXFxudmFyIGljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xcblxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24uanN4XFxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbnZhciBkcm9wZG93bl9Ecm9wZG93biA9XFxuLyojX19QVVJFX18qL1xcbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XFxuICBfaW5oZXJpdHMoRHJvcGRvd24sIF9SZWFjdCRDb21wb25lbnQpO1xcblxcbiAgZnVuY3Rpb24gRHJvcGRvd24oKSB7XFxuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xcblxcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wZG93bik7XFxuXFxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XFxuICAgIH1cXG5cXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihEcm9wZG93bikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xcbiAgICBfdGhpcy5saXN0X3JlZiA9IGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVSZWYoKTtcXG4gICAgX3RoaXMuc3RhdGUgPSB7XFxuICAgICAgY3Vycl9pbmRleDogMCxcXG4gICAgICBpc19saXN0X3Zpc2libGU6IGZhbHNlLFxcbiAgICAgIGxpc3RfaGVpZ2h0OiAwLFxcbiAgICAgIGxpc3Rfd2lkdGg6IDBcXG4gICAgfTtcXG5cXG4gICAgX3RoaXMuaGFuZGxlU2VsZWN0ID0gZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICBpZiAoaXRlbS52YWx1ZSAhPT0gX3RoaXMucHJvcHMudmFsdWUpIHtcXG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKHtcXG4gICAgICAgICAgdGFyZ2V0OiB7XFxuICAgICAgICAgICAgbmFtZTogX3RoaXMucHJvcHMubmFtZSxcXG4gICAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZVxcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG5cXG4gICAgICAgIF90aGlzLnVwZGF0ZVNlbGVjdGVkKGl0ZW0udmFsdWUpO1xcbiAgICAgIH1cXG5cXG4gICAgICBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5KCk7XFxuICAgIH07XFxuXFxuICAgIF90aGlzLnNldFdyYXBwZXJSZWYgPSBmdW5jdGlvbiAobm9kZSkge1xcbiAgICAgIHJldHVybiBfdGhpcy53cmFwcGVyX3JlZiA9IG5vZGU7XFxuICAgIH07XFxuXFxuICAgIF90aGlzLmhhbmRsZUNsaWNrT3V0c2lkZSA9IGZ1bmN0aW9uIChldmVudCkge1xcbiAgICAgIGlmIChfdGhpcy53cmFwcGVyX3JlZiAmJiAhX3RoaXMud3JhcHBlcl9yZWYuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAhX3RoaXMud3JhcHBlcl9yZWYuY29udGFpbnMoZXZlbnQucGF0aFswXSkgJiYgLy8gZXZlbnQucGF0aFswXSBpcyB0aGUgbm9kZSB0aGF0IHRoZSBldmVudCBvcmlnaW5hdGVkIGZyb20sIGl0IGRvZXMgbm90IG5lZWQgdG8gd2FsayB0aGUgYXJyYXlcXG4gICAgICBfdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGUpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXMucHJvcHMuaGFuZGxlQmx1ciA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgX3RoaXMucHJvcHMuaGFuZGxlQmx1cih7XFxuICAgICAgICAgICAgdGFyZ2V0OiB7XFxuICAgICAgICAgICAgICBuYW1lOiBfdGhpcy5wcm9wcy5uYW1lXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcXG4gICAgICAgICAgaXNfbGlzdF92aXNpYmxlOiBmYWxzZVxcbiAgICAgICAgfSk7XFxuICAgICAgfVxcbiAgICB9O1xcblxcbiAgICBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgaXNfbGlzdF92aXNpYmxlOiAhc3RhdGUuaXNfbGlzdF92aXNpYmxlXFxuICAgICAgICB9O1xcbiAgICAgIH0pO1xcbiAgICB9O1xcblxcbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcXG4gICAgICBpZiAoX3RoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlICYmIF90aGlzLnByb3BzLnZhbHVlICE9PSB2YWx1ZSkge1xcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2Uoe1xcbiAgICAgICAgICB0YXJnZXQ6IHtcXG4gICAgICAgICAgICBuYW1lOiBfdGhpcy5wcm9wcy5uYW1lLFxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuXFxuICAgICAgX3RoaXMuaGFuZGxlVmlzaWJpbGl0eSgpO1xcbiAgICB9O1xcblxcbiAgICBfdGhpcy5vbktleVByZXNzZWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcXG4gICAgICBpZiAoX3RoaXMuaXNfc2luZ2xlX29wdGlvbikgcmV0dXJuO1xcblxcbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSA5KSB7XFxuICAgICAgICAvLyBUYWIgaXMgcHJlc3NlZFxcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmlzX2xpc3RfdmlzaWJsZSkge1xcbiAgICAgICAgICBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5KCk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm47XFxuICAgICAgfVxcblxcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XFxuICAgICAgdmFyIGluZGV4ID0gX3RoaXMucHJvcHMudmFsdWUgPyBnZXRJdGVtRnJvbVZhbHVlKF90aGlzLnByb3BzLmxpc3QsIF90aGlzLnByb3BzLnZhbHVlKSA6IDA7XFxuICAgICAgdmFyIHZhbHVlID0gX3RoaXMucHJvcHMudmFsdWUgPyBnZXRWYWx1ZUZyb21JbmRleChfdGhpcy5wcm9wcy5saXN0LCBfdGhpcy5zdGF0ZS5jdXJyX2luZGV4KSA6IG51bGw7XFxuXFxuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XFxuICAgICAgICBjYXNlIDEzOiAvLyBFbnRlciBpcyBwcmVzc2VkXFxuXFxuICAgICAgICBjYXNlIDMyOlxcbiAgICAgICAgICAvLyBTcGFjZSBpcyBwcmVzc2VkXFxuICAgICAgICAgIGlmICh2YWx1ZSkgX3RoaXMuaGFuZGxlVG9nZ2xlKHZhbHVlKTtcXG4gICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICBjYXNlIDM4OlxcbiAgICAgICAgICAvLyBVcCBBcnJvdyBpcyBwcmVzc2VkXFxuICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGUpIHtcXG4gICAgICAgICAgICB2YXIgcHJldl9pbmRleCA9IGdldFByZXZJbmRleChfdGhpcy5zdGF0ZS5jdXJyX2luZGV4LCBpbmRleC5sZW5ndGgpO1xcblxcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcXG4gICAgICAgICAgICAgIGN1cnJfaW5kZXg6IHByZXZfaW5kZXhcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgIGNhc2UgNDA6XFxuICAgICAgICAgIC8vIERvd24gQXJyb3cgaXMgcHJlc3NlZFxcbiAgICAgICAgICBpZiAoX3RoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlKSB7XFxuICAgICAgICAgICAgdmFyIG5leHRfaW5kZXggPSBnZXROZXh0SW5kZXgoX3RoaXMuc3RhdGUuY3Vycl9pbmRleCwgaW5kZXgubGVuZ3RoKTtcXG5cXG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XFxuICAgICAgICAgICAgICBjdXJyX2luZGV4OiBuZXh0X2luZGV4XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgIH0gZWxzZSBpZiAoIV90aGlzLnByb3BzLmlzX2FsaWdubWVudF9sZWZ0KSB7XFxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlVmlzaWJpbGl0eSgpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgY2FzZSAzNzpcXG4gICAgICAgICAgLy8gTGVmdCBhcnJvdyBpcyBwcmVzc2VkXFxuICAgICAgICAgIGlmICghX3RoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlICYmIF90aGlzLnByb3BzLmlzX2FsaWdubWVudF9sZWZ0KSB7XFxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlVmlzaWJpbGl0eSgpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgY2FzZSAzOTpcXG4gICAgICAgICAgLy8gUmlnaHQgQXJyb3cgaXMgcHJlc3NlZFxcbiAgICAgICAgICBpZiAoX3RoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlICYmIF90aGlzLnByb3BzLmlzX2FsaWdubWVudF9sZWZ0KSB7XFxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlVmlzaWJpbGl0eSgpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgZGVmYXVsdDpcXG4gICAgICB9IC8vIEZvciBjaGFyIHByZXNzZXMsIHdlIGRvIGEgc2VhcmNoIGZvciB0aGUgaXRlbTpcXG5cXG5cXG4gICAgICBpZiAoZXZlbnQua2V5Lmxlbmd0aCA9PT0gMSAmJiBfdGhpcy5wcm9wcy5saXN0Lmxlbmd0aCkge1xcbiAgICAgICAgdmFyIF9jaGFyID0gZXZlbnQua2V5LnRvTG93ZXJDYXNlKCk7XFxuXFxuICAgICAgICB2YXIgZmlyc3RDaGFycyA9IF90aGlzLnByb3BzLmxpc3QubWFwKGZ1bmN0aW9uICh4KSB7XFxuICAgICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXFwnc3RyaW5nXFwnICYmIHgudGV4dFswXS50b0xvd2VyQ2FzZSgpO1xcbiAgICAgICAgfSk7XFxuXFxuICAgICAgICB2YXIgaWR4OyAvLyBUYXBwaW5nIHRoZSBzYW1lIGNoYXJhY3RlciBhZ2FpbiBqdW1wcyB0byB0aGUgbmV4dCBtYXRjaDpcXG5cXG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZS5jdXJyX2luZGV4KSB7XFxuICAgICAgICAgIGlkeCA9IGZpcnN0Q2hhcnMuaW5kZXhPZihfY2hhciwgX3RoaXMuc3RhdGUuY3Vycl9pbmRleCArIDEpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaWYgKGlkeCA9PT0gdW5kZWZpbmVkIHx8IGlkeCA9PT0gLTEpIHtcXG4gICAgICAgICAgaWR4ID0gZmlyc3RDaGFycy5pbmRleE9mKF9jaGFyKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChpZHggPj0gMCkge1xcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XFxuICAgICAgICAgICAgY3Vycl9pbmRleDogaWR4XFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfTtcXG5cXG4gICAgX3RoaXMuc2V0TGlzdERpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoe1xcbiAgICAgICAgbGlzdF93aWR0aDogX3RoaXMubGlzdF9yZWYuY3VycmVudC5vZmZzZXRXaWR0aCxcXG4gICAgICAgIGxpc3RfaGVpZ2h0OiBfdGhpcy5saXN0X3JlZi5jdXJyZW50Lm9mZnNldEhlaWdodFxcbiAgICAgIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuXFxuICBfY3JlYXRlQ2xhc3MoRHJvcGRvd24sIFt7XFxuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XFxuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZCh0aGlzLnByb3BzLnZhbHVlKTtcXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxcJ21vdXNlZG93blxcJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGUsIHtcXG4gICAgICAgIHBhc3NpdmU6IHRydWVcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XFxuICAgICAgaWYgKHByZXZQcm9wcy52YWx1ZSAhPT0gdGhpcy5wcm9wcy52YWx1ZSkge1xcbiAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZCh0aGlzLnByb3BzLnZhbHVlKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxcJ21vdXNlZG93blxcJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGUpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVTZWxlY3RlZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU2VsZWN0ZWQodmFsdWUpIHtcXG4gICAgICB0aGlzLnNldFN0YXRlKHtcXG4gICAgICAgIGN1cnJfaW5kZXg6IGdldEl0ZW1Gcm9tVmFsdWUodGhpcy5wcm9wcy5saXN0LCB2YWx1ZSkubnVtYmVyXFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlbmRlclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgIGlmICh0aGlzLnByb3BzLmlzX25hdGl2ZXBpY2tlcikge1xcbiAgICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KG5hdGl2ZV9zZWxlY3QsIHtcXG4gICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcXG4gICAgICAgICAgbGlzdDogdGhpcy5wcm9wcy5saXN0LFxcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZVxcbiAgICAgICAgfSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBnZXREcm9wRG93bkFsaWdubWVudCA9IGZ1bmN0aW9uIGdldERyb3BEb3duQWxpZ25tZW50KCkge1xcbiAgICAgICAgaWYgKF90aGlzMi5wcm9wcy5pc19hbGlnbm1lbnRfbGVmdCkgcmV0dXJuIF90aGlzMi5jb21wdXRlZF9vZmZzZXRfbGVmdDtlbHNlIGlmIChfdGhpczIucHJvcHMuaXNfYWxpZ25tZW50X3RvcCkgcmV0dXJuIF90aGlzMi5jb21wdXRlZF9vZmZzZXRfdG9wO1xcbiAgICAgICAgcmV0dXJuIG51bGw7XFxuICAgICAgfTtcXG5cXG4gICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLkZyYWdtZW50LCBudWxsLCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogXCJkYy1kcm9wZG93bl9faW5uZXJcIixcXG4gICAgICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcXG4gICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcXG4gICAgICAgIHJlYWRPbmx5OiBcInJlYWRvbmx5XCIsXFxuICAgICAgICB0eXBlOiBcImhpZGRlblwiLFxcbiAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUgfHwgMFxcbiAgICAgIH0pLCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XFxuICAgICAgICByZWY6IHRoaXMuc2V0V3JhcHBlclJlZixcXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5jb250YWluZXJfY2xhc3NfbmFtZVxcbiAgICAgIH0sIHRoaXMucHJvcHMubGFiZWwgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtZHJvcGRvd25fX2xhYmVsXFwnLCB7XFxuICAgICAgICAgIFxcJ2RjLWRyb3Bkb3duX19sYWJlbC0tY2xpY2tlZFxcJzogdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGVcXG4gICAgICAgIH0pXFxuICAgICAgfSwgdGhpcy5wcm9wcy5sYWJlbCksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5kcm9wZG93bl9kaXNwbGF5X2NsYXNzX25hbWUsXFxuICAgICAgICB0YWJJbmRleDogdGhpcy5pc19zaW5nbGVfb3B0aW9uID8gXFwnLTFcXCcgOiBcXCcwXFwnLFxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVWaXNpYmlsaXR5LFxcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5UHJlc3NlZFxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGRpc3BsYXlfdGV4dCwge1xcbiAgICAgICAgaGFzX3N5bWJvbDogdGhpcy5wcm9wcy5oYXNfc3ltYm9sLFxcbiAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxcbiAgICAgICAgaXNfdGl0bGU6IHRoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlLFxcbiAgICAgICAgcGxhY2Vob2xkZXI6IHRoaXMucHJvcHMucGxhY2Vob2xkZXIsXFxuICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSB8fCAwLFxcbiAgICAgICAgbGlzdDogdGhpcy5wcm9wcy5saXN0LFxcbiAgICAgICAgaXNfYWxpZ25fdGV4dF9sZWZ0OiB0aGlzLnByb3BzLmlzX2FsaWduX3RleHRfbGVmdFxcbiAgICAgIH0pKSwgIXRoaXMuaXNfc2luZ2xlX29wdGlvbiAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChpY29uW1wiZGVmYXVsdFwiXSwge1xcbiAgICAgICAgaWNvbjogdGhpcy5wcm9wcy5pc19hbGlnbm1lbnRfbGVmdCA/IFxcJ0ljQ2hldnJvbkxlZnRcXCcgOiBcXCdJY0NoZXZyb25Eb3duXFwnLFxcbiAgICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bl9fc2VsZWN0LWFycm93XFwnLCB7XFxuICAgICAgICAgIFxcJ2RjLWRyb3Bkb3duX19zZWxlY3QtYXJyb3ctLWxlZnRcXCc6IHRoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnRcXG4gICAgICAgIH0pXFxuICAgICAgfSksIHRoaXMucHJvcHMuZXJyb3IgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogXCJkYy1maWVsZC1lcnJvclwiXFxuICAgICAgfSwgdGhpcy5wcm9wcy5lcnJvciksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGV4dGVybmFsX3JlYWN0X3RyYW5zaXRpb25fZ3JvdXBfW1wiQ1NTVHJhbnNpdGlvblwiXSwge1xcbiAgICAgICAgXCJpblwiOiB0aGlzLnN0YXRlLmlzX2xpc3RfdmlzaWJsZSxcXG4gICAgICAgIHRpbWVvdXQ6IDEwMCxcXG4gICAgICAgIGNsYXNzTmFtZXM6IHRoaXMudHJhbnNpdGlvbl9jbGFzc19uYW1lcyxcXG4gICAgICAgIG9uRW50ZXJlZDogdGhpcy5zZXRMaXN0RGltZW5zaW9uLFxcbiAgICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZVxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5kcm9wZG93bl9saXN0X2NsYXNzX25hbWVzXFxuICAgICAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmxpc3RfY2xhc3NfbmFtZXMsXFxuICAgICAgICByZWY6IHRoaXMubGlzdF9yZWYsXFxuICAgICAgICBzdHlsZTogZ2V0RHJvcERvd25BbGlnbm1lbnQoKVxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KHRoZW1lZF9zY3JvbGxiYXJzW1wiZGVmYXVsdFwiXSwge1xcbiAgICAgICAgYXV0b0hlaWdodDogdHJ1ZSxcXG4gICAgICAgIGF1dG9IaWRlOiB0cnVlLFxcbiAgICAgICAgYXV0b0hlaWdodE1heDogMjAwLFxcbiAgICAgICAgcmVuZGVyVHJhY2tIb3Jpem9udGFsOiBmdW5jdGlvbiByZW5kZXJUcmFja0hvcml6b250YWwocHJvcHMpIHtcXG4gICAgICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xcbiAgICAgICAgICAgIHN0eWxlOiB7XFxuICAgICAgICAgICAgICBkaXNwbGF5OiBcXCdub25lXFwnXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KSk7XFxuICAgICAgICB9LFxcbiAgICAgICAgcmVuZGVyVGh1bWJIb3Jpem9udGFsOiBmdW5jdGlvbiByZW5kZXJUaHVtYkhvcml6b250YWwocHJvcHMpIHtcXG4gICAgICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xcbiAgICAgICAgICAgIHN0eWxlOiB7XFxuICAgICAgICAgICAgICBkaXNwbGF5OiBcXCdub25lXFwnXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KSk7XFxuICAgICAgICB9XFxuICAgICAgfSwgQXJyYXkuaXNBcnJheSh0aGlzLnByb3BzLmxpc3QpID8gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZHJvcGRvd25faXRlbXMsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWVJdGVtcyxcXG4gICAgICAgIGluZGV4OiB0aGlzLnN0YXRlLmN1cnJfaW5kZXgsXFxuICAgICAgICBoYW5kbGVTZWxlY3Q6IHRoaXMuaGFuZGxlU2VsZWN0LFxcbiAgICAgICAgaGFzX3N5bWJvbDogdGhpcy5wcm9wcy5oYXNfc3ltYm9sLFxcbiAgICAgICAgaXRlbXM6IHRoaXMucHJvcHMubGlzdCxcXG4gICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcXG4gICAgICAgIGlzX2FsaWduX3RleHRfbGVmdDogdGhpcy5wcm9wcy5pc19hbGlnbl90ZXh0X2xlZnQsXFxuICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZVxcbiAgICAgIH0pIDogT2JqZWN0LmtleXModGhpcy5wcm9wcy5saXN0KS5tYXAoZnVuY3Rpb24gKGtleSwgaWR4KSB7XFxuICAgICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLkZyYWdtZW50LCB7XFxuICAgICAgICAgIGtleToga2V5XFxuICAgICAgICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XFxuICAgICAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtbGlzdF9fbGFiZWxcXCcsIF90aGlzMi5wcm9wcy5jbGFzc05hbWVMYWJlbClcXG4gICAgICAgIH0sIGtleSksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGRyb3Bkb3duX2l0ZW1zLCB7XFxuICAgICAgICAgIGNsYXNzTmFtZTogX3RoaXMyLnByb3BzLmNsYXNzTmFtZUl0ZW1zLFxcbiAgICAgICAgICBoYW5kbGVTZWxlY3Q6IF90aGlzMi5oYW5kbGVTZWxlY3QsXFxuICAgICAgICAgIGhhc19zeW1ib2w6IF90aGlzMi5wcm9wcy5oYXNfc3ltYm9sLFxcbiAgICAgICAgICBpdGVtczogX3RoaXMyLnByb3BzLmxpc3Rba2V5XSxcXG4gICAgICAgICAgbmFtZTogX3RoaXMyLnByb3BzLm5hbWUsXFxuICAgICAgICAgIGlzX2FsaWduX3RleHRfbGVmdDogX3RoaXMyLnByb3BzLmlzX2FsaWduX3RleHRfbGVmdCxcXG4gICAgICAgICAgdmFsdWU6IF90aGlzMi5wcm9wcy52YWx1ZVxcbiAgICAgICAgfSksIGlkeCAhPT0gT2JqZWN0LmtleXMoX3RoaXMyLnByb3BzLmxpc3QpLmxlbmd0aCAtIDEgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgICAgICAgY2xhc3NOYW1lOiBcImRjLWxpc3RfX3NlcGFyYXRvclwiXFxuICAgICAgICB9KSk7XFxuICAgICAgfSkpKSkpKSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcImNvbXB1dGVkX29mZnNldF9sZWZ0XCIsXFxuXFxuICAgIC8qKlxcbiAgICAgKiBDYWxjdWxhdGUgdGhlIG9mZnNldCBmb3IgdGhlIGRyb3Bkb3duIGxpc3QgYmFzZWQgb24gaXRzIHdpZHRoXFxuICAgICAqXFxuICAgICAqIEByZXR1cm4ge3t0cmFuc2Zvcm06IHN0cmluZ319XFxuICAgICAqL1xcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4ge1xcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKGNhbGMoLVwiLmNvbmNhdCh0aGlzLnN0YXRlLmxpc3Rfd2lkdGgsIFwicHggLSAxMnB4KSwgMCwgMHB4KVwiKVxcbiAgICAgIH07XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIENhbGN1bGF0ZSB0aGUgb2Zmc2V0IGZvciB0aGUgZHJvcGRvd24gbGlzdCBiYXNlZCBvbiBpdHMgaGVpZ2h0XFxuICAgICAqXFxuICAgICAqIEByZXR1cm4ge3t0cmFuc2Zvcm06IHN0cmluZ319XFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiY29tcHV0ZWRfb2Zmc2V0X3RvcFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4ge1xcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsIGNhbGMoLVwiLmNvbmNhdCh0aGlzLnN0YXRlLmxpc3RfaGVpZ2h0LCBcInB4IC0gMTZweCksIDBweClcIilcXG4gICAgICB9O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJpc19zaW5nbGVfb3B0aW9uXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRoaXMucHJvcHMubGlzdCkgPyB0aGlzLnByb3BzLmxpc3QubGVuZ3RoIDwgMiA6IC8vIG9iamVjdCBoYXMgbGVzcyB0aGFuIHR3byBwcm9wcyBvciBpbm5lciBvYmplY3QgaGFzIGxlc3MgdGhhbiB0d28gcHJvcHNcXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzLmxpc3QpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyh0aGlzLnByb3BzLmxpc3QpLmxlbmd0aCA8IDIgJiYgdGhpcy5wcm9wcy5saXN0W09iamVjdC5rZXlzKHRoaXMucHJvcHMubGlzdClbMF1dLmxlbmd0aCA8IDI7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcImNvbnRhaW5lcl9jbGFzc19uYW1lXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bi1jb250YWluZXJcXCcsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XFxuICAgICAgICBcXCdkYy1kcm9wZG93bi0taGFzLXBsYWNlaG9sZGVyXFwnOiB0aGlzLnByb3BzLnBsYWNlaG9sZGVyLFxcbiAgICAgICAgXFwnZGMtZHJvcGRvd24tLWxlZnRcXCc6IHRoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnQsXFxuICAgICAgICBcXCdkYy1kcm9wZG93bi0tc2hvd1xcJzogdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGUsXFxuICAgICAgICBcXCdkYy1kcm9wZG93bi0tZGlzYWJsZWRcXCc6IHRoaXMuaXNfc2luZ2xlX29wdGlvbiB8fCB0aGlzLnByb3BzLmRpc2FibGVkXFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcImRyb3Bkb3duX2Rpc3BsYXlfY2xhc3NfbmFtZVwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtZHJvcGRvd25fX2Rpc3BsYXlcXCcsIHRoaXMucHJvcHMuY2xhc3NOYW1lRGlzcGxheSwge1xcbiAgICAgICAgXFwnZGMtZHJvcGRvd25fX2Rpc3BsYXktLWNsaWNrZWRcXCc6IHRoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlLFxcbiAgICAgICAgXFwnZGMtZHJvcGRvd25fX2Rpc3BsYXktLWhhcy1zeW1ib2xcXCc6IHRoaXMucHJvcHMuaGFzX3N5bWJvbCxcXG4gICAgICAgIFxcJ2RjLWRyb3Bkb3duX19kaXNwbGF5LS1uby1ib3JkZXJcXCc6IHRoaXMucHJvcHMubm9fYm9yZGVyLFxcbiAgICAgICAgXFwnZGMtZHJvcGRvd25fX2Rpc3BsYXktLWlzLWxlZnQtdGV4dFxcJzogdGhpcy5wcm9wcy5pc19hbGlnbl90ZXh0X2xlZnRcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiZHJvcGRvd25fbGlzdF9jbGFzc19uYW1lc1wiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtZHJvcGRvd25fX2xpc3RcXCcsIHtcXG4gICAgICAgIFxcJ2RjLWRyb3Bkb3duX19saXN0LS1sZWZ0XFwnOiB0aGlzLnByb3BzLmlzX2FsaWdubWVudF9sZWZ0LFxcbiAgICAgICAgXFwnZGMtZHJvcGRvd25fX2xpc3QtLXRvcFxcJzogdGhpcy5wcm9wcy5pc19hbGlnbm1lbnRfdG9wXFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcImxpc3RfY2xhc3NfbmFtZXNcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCgpKFxcJ2RjLWxpc3RcXCcsIHtcXG4gICAgICAgIFxcJ2RjLWxpc3QtLWxlZnRcXCc6IHRoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnRcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwidHJhbnNpdGlvbl9jbGFzc19uYW1lc1wiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4ge1xcbiAgICAgICAgZW50ZXI6IFwiZGMtZHJvcGRvd25fX2xpc3QtLWVudGVyXCIuY29uY2F0KHRoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnQgPyBcXCcgZGMtZHJvcGRvd25fX2xpc3QtLWxlZnQtLWVudGVyXFwnIDogXFwnXFwnKSxcXG4gICAgICAgIGVudGVyRG9uZTogXCJkYy1kcm9wZG93bl9fbGlzdC0tZW50ZXItZG9uZVwiLmNvbmNhdCh0aGlzLnByb3BzLmlzX2FsaWdubWVudF9sZWZ0ID8gXFwnIGRjLWRyb3Bkb3duX19saXN0LS1sZWZ0LS1lbnRlci1kb25lXFwnIDogXFwnXFwnKSxcXG4gICAgICAgIGV4aXQ6IFwiZGMtZHJvcGRvd25fX2xpc3QtLWV4aXRcIi5jb25jYXQodGhpcy5wcm9wcy5pc19hbGlnbm1lbnRfbGVmdCA/IFxcJyBkYy1kcm9wZG93bl9fbGlzdC0tbGVmdC0tZXhpdFxcJyA6IFxcJ1xcJylcXG4gICAgICB9O1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gRHJvcGRvd247XFxufShleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuQ29tcG9uZW50KTtcXG5cXG5kcm9wZG93bl9Ecm9wZG93bi5wcm9wVHlwZXMgPSB7XFxuICBjbGFzc05hbWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNsYXNzTmFtZURpc3BsYXk6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNsYXNzTmFtZUl0ZW1zOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBjbGFzc05hbWVMYWJlbDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgZGlzYWJsZWQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBoYXNfc3ltYm9sOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgaXNfYWxpZ25tZW50X2xlZnQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBpc19uYXRpdmVwaWNrZXI6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBsYWJlbDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgbGlzdDogZHJvcGRvd25fbGlzdFByb3BUeXBlKCksXFxuICBuYW1lOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBub19ib3JkZXI6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBvbkNoYW5nZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuZnVuYyxcXG4gIHBsYWNlaG9sZGVyOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICB2YWx1ZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5udW1iZXIsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZ10pXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBkcm9wZG93biA9IChkcm9wZG93bl9Ecm9wZG93bik7XFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL2Ryb3Bkb3duLnNjc3NcXG52YXIgZHJvcGRvd25fZHJvcGRvd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbGlzdC5zY3NzXFxudmFyIGRyb3Bkb3duX2xpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcXG5cXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL2luZGV4LmpzXFxuXFxuXFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY29tcG9uZW50c19kcm9wZG93biA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKGRyb3Bkb3duKTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lOVE11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZaSEp2Y0dSdmQyNHZaSEp2Y0dSdmQyNHVhbk0vT1RnNVpDSXNJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZaSEp2Y0dSdmQyNHZhWFJsYlhNdWFuTjRQMlptTm1VaUxDSjNaV0p3WVdOck9pOHZRR1JsY21sMkwyTnZiWEJ2Ym1WdWRDOHVMM055WXk5amIyMXdiMjVsYm5SekwyUnliM0JrYjNkdUwyNWhkR2wyWlMxelpXeGxZM1F1YW5ONFB6aGpObVFpTENKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJOdmJYQnZibVZ1ZEM4dUwzTnlZeTlqYjIxd2IyNWxiblJ6TDJSeWIzQmtiM2R1TDJScGMzQnNZWGt0ZEdWNGRDNXFjM2cvWTJRd055SXNJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZZMjl0Y0c5dVpXNTBMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZaSEp2Y0dSdmQyNHZaSEp2Y0dSdmQyNHVhbk40UHpSa1pEY2lMQ0ozWldKd1lXTnJPaTh2UUdSbGNtbDJMMk52YlhCdmJtVnVkQzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMlJ5YjNCa2IzZHVMMmx1WkdWNExtcHpQemN4WVdZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibHh1Wlhod2IzSjBJR052Ym5OMElHZGxkRVJwYzNCc1lYbFVaWGgwSUQwZ0tHeHBjM1FzSUhaaGJIVmxLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdabWx1WkVsdVFYSnlZWGtnUFNCaGNuSmZiR2x6ZENBOVBpQW9ZWEp5WDJ4cGMzUXVabWx1WkNocGRHVnRJRDArSUdsMFpXMHVkbUZzZFdVZ1BUMDlJSFpoYkhWbEtTQjhmQ0I3ZlNrdWRHVjRkRHRjYmlBZ0lDQnNaWFFnZEdWNGRDQTlJQ2NuTzF4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR3hwYzNRcEtTQjdYRzRnSUNBZ0lDQWdJSFJsZUhRZ1BTQm1hVzVrU1c1QmNuSmhlU2hzYVhOMEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aHNhWE4wS1M1emIyMWxLR3RsZVNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBJRDBnWm1sdVpFbHVRWEp5WVhrb2JHbHpkRnRyWlhsZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwWlhoME8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSbGVIUTdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWjJWMFNYUmxiVVp5YjIxV1lXeDFaU0E5SUNoc2FYTjBMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHWnBibVJKYmtGeWNtRjVJRDBnWVhKeVgyeHBjM1FnUFQ0Z1lYSnlYMnhwYzNRdVptbHVaRWx1WkdWNEtHbDBaVzBnUFQ0Z2FYUmxiUzUyWVd4MVpTQTlQVDBnZG1Gc2RXVXBPMXh1SUNBZ0lHeGxkQ0JwZEdWdElEMGdlMzA3WEc0Z0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29iR2x6ZENrcElIdGNiaUFnSUNBZ0lDQWdhWFJsYlNBOUlIc2diblZ0WW1WeU9pQm1hVzVrU1c1QmNuSmhlU2hzYVhOMEtTd2diR1Z1WjNSb09pQnNhWE4wTG14bGJtZDBhQ0I5TzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRTlpYW1WamRDNXJaWGx6S0d4cGMzUXBMbk52YldVb2EyVjVJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2wwWlcwZ1BTQjdJRzUxYldKbGNqb2dabWx1WkVsdVFYSnlZWGtvYkdsemRGdHJaWGxkS1N3Z2JHVnVaM1JvT2lCc2FYTjBXMnRsZVYwdWJHVnVaM1JvSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsYlR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJwZEdWdE8xeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR2RsZEZaaGJIVmxSbkp2YlVsdVpHVjRJRDBnS0d4cGMzUXNJR2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1ptbHVaRWx1UVhKeVlYa2dQU0JoY25KZmJHbHpkQ0E5UGlCaGNuSmZiR2x6ZEZ0cGJtUmxlRjA3WEc0Z0lDQWdiR1YwSUhKbGMzVnNkRHRjYmlBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaHNhWE4wS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQm1hVzVrU1c1QmNuSmhlU2hzYVhOMEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aHNhWE4wS1M1emIyMWxLR3RsZVNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCbWFXNWtTVzVCY25KaGVTaHNhWE4wVzJ0bGVWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkQzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFF1ZG1Gc2RXVTdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWjJWMFVISmxka2x1WkdWNElEMGdLR2x1WkdWNExDQnNaVzVuZEdncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCd2NtVjJYMmx1WkdWNElEMGdhVzVrWlhnZ0xTQXhJRHdnTUNBL0lHeGxibWQwYUNBdElERWdPaUJwYm1SbGVDQXRJREU3WEc0Z0lDQWdjbVYwZFhKdUlIQnlaWFpmYVc1a1pYZzdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWjJWMFRtVjRkRWx1WkdWNElEMGdLR2x1WkdWNExDQnNaVzVuZEdncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCdVpYaDBYMmx1WkdWNElEMGdhVzVrWlhnZ0t5QXhJRDA5UFNCc1pXNW5kR2dnUHlBd0lEb2dhVzVrWlhnZ0t5QXhPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYaDBYMmx1WkdWNE8xeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR3hwYzNSUWNtOXdWSGx3WlNBOUlDZ3BJRDArWEc0Z0lDQWdVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiWEc0Z0lDQWdJQ0FnSUZCeWIzQlVlWEJsY3k1aGNuSmhlVTltS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk5vWVhCbEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE5oWW14bFpEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnpYM1J2YjJ4MGFYQTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFE2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5dmJIUnBjRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXdnVUhKdmNGUjVjR1Z6TG01MWJXSmxjbDBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUNBZ1VISnZjRlI1Y0dWekxtOWlhbVZqZEN4Y2JpQWdJQ0JkS1R0Y2JpSXNJbWx0Y0c5eWRDQmpiR0Z6YzA1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUc5d2IzWmxjaUJtY205dElDZERiMjF3YjI1bGJuUnpMM0J2Y0c5MlpYSW5PMXh1WEc1amIyNXpkQ0JKZEdWdGN5QTlJQ2g3SUdOc1lYTnpUbUZ0WlN3Z2FXNWtaWGdzSUdoaGJtUnNaVk5sYkdWamRDd2dhR0Z6WDNONWJXSnZiQ3dnYVhSbGJYTXNJRzVoYldVc0lHbHpYMkZzYVdkdVgzUmxlSFJmYkdWbWRDd2dkbUZzZFdVZ2ZTa2dQVDVjYmlBZ0lDQnBkR1Z0Y3k1dFlYQW9LR2wwWlcwc0lHbGtlQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemVXMWliMnhmZEhsd1pWOWpiR0Z6YzE5dVlXMWxJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzB1ZEdWNGRDQW1KaUIwZVhCbGIyWWdhWFJsYlM1MFpYaDBJRDA5UFNBbmMzUnlhVzVuSnlBL0lHQnplVzFpYjJ4ekxTMGtlMmwwWlcwdWRHVjRkQzUwYjB4dmQyVnlRMkZ6WlNncGZXQWdPaUJ1ZFd4c08xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5aR010YkdsemRGOWZhWFJsYlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnSjJSakxXeHBjM1JmWDJsMFpXMHRMV2hwWjJoc2FXZG9kR1ZrSnpvZ2FXUjRJRDA5UFNCcGJtUmxlQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJQ2RrWXkxc2FYTjBYMTlwZEdWdExTMXpaV3hsWTNSbFpDYzZJSFpoYkhWbElEMDlQU0JwZEdWdExuWmhiSFZsSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnSjJSakxXeHBjM1JmWDJsMFpXMHRMV1JwYzJGaWJHVmtKem9nYVhSbGJTNWthWE5oWW14bFpDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbFBYdHVZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxQWHRwZEdWdExuWmhiSFZsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTJsMFpXMHVaR2x6WVdKc1pXUWdQeUJ1ZFd4c0lEb2dhR0Z1Wkd4bFUyVnNaV04wTG1KcGJtUW9iblZzYkN3Z2FYUmxiU2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVBYdHBaSGg5WEc0Z0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleUVoYUdGelgzTjViV0p2YkNBbUppQnBkR1Z0TG1oaGMxOTBiMjlzZEdsd0lDWW1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BGQnZjRzkyWlhJZ1lXeHBaMjV0Wlc1MFBTZHNaV1owSnlCdFpYTnpZV2RsUFh0cGRHVnRMblJsZUhSOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMDVoYldWektDZHplVzFpYjJ4ekp5d2dKMlJqTFd4cGMzUmZYMmwwWlcwdGMzbHRZbTlzSnl3Z2MzbHRZbTlzWDNSNWNHVmZZMnhoYzNOZmJtRnRaU2w5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2VUc5d2IzWmxjajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5RWhhR0Z6WDNONWJXSnZiQ0FtSmlBaGFYUmxiUzVvWVhOZmRHOXZiSFJwY0NBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVJR05zWVhOelRtRnRaVDE3WTJ4aGMzTk9ZVzFsY3lnbmMzbHRZbTlzY3ljc0lDZGtZeTFzYVhOMFgxOXBkR1Z0TFhSbGVIUW5MQ0J6ZVcxaWIyeGZkSGx3WlY5amJHRnpjMTl1WVcxbEtYMGdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5Rm9ZWE5mYzNsdFltOXNJQ1ltSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbGN5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWkdNdGJHbHpkRjlmYVhSbGJTMTBaWGgwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJQ2RrWXkxc2FYTjBYMTlwZEdWdExYUmxlSFF0TFd4bFpuUW5PaUJwYzE5aGJHbG5ibDkwWlhoMFgyeGxablFnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0cGRHVnRMblJsZUhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlNrN1hHNWNia2wwWlcxekxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQmpiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2FHRnVaR3hsVTJWc1pXTjBPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCb1lYTmZjM2x0WW05c09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J1WVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUhaaGJIVmxPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0UWNtOXdWSGx3WlhNdWJuVnRZbVZ5TENCUWNtOXdWSGx3WlhNdWMzUnlhVzVuWFNrc1hHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JKZEdWdGN6dGNiaUlzSW1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dVhHNWpiMjV6ZENCT1lYUnBkbVZUWld4bFkzUWdQU0FvZXlCdVlXMWxMQ0JzYVhOMExDQjJZV3gxWlN3Z2IyNURhR0Z1WjJVZ2ZTa2dQVDRnS0Z4dUlDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBTZHVZWFJwZG1VdGMyVnNaV04wSUc1aGRHbDJaUzF6Wld4bFkzUmZYM2R5WVhCd1pYSW5QbHh1SUNBZ0lDQWdJQ0E4YzJWc1pXTjBJR05zWVhOelRtRnRaVDBuYzJWc1pXTjBJRzVoZEdsMlpTMXpaV3hsWTNSZlgzTmxiR1ZqZENjZ2JtRnRaVDE3Ym1GdFpYMGdkbUZzZFdVOWUzWmhiSFZsZlNCdmJrTm9ZVzVuWlQxN2IyNURhR0Z1WjJWOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTBGeWNtRjVMbWx6UVhKeVlYa29iR2x6ZENsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lHeHBjM1F1YldGd0tDaHBkR1Z0TENCcFpIZ3BJRDArSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YjNCMGFXOXVJR3RsZVQxN2FXUjRmU0IyWVd4MVpUMTdhWFJsYlM1MllXeDFaWDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0cGRHVnRMblJsZUhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5dmNIUnBiMjQrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dUMkpxWldOMExtdGxlWE1vYkdsemRDa3ViV0Z3S0d0bGVTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRkpsWVdOMExrWnlZV2R0Wlc1MElHdGxlVDE3YTJWNWZUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRzl3ZEdkeWIzVndJR3hoWW1Wc1BYdHJaWGw5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMnhwYzNSYmEyVjVYUzV0WVhBb0tHbDBaVzBzSUdsa2VDa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4dmNIUnBiMjRnYTJWNVBYdHBaSGg5SUhaaGJIVmxQWHRwZEdWdExuWmhiSFZsZlQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMmwwWlcwdWRHVjRkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDI5d2RHbHZiajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDa3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDI5d2RHZHliM1Z3UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2VW1WaFkzUXVSbkpoWjIxbGJuUStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwS1gxY2JpQWdJQ0FnSUNBZ1BDOXpaV3hsWTNRK1hHNGdJQ0FnUEM5a2FYWStYRzRwTzF4dVhHNU9ZWFJwZG1WVFpXeGxZM1F1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUd4cGMzUTZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFpsUjVjR1VvVzFCeWIzQlVlWEJsY3k1dlltcGxZM1FzSUZCeWIzQlVlWEJsY3k1aGNuSmhlVjBwTEZ4dUlDQWdJRzVoYldVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnYjI1RGFHRnVaMlU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lIWmhiSFZsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdFFjbTl3Vkhsd1pYTXViblZ0WW1WeUxDQlFjbTl3Vkhsd1pYTXVjM1J5YVc1blhTa3NYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCT1lYUnBkbVZUWld4bFkzUTdYRzRpTENKcGJYQnZjblFnWTJ4aGMzTk9ZVzFsY3lCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElIc2daMlYwUkdsemNHeGhlVlJsZUhRc0lHeHBjM1JRY205d1ZIbHdaU0I5SUdaeWIyMGdKeTR2WkhKdmNHUnZkMjRuTzF4dVhHNWpiMjV6ZENCRWFYTndiR0Y1VkdWNGRDQTlJQ2g3SUdOc1lYTnpUbUZ0WlN3Z2FHRnpYM041YldKdmJDd2diR2x6ZEN3Z2FYTmZZV3hwWjI1ZmRHVjRkRjlzWldaMExDQndiR0ZqWldodmJHUmxjaXdnYm1GdFpTd2dkbUZzZFdVZ2ZTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElITjViV0p2YkY5MllXeDFaVjlqYkdGemN5QTlJSFpoYkhWbElDWW1JR2hoYzE5emVXMWliMndnUHlCZ2MzbHRZbTlzY3kwdEpIdDJZV3gxWlM1MGIweHZkMlZ5UTJGelpTZ3BmV0FnT2lCdWRXeHNPMXh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lEeFNaV0ZqZEM1R2NtRm5iV1Z1ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHRvWVhOZmMzbHRZbTlzSUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpjR0Z1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnhoYzNOT1lXMWxjeWduYzNsdFltOXNjeUJrWXkxa2NtOXdaRzkzYmw5ZlpHbHpjR3hoZVMxemVXMWliMnduTENCemVXMWliMnhmZG1Gc2RXVmZZMnhoYzNNc0lHTnNZWE56VG1GdFpTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1aGJXVTllMjVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdDJZV3gxWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnS1NBNklDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOWUyTnNZWE56VG1GdFpYTW9KMlJqTFdSeWIzQmtiM2R1WDE5a2FYTndiR0Y1TFhSbGVIUW5MQ0JqYkdGemMwNWhiV1VwZlNCdVlXMWxQWHR1WVcxbGZTQjJZV3gxWlQxN2RtRnNkV1Y5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdaMlYwUkdsemNHeGhlVlJsZUhRb2JHbHpkQ3dnZG1Gc2RXVXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I3Y0d4aFkyVm9iMnhrWlhJZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0Nka1l5MWtjbTl3Wkc5M2JsOWZaR2x6Y0d4aGVTMXdiR0ZqWldodmJHUmxjaWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNka1l5MWtjbTl3Wkc5M2JsOWZaR2x6Y0d4aGVTMXdiR0ZqWldodmJHUmxjaTB0YVhNdGRHbDBiR1VuT2lCMllXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RrWXkxa2NtOXdaRzkzYmw5ZlpHbHpjR3hoZVMxd2JHRmpaV2h2YkdSbGNpMHRhWE10YkdWbWRDMTBaWGgwSnpvZ2FYTmZZV3hwWjI1ZmRHVjRkRjlzWldaMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHTnNZWE56VG1GdFpUMG5aR010WkhKdmNHUnZkMjVmWDJScGMzQnNZWGt0Y0d4aFkyVm9iMnhrWlhJdGRHVjRkQ2MrZTNCc1lXTmxhRzlzWkdWeWZUd3ZjM0JoYmo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJRHd2VW1WaFkzUXVSbkpoWjIxbGJuUStYRzRnSUNBZ0tUdGNibjA3WEc1Y2JrUnBjM0JzWVhsVVpYaDBMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JqYkdGemMwNWhiV1U2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdhR0Z6WDNONWJXSnZiRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2FYTmZkR2wwYkdVNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJR3hwYzNRNklHeHBjM1JRY205d1ZIbHdaU2dwTEZ4dUlDQWdJRzVoYldVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnY0d4aFkyVm9iMnhrWlhJNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnZG1Gc2RXVTZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFpsUjVjR1VvVzFCeWIzQlVlWEJsY3k1emRISnBibWNzSUZCeWIzQlVlWEJsY3k1dWRXMWlaWEpkS1N4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVJwYzNCc1lYbFVaWGgwTzF4dUlpd2lhVzF3YjNKMElHTnNZWE56VG1GdFpYTWdabkp2YlNBblkyeGhjM051WVcxbGN5YzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUVOVFUxUnlZVzV6YVhScGIyNGdmU0JtY205dElDZHlaV0ZqZEMxMGNtRnVjMmwwYVc5dUxXZHliM1Z3Snp0Y2JtbHRjRzl5ZENCVWFHVnRaV1JUWTNKdmJHeGlZWEp6SUdaeWIyMGdKME52YlhCdmJtVnVkSE12ZEdobGJXVmtMWE5qY205c2JHSmhjbk1uTzF4dWFXMXdiM0owSUhzZ1oyVjBTWFJsYlVaeWIyMVdZV3gxWlN3Z1oyVjBWbUZzZFdWR2NtOXRTVzVrWlhnc0lHZGxkRkJ5WlhaSmJtUmxlQ3dnWjJWMFRtVjRkRWx1WkdWNExDQnNhWE4wVUhKdmNGUjVjR1VnZlNCbWNtOXRJQ2N1TDJSeWIzQmtiM2R1Snp0Y2JtbHRjRzl5ZENCSmRHVnRjeUJtY205dElDY3VMMmwwWlcxekxtcHplQ2M3WEc1cGJYQnZjblFnVG1GMGFYWmxVMlZzWldOMElHWnliMjBnSnk0dmJtRjBhWFpsTFhObGJHVmpkQzVxYzNnbk8xeHVhVzF3YjNKMElFUnBjM0JzWVhsVVpYaDBJR1p5YjIwZ0p5NHZaR2x6Y0d4aGVTMTBaWGgwTG1wemVDYzdYRzVwYlhCdmNuUWdTV052YmlCbWNtOXRJQ2N1TGk5cFkyOXVKenRjYmx4dVkyeGhjM01nUkhKdmNHUnZkMjRnWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUWdlMXh1SUNBZ0lHeHBjM1JmY21WbUlEMGdVbVZoWTNRdVkzSmxZWFJsVW1WbUtDazdYRzVjYmlBZ0lDQnpkR0YwWlNBOUlIdGNiaUFnSUNBZ0lDQWdZM1Z5Y2w5cGJtUmxlRG9nTUN4Y2JpQWdJQ0FnSUNBZ2FYTmZiR2x6ZEY5MmFYTnBZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnYkdsemRGOW9aV2xuYUhRNklEQXNYRzRnSUNBZ0lDQWdJR3hwYzNSZmQybGtkR2c2SURBc1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTmhiR04xYkdGMFpTQjBhR1VnYjJabWMyVjBJR1p2Y2lCMGFHVWdaSEp2Y0dSdmQyNGdiR2x6ZENCaVlYTmxaQ0J2YmlCcGRITWdkMmxrZEdoY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTN0MGNtRnVjMlp2Y20wNklITjBjbWx1WjMxOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMElHTnZiWEIxZEdWa1gyOW1abk5sZEY5c1pXWjBLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRPaUJnZEhKaGJuTnNZWFJsTTJRb1kyRnNZeWd0Skh0MGFHbHpMbk4wWVhSbExteHBjM1JmZDJsa2RHaDljSGdnTFNBeE1uQjRLU3dnTUN3Z01IQjRLV0FzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyRnNZM1ZzWVhSbElIUm9aU0J2Wm1aelpYUWdabTl5SUhSb1pTQmtjbTl3Wkc5M2JpQnNhWE4wSUdKaGMyVmtJRzl1SUdsMGN5Qm9aV2xuYUhSY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTN0MGNtRnVjMlp2Y20wNklITjBjbWx1WjMxOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMElHTnZiWEIxZEdWa1gyOW1abk5sZEY5MGIzQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMDZJR0IwY21GdWMyeGhkR1V6WkNnd0xDQmpZV3hqS0Mwa2UzUm9hWE11YzNSaGRHVXViR2x6ZEY5b1pXbG5hSFI5Y0hnZ0xTQXhObkI0S1N3Z01IQjRLV0FzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMElHbHpYM05wYm1kc1pWOXZjSFJwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkJjbkpoZVM1cGMwRnljbUY1S0hSb2FYTXVjSEp2Y0hNdWJHbHpkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdkR2hwY3k1d2NtOXdjeTVzYVhOMExteGxibWQwYUNBOElESmNiaUFnSUNBZ0lDQWdJQ0FnSURvZ0x5OGdiMkpxWldOMElHaGhjeUJzWlhOeklIUm9ZVzRnZEhkdklIQnliM0J6SUc5eUlHbHVibVZ5SUc5aWFtVmpkQ0JvWVhNZ2JHVnpjeUIwYUdGdUlIUjNieUJ3Y205d2MxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aDBhR2x6TG5CeWIzQnpMbXhwYzNRcExteGxibWQwYUNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vZEdocGN5NXdjbTl3Y3k1c2FYTjBLUzVzWlc1bmRHZ2dQQ0F5SUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbXhwYzNSYlQySnFaV04wTG10bGVYTW9kR2hwY3k1d2NtOXdjeTVzYVhOMEtWc3dYVjB1YkdWdVozUm9JRHdnTWp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JuWlhRZ1kyOXVkR0ZwYm1WeVgyTnNZWE56WDI1aGJXVW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdGemMwNWhiV1Z6S0Nka1l5MWtjbTl3Wkc5M2JpMWpiMjUwWVdsdVpYSW5MQ0IwYUdsekxuQnliM0J6TG1Oc1lYTnpUbUZ0WlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSjJSakxXUnliM0JrYjNkdUxTMW9ZWE10Y0d4aFkyVm9iMnhrWlhJbk9pQjBhR2x6TG5CeWIzQnpMbkJzWVdObGFHOXNaR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMlJqTFdSeWIzQmtiM2R1TFMxc1pXWjBKem9nZEdocGN5NXdjbTl3Y3k1cGMxOWhiR2xuYm0xbGJuUmZiR1ZtZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RrWXkxa2NtOXdaRzkzYmkwdGMyaHZkeWM2SUhSb2FYTXVjM1JoZEdVdWFYTmZiR2x6ZEY5MmFYTnBZbXhsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMlJqTFdSeWIzQmtiM2R1TFMxa2FYTmhZbXhsWkNjNklIUm9hWE11YVhOZmMybHVaMnhsWDI5d2RHbHZiaUI4ZkNCMGFHbHpMbkJ5YjNCekxtUnBjMkZpYkdWa0xGeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm5aWFFnWkhKdmNHUnZkMjVmWkdsemNHeGhlVjlqYkdGemMxOXVZVzFsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeGhjM05PWVcxbGN5Z25aR010WkhKdmNHUnZkMjVmWDJScGMzQnNZWGtuTENCMGFHbHpMbkJ5YjNCekxtTnNZWE56VG1GdFpVUnBjM0JzWVhrc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNka1l5MWtjbTl3Wkc5M2JsOWZaR2x6Y0d4aGVTMHRZMnhwWTJ0bFpDYzZJSFJvYVhNdWMzUmhkR1V1YVhOZmJHbHpkRjkyYVhOcFlteGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oyUmpMV1J5YjNCa2IzZHVYMTlrYVhOd2JHRjVMUzFvWVhNdGMzbHRZbTlzSnpvZ2RHaHBjeTV3Y205d2N5NW9ZWE5mYzNsdFltOXNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oyUmpMV1J5YjNCa2IzZHVYMTlrYVhOd2JHRjVMUzF1YnkxaWIzSmtaWEluT2lCMGFHbHpMbkJ5YjNCekxtNXZYMkp2Y21SbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNka1l5MWtjbTl3Wkc5M2JsOWZaR2x6Y0d4aGVTMHRhWE10YkdWbWRDMTBaWGgwSnpvZ2RHaHBjeTV3Y205d2N5NXBjMTloYkdsbmJsOTBaWGgwWDJ4bFpuUXNYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2RsZENCa2NtOXdaRzkzYmw5c2FYTjBYMk5zWVhOelgyNWhiV1Z6S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeGhjM05PWVcxbGN5Z25aR010WkhKdmNHUnZkMjVmWDJ4cGMzUW5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQW5aR010WkhKdmNHUnZkMjVmWDJ4cGMzUXRMV3hsWm5Rbk9pQjBhR2x6TG5CeWIzQnpMbWx6WDJGc2FXZHViV1Z1ZEY5c1pXWjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oyUmpMV1J5YjNCa2IzZHVYMTlzYVhOMExTMTBiM0FuT2lCMGFHbHpMbkJ5YjNCekxtbHpYMkZzYVdkdWJXVnVkRjkwYjNBc1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHZGxkQ0JzYVhOMFgyTnNZWE56WDI1aGJXVnpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJ4aGMzTk9ZVzFsY3lnblpHTXRiR2x6ZENjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNka1l5MXNhWE4wTFMxc1pXWjBKem9nZEdocGN5NXdjbTl3Y3k1cGMxOWhiR2xuYm0xbGJuUmZiR1ZtZEN4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1oyVjBJSFJ5WVc1emFYUnBiMjVmWTJ4aGMzTmZibUZ0WlhNb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJuUmxjam9nWUdSakxXUnliM0JrYjNkdVgxOXNhWE4wTFMxbGJuUmxjaVI3ZEdocGN5NXdjbTl3Y3k1cGMxOWhiR2xuYm0xbGJuUmZiR1ZtZENBL0lDY2daR010WkhKdmNHUnZkMjVmWDJ4cGMzUXRMV3hsWm5RdExXVnVkR1Z5SnlBNklDY25mV0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiblJsY2tSdmJtVTZJR0JrWXkxa2NtOXdaRzkzYmw5ZmJHbHpkQzB0Wlc1MFpYSXRaRzl1WlNSN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NXBjMTloYkdsbmJtMWxiblJmYkdWbWRDQS9JQ2NnWkdNdFpISnZjR1J2ZDI1ZlgyeHBjM1F0TFd4bFpuUXRMV1Z1ZEdWeUxXUnZibVVuSURvZ0p5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUgxZ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhocGREb2dZR1JqTFdSeWIzQmtiM2R1WDE5c2FYTjBMUzFsZUdsMEpIdDBhR2x6TG5CeWIzQnpMbWx6WDJGc2FXZHViV1Z1ZEY5c1pXWjBJRDhnSnlCa1l5MWtjbTl3Wkc5M2JsOWZiR2x6ZEMwdGJHVm1kQzB0WlhocGRDY2dPaUFuSjMxZ0xGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlZObGJHVmpkR1ZrS0hSb2FYTXVjSEp2Y0hNdWRtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaV1J2ZDI0bkxDQjBhR2x6TG1oaGJtUnNaVU5zYVdOclQzVjBjMmxrWlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGemMybDJaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxLSEJ5WlhaUWNtOXdjeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9jSEpsZGxCeWIzQnpMblpoYkhWbElDRTlQU0IwYUdsekxuQnliM0J6TG5aaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVk5sYkdWamRHVmtLSFJvYVhNdWNISnZjSE11ZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl0Y0c5dVpXNTBWMmxzYkZWdWJXOTFiblFvS1NCN1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMjF2ZFhObFpHOTNiaWNzSUhSb2FYTXVhR0Z1Wkd4bFEyeHBZMnRQZFhSemFXUmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm9ZVzVrYkdWVFpXeGxZM1FnUFNCcGRHVnRJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2wwWlcwdWRtRnNkV1VnSVQwOUlIUm9hWE11Y0hKdmNITXVkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNURhR0Z1WjJVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZERvZ2V5QnVZVzFsT2lCMGFHbHpMbkJ5YjNCekxtNWhiV1VzSUhaaGJIVmxPaUJwZEdWdExuWmhiSFZsSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVTJWc1pXTjBaV1FvYVhSbGJTNTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZXYVhOcFltbHNhWFI1S0NrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhWd1pHRjBaVk5sYkdWamRHVmtLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNsOXBibVJsZURvZ1oyVjBTWFJsYlVaeWIyMVdZV3gxWlNoMGFHbHpMbkJ5YjNCekxteHBjM1FzSUhaaGJIVmxLUzV1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE5sZEZkeVlYQndaWEpTWldZZ1BTQnViMlJsSUQwK0lDaDBhR2x6TG5keVlYQndaWEpmY21WbUlEMGdibTlrWlNrN1hHNWNiaUFnSUNCb1lXNWtiR1ZEYkdsamEwOTFkSE5wWkdVZ1BTQmxkbVZ1ZENBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQzSmhjSEJsY2w5eVpXWWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ2hkR2hwY3k1M2NtRndjR1Z5WDNKbFppNWpiMjUwWVdsdWN5aGxkbVZ1ZEM1MFlYSm5aWFFwSUNZbUlDRjBhR2x6TG5keVlYQndaWEpmY21WbUxtTnZiblJoYVc1ektHVjJaVzUwTG5CaGRHaGJNRjBwS1NBbUppQXZMeUJsZG1WdWRDNXdZWFJvV3pCZElHbHpJSFJvWlNCdWIyUmxJSFJvWVhRZ2RHaGxJR1YyWlc1MElHOXlhV2RwYm1GMFpXUWdabkp2YlN3Z2FYUWdaRzlsY3lCdWIzUWdibVZsWkNCMGJ5QjNZV3hySUhSb1pTQmhjbkpoZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRHRjBaUzVwYzE5c2FYTjBYM1pwYzJsaWJHVmNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdWNISnZjSE11YUdGdVpHeGxRbXgxY2lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWFHRnVaR3hsUW14MWNpaDdJSFJoY21kbGREb2dleUJ1WVcxbE9pQjBhR2x6TG5CeWIzQnpMbTVoYldVZ2ZTQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJwYzE5c2FYTjBYM1pwYzJsaWJHVTZJR1poYkhObElIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR2hoYm1Sc1pWWnBjMmxpYVd4cGRIa2dQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2MzUmhkR1VnUFQ0Z0tIc2dhWE5mYkdsemRGOTJhWE5wWW14bE9pQWhjM1JoZEdVdWFYTmZiR2x6ZEY5MmFYTnBZbXhsSUgwcEtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FHRnVaR3hsVkc5bloyeGxJRDBnZG1Gc2RXVWdQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1emRHRjBaUzVwYzE5c2FYTjBYM1pwYzJsaWJHVWdKaVlnZEdocGN5NXdjbTl3Y3k1MllXeDFaU0FoUFQwZ2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11YjI1RGFHRnVaMlVvZXlCMFlYSm5aWFE2SUhzZ2JtRnRaVG9nZEdocGN5NXdjbTl3Y3k1dVlXMWxMQ0IyWVd4MVpTQjlJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11YUdGdVpHeGxWbWx6YVdKcGJHbDBlU2dwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0J2Ymt0bGVWQnlaWE56WldRZ1BTQmxkbVZ1ZENBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWx6WDNOcGJtZHNaVjl2Y0hScGIyNHBJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMbXRsZVVOdlpHVWdQVDA5SURrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUmhZaUJwY3lCd2NtVnpjMlZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXpkR0YwWlM1cGMxOXNhWE4wWDNacGMybGliR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pWWnBjMmxpYVd4cGRIa29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBibVJsZUNBOUlIUm9hWE11Y0hKdmNITXVkbUZzZFdVZ1B5Qm5aWFJKZEdWdFJuSnZiVlpoYkhWbEtIUm9hWE11Y0hKdmNITXViR2x6ZEN3Z2RHaHBjeTV3Y205d2N5NTJZV3gxWlNrZ09pQXdPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlNBOUlIUm9hWE11Y0hKdmNITXVkbUZzZFdVZ1B5Qm5aWFJXWVd4MVpVWnliMjFKYm1SbGVDaDBhR2x6TG5CeWIzQnpMbXhwYzNRc0lIUm9hWE11YzNSaGRHVXVZM1Z5Y2w5cGJtUmxlQ2tnT2lCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvWlhabGJuUXVhMlY1UTI5a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F4TXpvZ0x5OGdSVzUwWlhJZ2FYTWdjSEpsYzNObFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXpNam9nTHk4Z1UzQmhZMlVnYVhNZ2NISmxjM05sWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNrZ2RHaHBjeTVvWVc1a2JHVlViMmRuYkdVb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F6T0RvZ0x5OGdWWEFnUVhKeWIzY2dhWE1nY0hKbGMzTmxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk4wWVhSbExtbHpYMnhwYzNSZmRtbHphV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndjbVYyWDJsdVpHVjRJRDBnWjJWMFVISmxka2x1WkdWNEtIUm9hWE11YzNSaGRHVXVZM1Z5Y2w5cGJtUmxlQ3dnYVc1a1pYZ3ViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJR04xY25KZmFXNWtaWGc2SUhCeVpYWmZhVzVrWlhnZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQTBNRG9nTHk4Z1JHOTNiaUJCY25KdmR5QnBjeUJ3Y21WemMyVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjM1JoZEdVdWFYTmZiR2x6ZEY5MmFYTnBZbXhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHNWxlSFJmYVc1a1pYZ2dQU0JuWlhST1pYaDBTVzVrWlhnb2RHaHBjeTV6ZEdGMFpTNWpkWEp5WDJsdVpHVjRMQ0JwYm1SbGVDNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIc2dZM1Z5Y2w5cGJtUmxlRG9nYm1WNGRGOXBibVJsZUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0YwYUdsekxuQnliM0J6TG1selgyRnNhV2R1YldWdWRGOXNaV1owS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHRnVaR3hsVm1semFXSnBiR2wwZVNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ016YzZJQzh2SUV4bFpuUWdZWEp5YjNjZ2FYTWdjSEpsYzNObFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NXpkR0YwWlM1cGMxOXNhWE4wWDNacGMybGliR1VnSmlZZ2RHaHBjeTV3Y205d2N5NXBjMTloYkdsbmJtMWxiblJmYkdWbWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pWWnBjMmxpYVd4cGRIa29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRE01T2lBdkx5QlNhV2RvZENCQmNuSnZkeUJwY3lCd2NtVnpjMlZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YzNSaGRHVXVhWE5mYkdsemRGOTJhWE5wWW14bElDWW1JSFJvYVhNdWNISnZjSE11YVhOZllXeHBaMjV0Wlc1MFgyeGxablFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZXYVhOcFltbHNhWFI1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFWnZjaUJqYUdGeUlIQnlaWE56WlhNc0lIZGxJR1J2SUdFZ2MyVmhjbU5vSUdadmNpQjBhR1VnYVhSbGJUcGNiaUFnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMbXRsZVM1c1pXNW5kR2dnUFQwOUlERWdKaVlnZEdocGN5NXdjbTl3Y3k1c2FYTjBMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTJoaGNpQTlJR1YyWlc1MExtdGxlUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdabWx5YzNSRGFHRnljeUE5SUhSb2FYTXVjSEp2Y0hNdWJHbHpkQzV0WVhBb2VDQTlQaUIwZVhCbGIyWWdlQ0E5UFQwZ0ozTjBjbWx1WnljZ0ppWWdlQzUwWlhoMFd6QmRMblJ2VEc5M1pYSkRZWE5sS0NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbGtlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJoY0hCcGJtY2dkR2hsSUhOaGJXVWdZMmhoY21GamRHVnlJR0ZuWVdsdUlHcDFiWEJ6SUhSdklIUm9aU0J1WlhoMElHMWhkR05vT2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjM1JoZEdVdVkzVnljbDlwYm1SbGVDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xrZUNBOUlHWnBjbk4wUTJoaGNuTXVhVzVrWlhoUFppaGphR0Z5TENCMGFHbHpMbk4wWVhSbExtTjFjbkpmYVc1a1pYZ2dLeUF4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwWkhnZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCcFpIZ2dQVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1I0SUQwZ1ptbHljM1JEYUdGeWN5NXBibVJsZUU5bUtHTm9ZWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2xrZUNBK1BTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJR04xY25KZmFXNWtaWGc2SUdsa2VDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQXZMeUJWY0c5dUlISmxibVJsY2lCMmFXRWdZM056SUhSeVlXNXphWFJwYjI0Z1ozSnZkWEFzSUhkbElIVnpaU0IwYUdseklHRnpJR0VnWTJGc2JHSmhZMnNnZEc4Z2MyVjBJSFJvWlNCM2FXUjBhQzlvWldsbmFIUWdiMllnZEdobElHUnliM0JrYjNkdUlHeHBjM1FnYVc0Z2RHaGxJSE4wWVhSbFhHNGdJQ0FnYzJWMFRHbHpkRVJwYldWdWMybHZiaUE5SUNncElEMCtYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdsemRGOTNhV1IwYURvZ2RHaHBjeTVzYVhOMFgzSmxaaTVqZFhKeVpXNTBMbTltWm5ObGRGZHBaSFJvTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR2x6ZEY5b1pXbG5hSFE2SUhSb2FYTXViR2x6ZEY5eVpXWXVZM1Z5Y21WdWRDNXZabVp6WlhSSVpXbG5hSFFzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXdjbTl3Y3k1cGMxOXVZWFJwZG1Wd2FXTnJaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRTVoZEdsMlpWTmxiR1ZqZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsUFh0MGFHbHpMbkJ5YjNCekxtNWhiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsUFh0MGFHbHpMbkJ5YjNCekxuWmhiSFZsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhWE4wUFh0MGFHbHpMbkJ5YjNCekxteHBjM1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFBYdDBhR2x6TG5CeWIzQnpMbTl1UTJoaGJtZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2RsZEVSeWIzQkViM2R1UVd4cFoyNXRaVzUwSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdWFYTmZZV3hwWjI1dFpXNTBYMnhsWm5RcElISmxkSFZ5YmlCMGFHbHpMbU52YlhCMWRHVmtYMjltWm5ObGRGOXNaV1owTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9kR2hwY3k1d2NtOXdjeTVwYzE5aGJHbG5ibTFsYm5SZmRHOXdLU0J5WlhSMWNtNGdkR2hwY3k1amIyMXdkWFJsWkY5dlptWnpaWFJmZEc5d08xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBOFVtVmhZM1F1Um5KaFoyMWxiblErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdsdWNIVjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQwblpHTXRaSEp2Y0dSdmQyNWZYMmx1Ym1WeUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFhSdlEyOXRjR3hsZEdVOUoyOW1aaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVDE3ZEdocGN5NXdjbTl3Y3k1dVlXMWxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXRmtUMjVzZVQwbmNtVmhaRzl1YkhrblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVOUoyaHBaR1JsYmlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVOWUzUm9hWE11Y0hKdmNITXVkbUZzZFdVZ2ZId2dNSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdjbVZtUFh0MGFHbHpMbk5sZEZkeVlYQndaWEpTWldaOUlHTnNZWE56VG1GdFpUMTdkR2hwY3k1amIyNTBZV2x1WlhKZlkyeGhjM05mYm1GdFpYMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbkJ5YjNCekxteGhZbVZzSUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpjR0Z1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVnpLQ2RrWXkxa2NtOXdaRzkzYmw5ZmJHRmlaV3duTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNka1l5MWtjbTl3Wkc5M2JsOWZiR0ZpWld3dExXTnNhV05yWldRbk9pQjBhR2x6TG5OMFlYUmxMbWx6WDJ4cGMzUmZkbWx6YVdKc1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdkR2hwY3k1d2NtOXdjeTVzWVdKbGJIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZjM0JoYmo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHQwYUdsekxtUnliM0JrYjNkdVgyUnBjM0JzWVhsZlkyeGhjM05mYm1GdFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhZa2x1WkdWNFBYdDBhR2x6TG1selgzTnBibWRzWlY5dmNIUnBiMjRnUHlBbkxURW5JRG9nSnpBbmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN2RHaHBjeTVvWVc1a2JHVldhWE5wWW1sc2FYUjVmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVMWlhsRWIzZHVQWHQwYUdsekxtOXVTMlY1VUhKbGMzTmxaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BFUnBjM0JzWVhsVVpYaDBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGelgzTjViV0p2YkQxN2RHaHBjeTV3Y205d2N5NW9ZWE5mYzNsdFltOXNmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1aGJXVTllM1JvYVhNdWNISnZjSE11Ym1GdFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzE5MGFYUnNaVDE3ZEdocGN5NXpkR0YwWlM1cGMxOXNhWE4wWDNacGMybGliR1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSTllM1JvYVhNdWNISnZjSE11Y0d4aFkyVm9iMnhrWlhKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVOWUzUm9hWE11Y0hKdmNITXVkbUZzZFdVZ2ZId2dNSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBQWHQwYUdsekxuQnliM0J6TG14cGMzUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOZllXeHBaMjVmZEdWNGRGOXNaV1owUFh0MGFHbHpMbkJ5YjNCekxtbHpYMkZzYVdkdVgzUmxlSFJmYkdWbWRIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lYUm9hWE11YVhOZmMybHVaMnhsWDI5d2RHbHZiaUFtSmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFNXTnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsamIyNDllM1JvYVhNdWNISnZjSE11YVhOZllXeHBaMjV0Wlc1MFgyeGxablFnUHlBblNXTkRhR1YyY205dVRHVm1kQ2NnT2lBblNXTkRhR1YyY205dVJHOTNiaWQ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVnpLQ2RrWXkxa2NtOXdaRzkzYmw5ZmMyVnNaV04wTFdGeWNtOTNKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWkdNdFpISnZjR1J2ZDI1ZlgzTmxiR1ZqZEMxaGNuSnZkeTB0YkdWbWRDYzZJSFJvYVhNdWNISnZjSE11YVhOZllXeHBaMjV0Wlc1MFgyeGxablFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZEdocGN5NXdjbTl3Y3k1bGNuSnZjaUFtSmlBOGNDQmpiR0Z6YzA1aGJXVTlKMlJqTFdacFpXeGtMV1Z5Y205eUp6NTdkR2hwY3k1d2NtOXdjeTVsY25KdmNuMDhMM0ErZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThRMU5UVkhKaGJuTnBkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc0OWUzUm9hWE11YzNSaGRHVXVhWE5mYkdsemRGOTJhWE5wWW14bGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaVzkxZEQxN01UQXdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxjejE3ZEdocGN5NTBjbUZ1YzJsMGFXOXVYMk5zWVhOelgyNWhiV1Z6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1RmJuUmxjbVZrUFh0MGFHbHpMbk5sZEV4cGMzUkVhVzFsYm5OcGIyNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFibTF2ZFc1MFQyNUZlR2wwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFh0MGFHbHpMbVJ5YjNCa2IzZHVYMnhwYzNSZlkyeGhjM05mYm1GdFpYTjlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQWHQwYUdsekxteHBjM1JmWTJ4aGMzTmZibUZ0WlhOOUlISmxaajE3ZEdocGN5NXNhWE4wWDNKbFpuMGdjM1I1YkdVOWUyZGxkRVJ5YjNCRWIzZHVRV3hwWjI1dFpXNTBLQ2w5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4VkdobGJXVmtVMk55YjJ4c1ltRnljMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhWMGIwaGxhV2RvZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYVjBiMGhwWkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjFkRzlJWldsbmFIUk5ZWGc5ZXpJd01IMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYm1SbGNsUnlZV05yU0c5eWFYcHZiblJoYkQxN2NISnZjSE1nUFQ0Z1BHUnBkaUI3TGk0dWNISnZjSE45SUhOMGVXeGxQWHQ3SUdScGMzQnNZWGs2SUNkdWIyNWxKeUI5ZlNBdlBuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYm1SbGNsUm9kVzFpU0c5eWFYcHZiblJoYkQxN2NISnZjSE1nUFQ0Z1BHUnBkaUI3TGk0dWNISnZjSE45SUhOMGVXeGxQWHQ3SUdScGMzQnNZWGs2SUNkdWIyNWxKeUI5ZlNBdlBuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMEZ5Y21GNUxtbHpRWEp5WVhrb2RHaHBjeTV3Y205d2N5NXNhWE4wS1NBL0lDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFNYUmxiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0MGFHbHpMbkJ5YjNCekxtTnNZWE56VG1GdFpVbDBaVzF6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlRDE3ZEdocGN5NXpkR0YwWlM1amRYSnlYMmx1WkdWNGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWVFpXeGxZM1E5ZTNSb2FYTXVhR0Z1Wkd4bFUyVnNaV04wZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lYTmZjM2x0WW05c1BYdDBhR2x6TG5CeWIzQnpMbWhoYzE5emVXMWliMng5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsMFpXMXpQWHQwYUdsekxuQnliM0J6TG14cGMzUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVoYldVOWUzUm9hWE11Y0hKdmNITXVibUZ0WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYTmZZV3hwWjI1ZmRHVjRkRjlzWldaMFBYdDBhR2x6TG5CeWIzQnpMbWx6WDJGc2FXZHVYM1JsZUhSZmJHVm1kSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTllM1JvYVhNdWNISnZjSE11ZG1Gc2RXVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tnT2lBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb2RHaHBjeTV3Y205d2N5NXNhWE4wS1M1dFlYQW9LR3RsZVN3Z2FXUjRLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeFNaV0ZqZEM1R2NtRm5iV1Z1ZENCclpYazllMnRsZVgwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVnpLQ2RrWXkxc2FYTjBYMTlzWVdKbGJDY3NJSFJvYVhNdWNISnZjSE11WTJ4aGMzTk9ZVzFsVEdGaVpXd3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdHJaWGw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhKZEdWdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdkR2hwY3k1d2NtOXdjeTVqYkdGemMwNWhiV1ZKZEdWdGMzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWVFpXeGxZM1E5ZTNSb2FYTXVhR0Z1Wkd4bFUyVnNaV04wZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGMxOXplVzFpYjJ3OWUzUm9hWE11Y0hKdmNITXVhR0Z6WDNONWJXSnZiSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwZEdWdGN6MTdkR2hwY3k1d2NtOXdjeTVzYVhOMFcydGxlVjE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUMTdkR2hwY3k1d2NtOXdjeTV1WVcxbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpYMkZzYVdkdVgzUmxlSFJmYkdWbWREMTdkR2hwY3k1d2NtOXdjeTVwYzE5aGJHbG5ibDkwWlhoMFgyeGxablI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTllM1JvYVhNdWNISnZjSE11ZG1Gc2RXVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTJsa2VDQWhQVDBnVDJKcVpXTjBMbXRsZVhNb2RHaHBjeTV3Y205d2N5NXNhWE4wS1M1c1pXNW5kR2dnTFNBeElDWW1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJpQmpiR0Z6YzA1aGJXVTlKMlJqTFd4cGMzUmZYM05sY0dGeVlYUnZjaWNnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlVtVmhZM1F1Um5KaFoyMWxiblErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlZHaGxiV1ZrVTJOeWIyeHNZbUZ5Y3o1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwwTlRVMVJ5WVc1emFYUnBiMjQrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwxSmxZV04wTGtaeVlXZHRaVzUwUGx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JuMWNibHh1UkhKdmNHUnZkMjR1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdOc1lYTnpUbUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JqYkdGemMwNWhiV1ZFYVhOd2JHRjVPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHTnNZWE56VG1GdFpVbDBaVzF6T2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR05zWVhOelRtRnRaVXhoWW1Wc09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdScGMyRmliR1ZrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQm9ZWE5mYzNsdFltOXNPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCcGMxOWhiR2xuYm0xbGJuUmZiR1ZtZERvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdhWE5mYm1GMGFYWmxjR2xqYTJWeU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JzWVdKbGJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCc2FYTjBPaUJzYVhOMFVISnZjRlI1Y0dVb0tTeGNiaUFnSUNCdVlXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHNXZYMkp2Y21SbGNqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYjI1RGFHRnVaMlU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lIQnNZV05sYUc5c1pHVnlPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lIWmhiSFZsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdFFjbTl3Vkhsd1pYTXViblZ0WW1WeUxDQlFjbTl3Vkhsd1pYTXVjM1J5YVc1blhTa3NYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRWNtOXdaRzkzYmp0Y2JpSXNJbWx0Y0c5eWRDQkVjbTl3Wkc5M2JpQm1jbTl0SUNjdUwyUnliM0JrYjNkdUxtcHplQ2M3WEc1cGJYQnZjblFnSnk0dlpISnZjR1J2ZDI0dWMyTnpjeWM3WEc1cGJYQnZjblFnSnk0dmJHbHpkQzV6WTNOekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdSSEp2Y0dSdmQyNDdYRzRpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVGQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGQlFUdEJRVWxCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRk1RVHRCUVVoQk96czdPenRCUTNSRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkZRVHRCUVVkQk8wRkJSVUU3UVVGRlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVlpCTzBGQllVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVV0Qk8wRkJRVUU3UVVGTFFUdEJRVVZCTzBGQlFVRTdRVUZJUVR0QlFWbEJPMEZCZWtOQk8wRkJRMEU3UVVFd1EwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJURUU3UVVGUlFUczdRVU40UkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZGUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVSQk8wRkJTMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJSRUU3UVVGSVFUdEJRVlJCTzBGQlEwRTdRVUYxUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXBCTzBGQlQwRTdPMEZEYkVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVbEJPMEZCUTBFN1FVRkRRVHRCUVVoQk8wRkJUVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZOUVR0QlFVTkJPMEZCUTBFN1FVRkdRVHRCUVVSQk8wRkJUVUU3UVVGQlFUdEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlVFRTdRVUZWUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpWRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN08wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFN1FVRkRRVHRCUVN0R1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVSQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRlBRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZIUVR0QlFVVkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVRkQ1FUdEJRVU5CTzBGQlEwRTdRVUVyUWtFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHRCUVVaQk8wRkJSRUU3UVVGRFFUczdPenM3TzBGQk5VaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSRUU3UVVGSFFUczdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUlVFN1FVRkRRVHRCUVVOQk96czdRVUZaUVR0QlFVTkJPMEZCUTBFN1FVRkVRVHRCUVVkQk96czdRVUZyUjBFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFN1FVRlBRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRrRTdRVUZSUVR0QlFVRkJPMEZCUVVFN1FVRkhRVHRCUVVOQk8wRkJSRUU3UVVGRVFUdEJRVk5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFN1FVRlBRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFWQkJPMEZCV1VFN1FVRkRRVHRCUVVOQk8wRkJSRUU3UVVGR1FUdEJRVTlCTzBGQlFVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJURUU3UVVGUFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCVEVFN1FVRlRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCVWtFN1FVRlhRVHRCUVVOQk8wRkJRVUU3UVVGRlFUdEJRVVJCTzBGQlRVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGUVFUdEJRVlZCTzBGQlFVRTdRVUZxUWtFN1FVRTJRa0U3T3pzN1FVRXZWRUU3T3pzN08wRkJTMEU3UVVGRFFUdEJRVU5CTzBGQlJFRTdRVUZIUVR0QlFVVkJPenM3T3pzN096dEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVUkJPMEZCUjBFN096dEJRVVZCTzBGQlEwRTdRVUZIUVR0QlFVZEJPenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRktRVHRCUVUxQk96czdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGS1FUdEJRVTFCT3pzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVpCTzBGQlNVRTdPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVJCTzBGQlIwRTdPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlIwRTdRVUZNUVR0QlFVOUJPenM3TzBGQmFFWkJPMEZCUTBFN1FVRXlWVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRm1RVHRCUVd0Q1FUczdPenM3T3pzN1FVTjZWMEU3UVVGRFFUdEJRVU5CTzBGQlJVRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNTNcXG4nKX19KS5kZWZhdWx0fSk7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.js\n");

/***/ })

}]);